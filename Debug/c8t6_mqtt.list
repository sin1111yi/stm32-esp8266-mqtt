
c8t6_mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c08  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb4  08007d18  08007d18  00017d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088cc  080088cc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080088cc  080088cc  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088cc  080088cc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088cc  080088cc  000188cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088d0  080088d0  000188d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080088d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000155c  200001e4  08008ab8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001740  08008ab8  00021740  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149e5  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003166  00000000  00000000  00034bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00037d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  00038c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7e2  00000000  00000000  000399f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e2b  00000000  00000000  000541d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd25  00000000  00000000  00065ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2d22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d84  00000000  00000000  000f2d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d00 	.word	0x08007d00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007d00 	.word	0x08007d00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_DMA_Init+0x38>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <MX_DMA_Init+0x38>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6153      	str	r3, [r2, #20]
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_DMA_Init+0x38>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2010      	movs	r0, #16
 8000aac:	f001 fba5 	bl	80021fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ab0:	2010      	movs	r0, #16
 8000ab2:	f001 fbbe 	bl	8002232 <HAL_NVIC_EnableIRQ>

}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <esp8266_CheckRespond>:

static WIFI_StateTypeDef wifi_state = _OFFLINE;
static WIFI_StateTypeDef trans_state = _UNKNOWN_STATE;
static uint8_t wifi_config_step = 0;

WIFI_StateTypeDef esp8266_CheckRespond(uint8_t *str) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	u1_printf("(DBG:) usart2 recv:\r\n%s\r\n", USART2_RxBUF);
 8000acc:	4910      	ldr	r1, [pc, #64]	; (8000b10 <esp8266_CheckRespond+0x4c>)
 8000ace:	4811      	ldr	r0, [pc, #68]	; (8000b14 <esp8266_CheckRespond+0x50>)
 8000ad0:	f001 f992 	bl	8001df8 <u1_printf>
	if (strstr((const char*) USART2_RxBUF, (const char*) str) != NULL) {
 8000ad4:	6879      	ldr	r1, [r7, #4]
 8000ad6:	480e      	ldr	r0, [pc, #56]	; (8000b10 <esp8266_CheckRespond+0x4c>)
 8000ad8:	f004 ffd3 	bl	8005a82 <strstr>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00a      	beq.n	8000af8 <esp8266_CheckRespond+0x34>
		u1_printf("(DBG:) Match succeed\r\n");
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <esp8266_CheckRespond+0x54>)
 8000ae4:	f001 f988 	bl	8001df8 <u1_printf>
		memset(USART2_RxBUF, 0, USART2_MAX_RECVLEN);
 8000ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aec:	2100      	movs	r1, #0
 8000aee:	4808      	ldr	r0, [pc, #32]	; (8000b10 <esp8266_CheckRespond+0x4c>)
 8000af0:	f004 fa46 	bl	8004f80 <memset>
		return _MATCHOK;
 8000af4:	2304      	movs	r3, #4
 8000af6:	e006      	b.n	8000b06 <esp8266_CheckRespond+0x42>
	}

	memset(USART2_RxBUF, 0, USART2_MAX_RECVLEN);
 8000af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000afc:	2100      	movs	r1, #0
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <esp8266_CheckRespond+0x4c>)
 8000b00:	f004 fa3e 	bl	8004f80 <memset>
	return _MATCHERROR;
 8000b04:	2303      	movs	r3, #3
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000ea4 	.word	0x20000ea4
 8000b14:	08007d18 	.word	0x08007d18
 8000b18:	08007d34 	.word	0x08007d34

08000b1c <esp8266_TransmitCmd>:

WIFI_StateTypeDef esp8266_TransmitCmd(uint8_t *cmd, uint8_t *ack,
		uint32_t waitms, uint8_t newline) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	70fb      	strb	r3, [r7, #3]
	int timeout = waitms;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	617b      	str	r3, [r7, #20]
	uint8_t check = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	74fb      	strb	r3, [r7, #19]
	memset(USART2_RxBUF, 0, USART2_MAX_RECVLEN);
 8000b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b36:	2100      	movs	r1, #0
 8000b38:	482b      	ldr	r0, [pc, #172]	; (8000be8 <esp8266_TransmitCmd+0xcc>)
 8000b3a:	f004 fa21 	bl	8004f80 <memset>
	u1_printf("\r\n(DBG:) Try to send cmd: %s\r\n", cmd);
 8000b3e:	68f9      	ldr	r1, [r7, #12]
 8000b40:	482a      	ldr	r0, [pc, #168]	; (8000bec <esp8266_TransmitCmd+0xd0>)
 8000b42:	f001 f959 	bl	8001df8 <u1_printf>
	if (newline == 0)
 8000b46:	78fb      	ldrb	r3, [r7, #3]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d104      	bne.n	8000b56 <esp8266_TransmitCmd+0x3a>
		u2_transmit("%s", cmd);      // transmit cmd to usart2
 8000b4c:	68f9      	ldr	r1, [r7, #12]
 8000b4e:	4828      	ldr	r0, [pc, #160]	; (8000bf0 <esp8266_TransmitCmd+0xd4>)
 8000b50:	f001 f97a 	bl	8001e48 <u2_transmit>
 8000b54:	e003      	b.n	8000b5e <esp8266_TransmitCmd+0x42>
	else
		u2_transmit("%s\r\n", cmd); // transmit cmd to usart2
 8000b56:	68f9      	ldr	r1, [r7, #12]
 8000b58:	4826      	ldr	r0, [pc, #152]	; (8000bf4 <esp8266_TransmitCmd+0xd8>)
 8000b5a:	f001 f975 	bl	8001e48 <u2_transmit>

	u1_printf("(DBG:) Waiting reply\r\n");
 8000b5e:	4826      	ldr	r0, [pc, #152]	; (8000bf8 <esp8266_TransmitCmd+0xdc>)
 8000b60:	f001 f94a 	bl	8001df8 <u1_printf>
	while (timeout--) {
 8000b64:	e01f      	b.n	8000ba6 <esp8266_TransmitCmd+0x8a>
		// u1_printf("%d ", timeout);
		// finish dma receive
		if (USART2_RecvEndFlag == 1) {
 8000b66:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <esp8266_TransmitCmd+0xe0>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d117      	bne.n	8000ba0 <esp8266_TransmitCmd+0x84>
			check = esp8266_CheckRespond(ack);
 8000b70:	68b8      	ldr	r0, [r7, #8]
 8000b72:	f7ff ffa7 	bl	8000ac4 <esp8266_CheckRespond>
 8000b76:	4603      	mov	r3, r0
 8000b78:	74fb      	strb	r3, [r7, #19]
			if (check == _MATCHOK) {
 8000b7a:	7cfb      	ldrb	r3, [r7, #19]
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d102      	bne.n	8000b86 <esp8266_TransmitCmd+0x6a>
				u1_printf("(DBG:) Command closed loop completed\r\n");
 8000b80:	481f      	ldr	r0, [pc, #124]	; (8000c00 <esp8266_TransmitCmd+0xe4>)
 8000b82:	f001 f939 	bl	8001df8 <u1_printf>
			}

			USART2_RxLen = 0;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <esp8266_TransmitCmd+0xe8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
			USART2_RecvEndFlag = 0;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <esp8266_TransmitCmd+0xe0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart2, USART2_RxBUF, USART2_MAX_RECVLEN);
 8000b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b96:	4914      	ldr	r1, [pc, #80]	; (8000be8 <esp8266_TransmitCmd+0xcc>)
 8000b98:	481b      	ldr	r0, [pc, #108]	; (8000c08 <esp8266_TransmitCmd+0xec>)
 8000b9a:	f003 f840 	bl	8003c1e <HAL_UART_Receive_DMA>

			break;
 8000b9e:	e007      	b.n	8000bb0 <esp8266_TransmitCmd+0x94>
		}
		HAL_Delay(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f001 fa2f 	bl	8002004 <HAL_Delay>
	while (timeout--) {
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	1e5a      	subs	r2, r3, #1
 8000baa:	617a      	str	r2, [r7, #20]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1da      	bne.n	8000b66 <esp8266_TransmitCmd+0x4a>
	}

	if (check == _MATCHERROR) {
 8000bb0:	7cfb      	ldrb	r3, [r7, #19]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d104      	bne.n	8000bc0 <esp8266_TransmitCmd+0xa4>
		u1_printf("\r\n(DBG:) Cmd match failed\r\n");
 8000bb6:	4815      	ldr	r0, [pc, #84]	; (8000c0c <esp8266_TransmitCmd+0xf0>)
 8000bb8:	f001 f91e 	bl	8001df8 <u1_printf>
		return check;
 8000bbc:	7cfb      	ldrb	r3, [r7, #19]
 8000bbe:	e00e      	b.n	8000bde <esp8266_TransmitCmd+0xc2>
	}
	if (timeout <= 0) {
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	dc07      	bgt.n	8000bd6 <esp8266_TransmitCmd+0xba>
		u1_printf("(DBG:) Finish waiting\r\n");
 8000bc6:	4812      	ldr	r0, [pc, #72]	; (8000c10 <esp8266_TransmitCmd+0xf4>)
 8000bc8:	f001 f916 	bl	8001df8 <u1_printf>
		u1_printf("\r\n(DBG:) Timeout\r\n");
 8000bcc:	4811      	ldr	r0, [pc, #68]	; (8000c14 <esp8266_TransmitCmd+0xf8>)
 8000bce:	f001 f913 	bl	8001df8 <u1_printf>
		return _TIMEOUT;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	e003      	b.n	8000bde <esp8266_TransmitCmd+0xc2>
	}
	u1_printf("(DBG:) Succeed\r\n");
 8000bd6:	4810      	ldr	r0, [pc, #64]	; (8000c18 <esp8266_TransmitCmd+0xfc>)
 8000bd8:	f001 f90e 	bl	8001df8 <u1_printf>
	return _SUCCEED;
 8000bdc:	2301      	movs	r3, #1
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000ea4 	.word	0x20000ea4
 8000bec:	08007d4c 	.word	0x08007d4c
 8000bf0:	08007d6c 	.word	0x08007d6c
 8000bf4:	08007d70 	.word	0x08007d70
 8000bf8:	08007d78 	.word	0x08007d78
 8000bfc:	20000209 	.word	0x20000209
 8000c00:	08007d90 	.word	0x08007d90
 8000c04:	20000208 	.word	0x20000208
 8000c08:	200016e8 	.word	0x200016e8
 8000c0c:	08007db8 	.word	0x08007db8
 8000c10:	08007dd4 	.word	0x08007dd4
 8000c14:	08007dec 	.word	0x08007dec
 8000c18:	08007e00 	.word	0x08007e00

08000c1c <esp8266_HardwareReset>:

WIFI_StateTypeDef esp8266_HardwareReset(uint32_t waitms) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	int timeout = waitms;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	60fb      	str	r3, [r7, #12]
	WIFI_RST_Enable();
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2e:	481f      	ldr	r0, [pc, #124]	; (8000cac <esp8266_HardwareReset+0x90>)
 8000c30:	f001 ff3c 	bl	8002aac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000c34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c38:	f001 f9e4 	bl	8002004 <HAL_Delay>
	WIFI_RST_Disable();
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c42:	481a      	ldr	r0, [pc, #104]	; (8000cac <esp8266_HardwareReset+0x90>)
 8000c44:	f001 ff32 	bl	8002aac <HAL_GPIO_WritePin>
	while (timeout--) {
 8000c48:	e01b      	b.n	8000c82 <esp8266_HardwareReset+0x66>
		if (USART2_RecvEndFlag == 1) {
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <esp8266_HardwareReset+0x94>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d113      	bne.n	8000c7c <esp8266_HardwareReset+0x60>

			u1_printf("(DBG:) Hardware Reset OK!\r\n");
 8000c54:	4817      	ldr	r0, [pc, #92]	; (8000cb4 <esp8266_HardwareReset+0x98>)
 8000c56:	f001 f8cf 	bl	8001df8 <u1_printf>
			HAL_Delay(100);
 8000c5a:	2064      	movs	r0, #100	; 0x64
 8000c5c:	f001 f9d2 	bl	8002004 <HAL_Delay>

			USART2_RxLen = 0;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <esp8266_HardwareReset+0x9c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
			USART2_RecvEndFlag = 0;
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <esp8266_HardwareReset+0x94>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart2, USART2_RxBUF, USART2_MAX_RECVLEN);
 8000c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c70:	4912      	ldr	r1, [pc, #72]	; (8000cbc <esp8266_HardwareReset+0xa0>)
 8000c72:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <esp8266_HardwareReset+0xa4>)
 8000c74:	f002 ffd3 	bl	8003c1e <HAL_UART_Receive_DMA>

			return _SUCCEED;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e013      	b.n	8000ca4 <esp8266_HardwareReset+0x88>
		}
		HAL_Delay(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f001 f9c1 	bl	8002004 <HAL_Delay>
	while (timeout--) {
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	1e5a      	subs	r2, r3, #1
 8000c86:	60fa      	str	r2, [r7, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1de      	bne.n	8000c4a <esp8266_HardwareReset+0x2e>
	}
	if (timeout <= 0) {
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	dc07      	bgt.n	8000ca2 <esp8266_HardwareReset+0x86>
		u1_printf("(DBG:) Finish waiting\r\n");
 8000c92:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <esp8266_HardwareReset+0xa8>)
 8000c94:	f001 f8b0 	bl	8001df8 <u1_printf>
		u1_printf("\r\n(DBG:) Timeout\r\n");
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <esp8266_HardwareReset+0xac>)
 8000c9a:	f001 f8ad 	bl	8001df8 <u1_printf>
		return _TIMEOUT;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	e000      	b.n	8000ca4 <esp8266_HardwareReset+0x88>
	}

	return _UNKNOWN_ERROR;
 8000ca2:	23ff      	movs	r3, #255	; 0xff
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40010c00 	.word	0x40010c00
 8000cb0:	20000209 	.word	0x20000209
 8000cb4:	08007e14 	.word	0x08007e14
 8000cb8:	20000208 	.word	0x20000208
 8000cbc:	20000ea4 	.word	0x20000ea4
 8000cc0:	200016e8 	.word	0x200016e8
 8000cc4:	08007dd4 	.word	0x08007dd4
 8000cc8:	08007dec 	.word	0x08007dec

08000ccc <esp8266_ConnectAP>:

WIFI_StateTypeDef esp8266_ConnectAP() {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
	uint16_t cmd_len = strlen(AP_SSID) + strlen(AP_PSWD) + 30;
 8000cd2:	232e      	movs	r3, #46	; 0x2e
 8000cd4:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f004 f93b 	bl	8004f54 <malloc>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	603b      	str	r3, [r7, #0]
	memset(cmd, 0, cmd_len);
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	6838      	ldr	r0, [r7, #0]
 8000cea:	f004 f949 	bl	8004f80 <memset>
	sprintf((char*) cmd, "AT+CWJAP_CUR=\"%s\",\"%s\"", AP_SSID, AP_PSWD);
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <esp8266_ConnectAP+0x5c>)
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <esp8266_ConnectAP+0x60>)
 8000cf2:	490f      	ldr	r1, [pc, #60]	; (8000d30 <esp8266_ConnectAP+0x64>)
 8000cf4:	6838      	ldr	r0, [r7, #0]
 8000cf6:	f004 fe61 	bl	80059bc <siprintf>

	if (esp8266_TransmitCmd(cmd, (uint8_t*) "WIFI CONNECTED",
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <esp8266_ConnectAP+0x68>)
 8000cfe:	490e      	ldr	r1, [pc, #56]	; (8000d38 <esp8266_ConnectAP+0x6c>)
 8000d00:	6838      	ldr	r0, [r7, #0]
 8000d02:	f7ff ff0b 	bl	8000b1c <esp8266_TransmitCmd>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d103      	bne.n	8000d14 <esp8266_ConnectAP+0x48>
			3 * ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
		wifi_state = _ONLINE;
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <esp8266_ConnectAP+0x70>)
 8000d0e:	2205      	movs	r2, #5
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	e002      	b.n	8000d1a <esp8266_ConnectAP+0x4e>
	else
		wifi_state = _OFFLINE;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <esp8266_ConnectAP+0x70>)
 8000d16:	2206      	movs	r2, #6
 8000d18:	701a      	strb	r2, [r3, #0]

	return wifi_state;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <esp8266_ConnectAP+0x70>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	08007e30 	.word	0x08007e30
 8000d2c:	08007e3c 	.word	0x08007e3c
 8000d30:	08007e48 	.word	0x08007e48
 8000d34:	0002fffd 	.word	0x0002fffd
 8000d38:	08007e60 	.word	0x08007e60
 8000d3c:	20000000 	.word	0x20000000

08000d40 <esp8266_ConnectServer>:

WIFI_StateTypeDef esp8266_ConnectServer() {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
	uint16_t cmd_len = strlen(IpServer) + strlen(ServerPort) + 30;
 8000d46:	2353      	movs	r3, #83	; 0x53
 8000d48:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f004 f901 	bl	8004f54 <malloc>
 8000d52:	4603      	mov	r3, r0
 8000d54:	603b      	str	r3, [r7, #0]
	memset(cmd, 0, cmd_len);
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	6838      	ldr	r0, [r7, #0]
 8000d5e:	f004 f90f 	bl	8004f80 <memset>
	sprintf((char*) cmd, "AT+CIPSTART=\"TCP\",\"%s\",%s", IpServer, ServerPort);
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <esp8266_ConnectServer+0x5c>)
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <esp8266_ConnectServer+0x60>)
 8000d66:	490f      	ldr	r1, [pc, #60]	; (8000da4 <esp8266_ConnectServer+0x64>)
 8000d68:	6838      	ldr	r0, [r7, #0]
 8000d6a:	f004 fe27 	bl	80059bc <siprintf>

	if (esp8266_TransmitCmd(cmd, (uint8_t*) "CONNECT", 3 * ESP8266_MAX_TIMEOUT,
 8000d6e:	2301      	movs	r3, #1
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <esp8266_ConnectServer+0x68>)
 8000d72:	490e      	ldr	r1, [pc, #56]	; (8000dac <esp8266_ConnectServer+0x6c>)
 8000d74:	6838      	ldr	r0, [r7, #0]
 8000d76:	f7ff fed1 	bl	8000b1c <esp8266_TransmitCmd>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d103      	bne.n	8000d88 <esp8266_ConnectServer+0x48>
	WITH_NEWLINE) == _SUCCEED)
		wifi_state = _CONNECTED;
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <esp8266_ConnectServer+0x70>)
 8000d82:	2207      	movs	r2, #7
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	e002      	b.n	8000d8e <esp8266_ConnectServer+0x4e>
	else
		wifi_state = _DISCONNECTED;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <esp8266_ConnectServer+0x70>)
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	701a      	strb	r2, [r3, #0]

	return wifi_state;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <esp8266_ConnectServer+0x70>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	08007e70 	.word	0x08007e70
 8000da0:	08007e78 	.word	0x08007e78
 8000da4:	08007eac 	.word	0x08007eac
 8000da8:	0002fffd 	.word	0x0002fffd
 8000dac:	08007ec8 	.word	0x08007ec8
 8000db0:	20000000 	.word	0x20000000

08000db4 <esp8266_SetUpTCPConnection>:

WIFI_StateTypeDef esp8266_SetUpTCPConnection() {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	71fb      	strb	r3, [r7, #7]

	/* Reset esp8266 */
	u1_printf("(DBG:) Trying to reset esp8266\r\n");
 8000dbe:	48b6      	ldr	r0, [pc, #728]	; (8001098 <esp8266_SetUpTCPConnection+0x2e4>)
 8000dc0:	f001 f81a 	bl	8001df8 <u1_printf>
	wifi_config_step++;
 8000dc4:	4bb5      	ldr	r3, [pc, #724]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4bb3      	ldr	r3, [pc, #716]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000dce:	701a      	strb	r2, [r3, #0]
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 8000dd0:	e019      	b.n	8000e06 <esp8266_SetUpTCPConnection+0x52>
		retry_count++;
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ddc:	f001 f912 	bl	8002004 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2b0a      	cmp	r3, #10
 8000de4:	d90f      	bls.n	8000e06 <esp8266_SetUpTCPConnection+0x52>
			u1_printf("(DBG:) Reset failed\r\n");
 8000de6:	48ae      	ldr	r0, [pc, #696]	; (80010a0 <esp8266_SetUpTCPConnection+0x2ec>)
 8000de8:	f001 f806 	bl	8001df8 <u1_printf>
			retry_count = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	71fb      	strb	r3, [r7, #7]
			trans_state = _UNKNOWN_STATE;
 8000df0:	4bac      	ldr	r3, [pc, #688]	; (80010a4 <esp8266_SetUpTCPConnection+0x2f0>)
 8000df2:	22ee      	movs	r2, #238	; 0xee
 8000df4:	701a      	strb	r2, [r3, #0]
			wifi_config_step--;
 8000df6:	4ba9      	ldr	r3, [pc, #676]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4ba7      	ldr	r3, [pc, #668]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000e00:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e27c      	b.n	8001300 <esp8266_SetUpTCPConnection+0x54c>
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 8000e06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e0a:	f7ff ff07 	bl	8000c1c <esp8266_HardwareReset>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d1de      	bne.n	8000dd2 <esp8266_SetUpTCPConnection+0x1e>
		}
	}

	HAL_Delay(2000);		// wait 2 seconds
 8000e14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e18:	f001 f8f4 	bl	8002004 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	71fb      	strb	r3, [r7, #7]

	/* Disable transparent transmission */
	u1_printf("(DBG:) Trying to close transparent transmission\r\n");
 8000e20:	48a1      	ldr	r0, [pc, #644]	; (80010a8 <esp8266_SetUpTCPConnection+0x2f4>)
 8000e22:	f000 ffe9 	bl	8001df8 <u1_printf>
	wifi_config_step++;
 8000e26:	4b9d      	ldr	r3, [pc, #628]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b9b      	ldr	r3, [pc, #620]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000e30:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(TRANS_QUIT_CMD, TRANS_QUIT_CMD,
 8000e32:	e016      	b.n	8000e62 <esp8266_SetUpTCPConnection+0xae>
	ESP8266_MAX_TIMEOUT,
	WITHOUT_NEWLINE) != _SUCCEED) {
		retry_count++;
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	3301      	adds	r3, #1
 8000e38:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1500);
 8000e3a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e3e:	f001 f8e1 	bl	8002004 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b0a      	cmp	r3, #10
 8000e46:	d90c      	bls.n	8000e62 <esp8266_SetUpTCPConnection+0xae>
			u1_printf("(DBG:) Close transparent transmission failed\r\n");
 8000e48:	4898      	ldr	r0, [pc, #608]	; (80010ac <esp8266_SetUpTCPConnection+0x2f8>)
 8000e4a:	f000 ffd5 	bl	8001df8 <u1_printf>
			retry_count = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000e52:	4b92      	ldr	r3, [pc, #584]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4b90      	ldr	r3, [pc, #576]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000e5c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e24e      	b.n	8001300 <esp8266_SetUpTCPConnection+0x54c>
	while (esp8266_TransmitCmd(TRANS_QUIT_CMD, TRANS_QUIT_CMD,
 8000e62:	2300      	movs	r3, #0
 8000e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e68:	4991      	ldr	r1, [pc, #580]	; (80010b0 <esp8266_SetUpTCPConnection+0x2fc>)
 8000e6a:	4891      	ldr	r0, [pc, #580]	; (80010b0 <esp8266_SetUpTCPConnection+0x2fc>)
 8000e6c:	f7ff fe56 	bl	8000b1c <esp8266_TransmitCmd>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d1de      	bne.n	8000e34 <esp8266_SetUpTCPConnection+0x80>
		}
	}

	trans_state = _TRANS_DISABLE;
 8000e76:	4b8b      	ldr	r3, [pc, #556]	; (80010a4 <esp8266_SetUpTCPConnection+0x2f0>)
 8000e78:	220a      	movs	r2, #10
 8000e7a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1500);
 8000e7c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e80:	f001 f8c0 	bl	8002004 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8000e84:	2300      	movs	r3, #0
 8000e86:	71fb      	strb	r3, [r7, #7]

	/* Close echo */
	u1_printf("(DBG:) Trying to close echo\r\n");
 8000e88:	488a      	ldr	r0, [pc, #552]	; (80010b4 <esp8266_SetUpTCPConnection+0x300>)
 8000e8a:	f000 ffb5 	bl	8001df8 <u1_printf>
	wifi_config_step++;
 8000e8e:	4b83      	ldr	r3, [pc, #524]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b81      	ldr	r3, [pc, #516]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000e98:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 8000e9a:	e016      	b.n	8000eca <esp8266_SetUpTCPConnection+0x116>
			!= _SUCCEED) {
		retry_count++;
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea6:	f001 f8ad 	bl	8002004 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b0a      	cmp	r3, #10
 8000eae:	d90c      	bls.n	8000eca <esp8266_SetUpTCPConnection+0x116>
			u1_printf("(DBG:) Close echo failed\r\n");
 8000eb0:	4881      	ldr	r0, [pc, #516]	; (80010b8 <esp8266_SetUpTCPConnection+0x304>)
 8000eb2:	f000 ffa1 	bl	8001df8 <u1_printf>
			retry_count = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000eba:	4b78      	ldr	r3, [pc, #480]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b76      	ldr	r3, [pc, #472]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000ec4:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e21a      	b.n	8001300 <esp8266_SetUpTCPConnection+0x54c>
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ed0:	497a      	ldr	r1, [pc, #488]	; (80010bc <esp8266_SetUpTCPConnection+0x308>)
 8000ed2:	487b      	ldr	r0, [pc, #492]	; (80010c0 <esp8266_SetUpTCPConnection+0x30c>)
 8000ed4:	f7ff fe22 	bl	8000b1c <esp8266_TransmitCmd>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d1de      	bne.n	8000e9c <esp8266_SetUpTCPConnection+0xe8>
		}
	}

	HAL_Delay(100);
 8000ede:	2064      	movs	r0, #100	; 0x64
 8000ee0:	f001 f890 	bl	8002004 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	71fb      	strb	r3, [r7, #7]

	/* Set wifi mode 0:AP 1:STA 2:AP+STA */
	u1_printf("(DBG:) Trying to set Wifi mode\r\n");
 8000ee8:	4876      	ldr	r0, [pc, #472]	; (80010c4 <esp8266_SetUpTCPConnection+0x310>)
 8000eea:	f000 ff85 	bl	8001df8 <u1_printf>
	wifi_config_step++;
 8000eee:	4b6b      	ldr	r3, [pc, #428]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b69      	ldr	r3, [pc, #420]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000ef8:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE_CUR=1", OK_ACK, 500,
 8000efa:	e016      	b.n	8000f2a <esp8266_SetUpTCPConnection+0x176>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	3301      	adds	r3, #1
 8000f00:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000f02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f06:	f001 f87d 	bl	8002004 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b0a      	cmp	r3, #10
 8000f0e:	d90c      	bls.n	8000f2a <esp8266_SetUpTCPConnection+0x176>
			u1_printf("(DBG:) Set Wifi mode failed\r\n");
 8000f10:	486d      	ldr	r0, [pc, #436]	; (80010c8 <esp8266_SetUpTCPConnection+0x314>)
 8000f12:	f000 ff71 	bl	8001df8 <u1_printf>
			retry_count = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000f1a:	4b60      	ldr	r3, [pc, #384]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b5e      	ldr	r3, [pc, #376]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000f24:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e1ea      	b.n	8001300 <esp8266_SetUpTCPConnection+0x54c>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE_CUR=1", OK_ACK, 500,
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f30:	4962      	ldr	r1, [pc, #392]	; (80010bc <esp8266_SetUpTCPConnection+0x308>)
 8000f32:	4866      	ldr	r0, [pc, #408]	; (80010cc <esp8266_SetUpTCPConnection+0x318>)
 8000f34:	f7ff fdf2 	bl	8000b1c <esp8266_TransmitCmd>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d1de      	bne.n	8000efc <esp8266_SetUpTCPConnection+0x148>
		}
	}

	HAL_Delay(100);
 8000f3e:	2064      	movs	r0, #100	; 0x64
 8000f40:	f001 f860 	bl	8002004 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8000f44:	2300      	movs	r3, #0
 8000f46:	71fb      	strb	r3, [r7, #7]

	/* Disable auto connect */
	u1_printf("(DBG:) Trying to close auto connect\r\n");
 8000f48:	4861      	ldr	r0, [pc, #388]	; (80010d0 <esp8266_SetUpTCPConnection+0x31c>)
 8000f4a:	f000 ff55 	bl	8001df8 <u1_printf>
	wifi_config_step++;
 8000f4e:	4b53      	ldr	r3, [pc, #332]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	3301      	adds	r3, #1
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b51      	ldr	r3, [pc, #324]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000f58:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 8000f5a:	e016      	b.n	8000f8a <esp8266_SetUpTCPConnection+0x1d6>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000f62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f66:	f001 f84d 	bl	8002004 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b0a      	cmp	r3, #10
 8000f6e:	d90c      	bls.n	8000f8a <esp8266_SetUpTCPConnection+0x1d6>
			u1_printf("(DBG:) Close auto connect failed\r\n");
 8000f70:	4858      	ldr	r0, [pc, #352]	; (80010d4 <esp8266_SetUpTCPConnection+0x320>)
 8000f72:	f000 ff41 	bl	8001df8 <u1_printf>
			retry_count = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000f7a:	4b48      	ldr	r3, [pc, #288]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b46      	ldr	r3, [pc, #280]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000f84:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e1ba      	b.n	8001300 <esp8266_SetUpTCPConnection+0x54c>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f90:	494a      	ldr	r1, [pc, #296]	; (80010bc <esp8266_SetUpTCPConnection+0x308>)
 8000f92:	4851      	ldr	r0, [pc, #324]	; (80010d8 <esp8266_SetUpTCPConnection+0x324>)
 8000f94:	f7ff fdc2 	bl	8000b1c <esp8266_TransmitCmd>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d1de      	bne.n	8000f5c <esp8266_SetUpTCPConnection+0x1a8>
		}
	}

	HAL_Delay(100);
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	f001 f830 	bl	8002004 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	71fb      	strb	r3, [r7, #7]

	/* Connect to AP(Wifi) */
	u1_printf("(DBG:) Trying to connect to AP\r\n");
 8000fa8:	484c      	ldr	r0, [pc, #304]	; (80010dc <esp8266_SetUpTCPConnection+0x328>)
 8000faa:	f000 ff25 	bl	8001df8 <u1_printf>
	wifi_config_step++;
 8000fae:	4b3b      	ldr	r3, [pc, #236]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b39      	ldr	r3, [pc, #228]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000fb8:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectAP() != _ONLINE) {
 8000fba:	e016      	b.n	8000fea <esp8266_SetUpTCPConnection+0x236>
		retry_count++;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc6:	f001 f81d 	bl	8002004 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b0a      	cmp	r3, #10
 8000fce:	d90c      	bls.n	8000fea <esp8266_SetUpTCPConnection+0x236>
			u1_printf("(DBG:) Connect to AP failed\r\n");
 8000fd0:	4843      	ldr	r0, [pc, #268]	; (80010e0 <esp8266_SetUpTCPConnection+0x32c>)
 8000fd2:	f000 ff11 	bl	8001df8 <u1_printf>
			retry_count = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000fda:	4b30      	ldr	r3, [pc, #192]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8000fe4:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e18a      	b.n	8001300 <esp8266_SetUpTCPConnection+0x54c>
	while (esp8266_ConnectAP() != _ONLINE) {
 8000fea:	f7ff fe6f 	bl	8000ccc <esp8266_ConnectAP>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d1e3      	bne.n	8000fbc <esp8266_SetUpTCPConnection+0x208>
		}
	}

	HAL_Delay(1000);
 8000ff4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff8:	f001 f804 	bl	8002004 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	71fb      	strb	r3, [r7, #7]

	/* Try to get AP info */
	if (wifi_state == _ONLINE) {
 8001000:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <esp8266_SetUpTCPConnection+0x330>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d123      	bne.n	8001050 <esp8266_SetUpTCPConnection+0x29c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP_CUR?", OK_ACK,
 8001008:	e018      	b.n	800103c <esp8266_SetUpTCPConnection+0x288>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	3301      	adds	r3, #1
 800100e:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f000 fff6 	bl	8002004 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b05      	cmp	r3, #5
 800101c:	d90e      	bls.n	800103c <esp8266_SetUpTCPConnection+0x288>
				u1_printf("(DBG:) Get AP msg failed\r\n");
 800101e:	4832      	ldr	r0, [pc, #200]	; (80010e8 <esp8266_SetUpTCPConnection+0x334>)
 8001020:	f000 feea 	bl	8001df8 <u1_printf>
				u1_printf(
 8001024:	4831      	ldr	r0, [pc, #196]	; (80010ec <esp8266_SetUpTCPConnection+0x338>)
 8001026:	f000 fee7 	bl	8001df8 <u1_printf>
						"(DBG:) Connect server process will not be terminated");
				retry_count = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	3b01      	subs	r3, #1
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8001038:	701a      	strb	r2, [r3, #0]
				break;
 800103a:	e009      	b.n	8001050 <esp8266_SetUpTCPConnection+0x29c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP_CUR?", OK_ACK,
 800103c:	2301      	movs	r3, #1
 800103e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001042:	491e      	ldr	r1, [pc, #120]	; (80010bc <esp8266_SetUpTCPConnection+0x308>)
 8001044:	482a      	ldr	r0, [pc, #168]	; (80010f0 <esp8266_SetUpTCPConnection+0x33c>)
 8001046:	f7ff fd69 	bl	8000b1c <esp8266_TransmitCmd>
 800104a:	4603      	mov	r3, r0
 800104c:	2b01      	cmp	r3, #1
 800104e:	d1dc      	bne.n	800100a <esp8266_SetUpTCPConnection+0x256>
			}
		}
	}

	HAL_Delay(1000);
 8001050:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001054:	f000 ffd6 	bl	8002004 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8001058:	2300      	movs	r3, #0
 800105a:	71fb      	strb	r3, [r7, #7]

	/* Try to get IP info */
	if (wifi_state == _ONLINE) {
 800105c:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <esp8266_SetUpTCPConnection+0x330>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b05      	cmp	r3, #5
 8001062:	d153      	bne.n	800110c <esp8266_SetUpTCPConnection+0x358>
		while (esp8266_TransmitCmd((uint8_t*) "	AT+CIPSTA_CUR?", OK_ACK,
 8001064:	e048      	b.n	80010f8 <esp8266_SetUpTCPConnection+0x344>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	3301      	adds	r3, #1
 800106a:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 800106c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001070:	f000 ffc8 	bl	8002004 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	2b05      	cmp	r3, #5
 8001078:	d93e      	bls.n	80010f8 <esp8266_SetUpTCPConnection+0x344>
				u1_printf("(DBG:) Get IP info failed\r\n");
 800107a:	481e      	ldr	r0, [pc, #120]	; (80010f4 <esp8266_SetUpTCPConnection+0x340>)
 800107c:	f000 febc 	bl	8001df8 <u1_printf>
				u1_printf(
 8001080:	481a      	ldr	r0, [pc, #104]	; (80010ec <esp8266_SetUpTCPConnection+0x338>)
 8001082:	f000 feb9 	bl	8001df8 <u1_printf>
						"(DBG:) Connect server process will not be terminated");
				retry_count = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	3b01      	subs	r3, #1
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b02      	ldr	r3, [pc, #8]	; (800109c <esp8266_SetUpTCPConnection+0x2e8>)
 8001094:	701a      	strb	r2, [r3, #0]
				break;
 8001096:	e039      	b.n	800110c <esp8266_SetUpTCPConnection+0x358>
 8001098:	08007ed0 	.word	0x08007ed0
 800109c:	20000200 	.word	0x20000200
 80010a0:	08007ef4 	.word	0x08007ef4
 80010a4:	20000001 	.word	0x20000001
 80010a8:	08007f0c 	.word	0x08007f0c
 80010ac:	08007f40 	.word	0x08007f40
 80010b0:	08007f70 	.word	0x08007f70
 80010b4:	08007f74 	.word	0x08007f74
 80010b8:	08007f94 	.word	0x08007f94
 80010bc:	08007fb0 	.word	0x08007fb0
 80010c0:	08007fb4 	.word	0x08007fb4
 80010c4:	08007fbc 	.word	0x08007fbc
 80010c8:	08007fe0 	.word	0x08007fe0
 80010cc:	08008000 	.word	0x08008000
 80010d0:	08008010 	.word	0x08008010
 80010d4:	08008038 	.word	0x08008038
 80010d8:	0800805c 	.word	0x0800805c
 80010dc:	0800806c 	.word	0x0800806c
 80010e0:	08008090 	.word	0x08008090
 80010e4:	20000000 	.word	0x20000000
 80010e8:	080080b0 	.word	0x080080b0
 80010ec:	080080cc 	.word	0x080080cc
 80010f0:	08008104 	.word	0x08008104
 80010f4:	08008114 	.word	0x08008114
		while (esp8266_TransmitCmd((uint8_t*) "	AT+CIPSTA_CUR?", OK_ACK,
 80010f8:	2301      	movs	r3, #1
 80010fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010fe:	4982      	ldr	r1, [pc, #520]	; (8001308 <esp8266_SetUpTCPConnection+0x554>)
 8001100:	4882      	ldr	r0, [pc, #520]	; (800130c <esp8266_SetUpTCPConnection+0x558>)
 8001102:	f7ff fd0b 	bl	8000b1c <esp8266_TransmitCmd>
 8001106:	4603      	mov	r3, r0
 8001108:	2b01      	cmp	r3, #1
 800110a:	d1ac      	bne.n	8001066 <esp8266_SetUpTCPConnection+0x2b2>
			}
		}
	}

	HAL_Delay(1000);
 800110c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001110:	f000 ff78 	bl	8002004 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8001114:	2300      	movs	r3, #0
 8001116:	71fb      	strb	r3, [r7, #7]

	/* Set DHCP */
	u1_printf("(DBG:) Trying to set DHCP mode\r\n");
 8001118:	487d      	ldr	r0, [pc, #500]	; (8001310 <esp8266_SetUpTCPConnection+0x55c>)
 800111a:	f000 fe6d 	bl	8001df8 <u1_printf>
	wifi_config_step++;
 800111e:	4b7d      	ldr	r3, [pc, #500]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b7b      	ldr	r3, [pc, #492]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 8001128:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP_CUR=1,1", OK_ACK, 1000,
 800112a:	e016      	b.n	800115a <esp8266_SetUpTCPConnection+0x3a6>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	3301      	adds	r3, #1
 8001130:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8001132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001136:	f000 ff65 	bl	8002004 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b0a      	cmp	r3, #10
 800113e:	d90c      	bls.n	800115a <esp8266_SetUpTCPConnection+0x3a6>
			u1_printf("(DBG:) Set DHCP model failed\r\n");
 8001140:	4875      	ldr	r0, [pc, #468]	; (8001318 <esp8266_SetUpTCPConnection+0x564>)
 8001142:	f000 fe59 	bl	8001df8 <u1_printf>
			retry_count = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800114a:	4b72      	ldr	r3, [pc, #456]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	3b01      	subs	r3, #1
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b70      	ldr	r3, [pc, #448]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 8001154:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8001156:	2300      	movs	r3, #0
 8001158:	e0d2      	b.n	8001300 <esp8266_SetUpTCPConnection+0x54c>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP_CUR=1,1", OK_ACK, 1000,
 800115a:	2301      	movs	r3, #1
 800115c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001160:	4969      	ldr	r1, [pc, #420]	; (8001308 <esp8266_SetUpTCPConnection+0x554>)
 8001162:	486e      	ldr	r0, [pc, #440]	; (800131c <esp8266_SetUpTCPConnection+0x568>)
 8001164:	f7ff fcda 	bl	8000b1c <esp8266_TransmitCmd>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d1de      	bne.n	800112c <esp8266_SetUpTCPConnection+0x378>
		}
	}

	HAL_Delay(1000);
 800116e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001172:	f000 ff47 	bl	8002004 <HAL_Delay>
	retry_count = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	71fb      	strb	r3, [r7, #7]

	/* Set single connection */
	u1_printf("(DBG:) Trying to set single connection\r\n");
 800117a:	4869      	ldr	r0, [pc, #420]	; (8001320 <esp8266_SetUpTCPConnection+0x56c>)
 800117c:	f000 fe3c 	bl	8001df8 <u1_printf>
	wifi_config_step++;
 8001180:	4b64      	ldr	r3, [pc, #400]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b62      	ldr	r3, [pc, #392]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 800118a:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 800118c:	e016      	b.n	80011bc <esp8266_SetUpTCPConnection+0x408>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	3301      	adds	r3, #1
 8001192:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8001194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001198:	f000 ff34 	bl	8002004 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b0a      	cmp	r3, #10
 80011a0:	d90c      	bls.n	80011bc <esp8266_SetUpTCPConnection+0x408>
			u1_printf("(DBG:) Set single connection model failed\r\n");
 80011a2:	4860      	ldr	r0, [pc, #384]	; (8001324 <esp8266_SetUpTCPConnection+0x570>)
 80011a4:	f000 fe28 	bl	8001df8 <u1_printf>
			retry_count = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b57      	ldr	r3, [pc, #348]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 80011b6:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e0a1      	b.n	8001300 <esp8266_SetUpTCPConnection+0x54c>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 80011bc:	2301      	movs	r3, #1
 80011be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011c2:	4951      	ldr	r1, [pc, #324]	; (8001308 <esp8266_SetUpTCPConnection+0x554>)
 80011c4:	4858      	ldr	r0, [pc, #352]	; (8001328 <esp8266_SetUpTCPConnection+0x574>)
 80011c6:	f7ff fca9 	bl	8000b1c <esp8266_TransmitCmd>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d1de      	bne.n	800118e <esp8266_SetUpTCPConnection+0x3da>
		}
	}

	HAL_Delay(1000);
 80011d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d4:	f000 ff16 	bl	8002004 <HAL_Delay>
	retry_count = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	71fb      	strb	r3, [r7, #7]

	/* Set transparent transmission */
	u1_printf("(DBG:) Trying to set transparent transmission mode\r\n");
 80011dc:	4853      	ldr	r0, [pc, #332]	; (800132c <esp8266_SetUpTCPConnection+0x578>)
 80011de:	f000 fe0b 	bl	8001df8 <u1_printf>
	wifi_config_step++;
 80011e2:	4b4c      	ldr	r3, [pc, #304]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 80011ec:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 80011ee:	e016      	b.n	800121e <esp8266_SetUpTCPConnection+0x46a>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	3301      	adds	r3, #1
 80011f4:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80011f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011fa:	f000 ff03 	bl	8002004 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b0a      	cmp	r3, #10
 8001202:	d90c      	bls.n	800121e <esp8266_SetUpTCPConnection+0x46a>
			u1_printf("(DBG:) Set transparent transmission mode failed\r\n");
 8001204:	484a      	ldr	r0, [pc, #296]	; (8001330 <esp8266_SetUpTCPConnection+0x57c>)
 8001206:	f000 fdf7 	bl	8001df8 <u1_printf>
			retry_count = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800120e:	4b41      	ldr	r3, [pc, #260]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	3b01      	subs	r3, #1
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 8001218:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800121a:	2300      	movs	r3, #0
 800121c:	e070      	b.n	8001300 <esp8266_SetUpTCPConnection+0x54c>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 800121e:	2301      	movs	r3, #1
 8001220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001224:	4938      	ldr	r1, [pc, #224]	; (8001308 <esp8266_SetUpTCPConnection+0x554>)
 8001226:	4843      	ldr	r0, [pc, #268]	; (8001334 <esp8266_SetUpTCPConnection+0x580>)
 8001228:	f7ff fc78 	bl	8000b1c <esp8266_TransmitCmd>
 800122c:	4603      	mov	r3, r0
 800122e:	2b01      	cmp	r3, #1
 8001230:	d1de      	bne.n	80011f0 <esp8266_SetUpTCPConnection+0x43c>
		}
	}

	HAL_Delay(1000);
 8001232:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001236:	f000 fee5 	bl	8002004 <HAL_Delay>
	retry_count = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	71fb      	strb	r3, [r7, #7]

	/* Connect to TCP server */
	u1_printf("(DBG:) Trying to connect TCP server\r\n");
 800123e:	483e      	ldr	r0, [pc, #248]	; (8001338 <esp8266_SetUpTCPConnection+0x584>)
 8001240:	f000 fdda 	bl	8001df8 <u1_printf>
	wifi_config_step++;
 8001244:	4b33      	ldr	r3, [pc, #204]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b31      	ldr	r3, [pc, #196]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 800124e:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectServer() != _CONNECTED) {
 8001250:	e016      	b.n	8001280 <esp8266_SetUpTCPConnection+0x4cc>
		retry_count++;
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	3301      	adds	r3, #1
 8001256:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8001258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800125c:	f000 fed2 	bl	8002004 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b0a      	cmp	r3, #10
 8001264:	d90c      	bls.n	8001280 <esp8266_SetUpTCPConnection+0x4cc>
			u1_printf("(DBG:) Connect TCP server failed\r\n");
 8001266:	4835      	ldr	r0, [pc, #212]	; (800133c <esp8266_SetUpTCPConnection+0x588>)
 8001268:	f000 fdc6 	bl	8001df8 <u1_printf>
			retry_count = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8001270:	4b28      	ldr	r3, [pc, #160]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3b01      	subs	r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 800127a:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800127c:	2300      	movs	r3, #0
 800127e:	e03f      	b.n	8001300 <esp8266_SetUpTCPConnection+0x54c>
	while (esp8266_ConnectServer() != _CONNECTED) {
 8001280:	f7ff fd5e 	bl	8000d40 <esp8266_ConnectServer>
 8001284:	4603      	mov	r3, r0
 8001286:	2b07      	cmp	r3, #7
 8001288:	d1e3      	bne.n	8001252 <esp8266_SetUpTCPConnection+0x49e>
		}
	}

	HAL_Delay(1000);
 800128a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128e:	f000 feb9 	bl	8002004 <HAL_Delay>
	retry_count = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	71fb      	strb	r3, [r7, #7]

	/* enable data send(transparent transmission) */
	u1_printf("(DBG:) Trying to enable data send\r\n");
 8001296:	482a      	ldr	r0, [pc, #168]	; (8001340 <esp8266_SetUpTCPConnection+0x58c>)
 8001298:	f000 fdae 	bl	8001df8 <u1_printf>
	wifi_config_step++;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 80012a6:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSEND", OK_ACK, 1000,
 80012a8:	e016      	b.n	80012d8 <esp8266_SetUpTCPConnection+0x524>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	3301      	adds	r3, #1
 80012ae:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80012b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b4:	f000 fea6 	bl	8002004 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b0a      	cmp	r3, #10
 80012bc:	d90c      	bls.n	80012d8 <esp8266_SetUpTCPConnection+0x524>
			u1_printf("(DBG:) Set transparent transmission mode failed\r\n");
 80012be:	481c      	ldr	r0, [pc, #112]	; (8001330 <esp8266_SetUpTCPConnection+0x57c>)
 80012c0:	f000 fd9a 	bl	8001df8 <u1_printf>
			retry_count = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b10      	ldr	r3, [pc, #64]	; (8001314 <esp8266_SetUpTCPConnection+0x560>)
 80012d2:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 80012d4:	2300      	movs	r3, #0
 80012d6:	e013      	b.n	8001300 <esp8266_SetUpTCPConnection+0x54c>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSEND", OK_ACK, 1000,
 80012d8:	2301      	movs	r3, #1
 80012da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012de:	490a      	ldr	r1, [pc, #40]	; (8001308 <esp8266_SetUpTCPConnection+0x554>)
 80012e0:	4818      	ldr	r0, [pc, #96]	; (8001344 <esp8266_SetUpTCPConnection+0x590>)
 80012e2:	f7ff fc1b 	bl	8000b1c <esp8266_TransmitCmd>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d1de      	bne.n	80012aa <esp8266_SetUpTCPConnection+0x4f6>
		}
	}

	trans_state = _TRANS_ENBALE;
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <esp8266_SetUpTCPConnection+0x594>)
 80012ee:	2209      	movs	r2, #9
 80012f0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 80012f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012f6:	f000 fe85 	bl	8002004 <HAL_Delay>
	retry_count = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	71fb      	strb	r3, [r7, #7]

	/* send test msg */
//	u1_printf("Test msg is sending to TCP Server\r\n");
//	u2_transmit("This msg means TCP connection has been set up\r\n");
//	u1_printf("Test msg has been send to TCP Server\r\n");
	return _SUCCEED;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	08007fb0 	.word	0x08007fb0
 800130c:	08008130 	.word	0x08008130
 8001310:	08008140 	.word	0x08008140
 8001314:	20000200 	.word	0x20000200
 8001318:	08008164 	.word	0x08008164
 800131c:	08008184 	.word	0x08008184
 8001320:	08008198 	.word	0x08008198
 8001324:	080081c4 	.word	0x080081c4
 8001328:	080081f0 	.word	0x080081f0
 800132c:	080081fc 	.word	0x080081fc
 8001330:	08008234 	.word	0x08008234
 8001334:	08008268 	.word	0x08008268
 8001338:	08008278 	.word	0x08008278
 800133c:	080082a0 	.word	0x080082a0
 8001340:	080082c4 	.word	0x080082c4
 8001344:	080082e8 	.word	0x080082e8
 8001348:	20000001 	.word	0x20000001

0800134c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001360:	4b2e      	ldr	r3, [pc, #184]	; (800141c <MX_GPIO_Init+0xd0>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a2d      	ldr	r2, [pc, #180]	; (800141c <MX_GPIO_Init+0xd0>)
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <MX_GPIO_Init+0xd0>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <MX_GPIO_Init+0xd0>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a27      	ldr	r2, [pc, #156]	; (800141c <MX_GPIO_Init+0xd0>)
 800137e:	f043 0320 	orr.w	r3, r3, #32
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b25      	ldr	r3, [pc, #148]	; (800141c <MX_GPIO_Init+0xd0>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <MX_GPIO_Init+0xd0>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <MX_GPIO_Init+0xd0>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MX_GPIO_Init+0xd0>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <MX_GPIO_Init+0xd0>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <MX_GPIO_Init+0xd0>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <MX_GPIO_Init+0xd0>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c6:	4816      	ldr	r0, [pc, #88]	; (8001420 <MX_GPIO_Init+0xd4>)
 80013c8:	f001 fb70 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d2:	4814      	ldr	r0, [pc, #80]	; (8001424 <MX_GPIO_Init+0xd8>)
 80013d4:	f001 fb6a 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	4619      	mov	r1, r3
 80013f0:	480b      	ldr	r0, [pc, #44]	; (8001420 <MX_GPIO_Init+0xd4>)
 80013f2:	f001 f9d7 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 80013f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4619      	mov	r1, r3
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_GPIO_Init+0xd8>)
 8001410:	f001 f9c8 	bl	80027a4 <HAL_GPIO_Init>

}
 8001414:	bf00      	nop
 8001416:	3720      	adds	r7, #32
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	40011000 	.word	0x40011000
 8001424:	40010c00 	.word	0x40010c00

08001428 <LED_On>:
#include "led.h"

uint8_t LED_State = LED_State_Off;

void LED_On() {
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	LED_State = LED_State_On;
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <LED_On+0x1c>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_State_On);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001438:	4803      	ldr	r0, [pc, #12]	; (8001448 <LED_On+0x20>)
 800143a:	f001 fb37 	bl	8002aac <HAL_GPIO_WritePin>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000002 	.word	0x20000002
 8001448:	40011000 	.word	0x40011000

0800144c <LED_Off>:
void LED_Off() {
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	LED_State = LED_State_Off;
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <LED_Off+0x1c>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_State_Off);
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145c:	4803      	ldr	r0, [pc, #12]	; (800146c <LED_Off+0x20>)
 800145e:	f001 fb25 	bl	8002aac <HAL_GPIO_WritePin>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000002 	.word	0x20000002
 800146c:	40011000 	.word	0x40011000

08001470 <LED_Blink>:
		LED_State = LED_State_On;
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_State_On);
	}
}

void LED_Blink(uint8_t times, uint16_t interval, uint8_t finalState) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
 800147a:	460b      	mov	r3, r1
 800147c:	80bb      	strh	r3, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	71bb      	strb	r3, [r7, #6]
	while (times > 0) {
 8001482:	e00e      	b.n	80014a2 <LED_Blink+0x32>
		LED_Off();
 8001484:	f7ff ffe2 	bl	800144c <LED_Off>
		HAL_Delay(interval);
 8001488:	88bb      	ldrh	r3, [r7, #4]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fdba 	bl	8002004 <HAL_Delay>
		LED_On();
 8001490:	f7ff ffca 	bl	8001428 <LED_On>
		HAL_Delay(interval);
 8001494:	88bb      	ldrh	r3, [r7, #4]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fdb4 	bl	8002004 <HAL_Delay>
		times--;
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	3b01      	subs	r3, #1
 80014a0:	71fb      	strb	r3, [r7, #7]
	while (times > 0) {
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1ed      	bne.n	8001484 <LED_Blink+0x14>
	}

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, finalState);
 80014a8:	79bb      	ldrb	r3, [r7, #6]
 80014aa:	461a      	mov	r2, r3
 80014ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <LED_Blink+0x54>)
 80014b2:	f001 fafb 	bl	8002aac <HAL_GPIO_WritePin>
	LED_State = finalState;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <LED_Blink+0x58>)
 80014b8:	79bb      	ldrb	r3, [r7, #6]
 80014ba:	7013      	strb	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40011000 	.word	0x40011000
 80014c8:	20000002 	.word	0x20000002

080014cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014d0:	f000 fd36 	bl	8001f40 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014d4:	f000 f842 	bl	800155c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014d8:	f7ff ff38 	bl	800134c <MX_GPIO_Init>
	MX_DMA_Init();
 80014dc:	f7ff fad4 	bl	8000a88 <MX_DMA_Init>
	MX_USART1_UART_Init();
 80014e0:	f000 fb68 	bl	8001bb4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80014e4:	f000 fb90 	bl	8001c08 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80014e8:	f000 fae8 	bl	8001abc <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	u1_printf("(DBG:) System Enable!\r\n");
 80014ec:	4817      	ldr	r0, [pc, #92]	; (800154c <main+0x80>)
 80014ee:	f000 fc83 	bl	8001df8 <u1_printf>
	LED_Blink(3, 200, LED_Final_Off);
 80014f2:	2201      	movs	r2, #1
 80014f4:	21c8      	movs	r1, #200	; 0xc8
 80014f6:	2003      	movs	r0, #3
 80014f8:	f7ff ffba 	bl	8001470 <LED_Blink>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (esp8266_SetUpTCPConnection() == _SUCCEED) {
 80014fc:	f7ff fc5a 	bl	8000db4 <esp8266_SetUpTCPConnection>
 8001500:	4603      	mov	r3, r0
 8001502:	2b01      	cmp	r3, #1
 8001504:	d103      	bne.n	800150e <main+0x42>
			retry_count = 0;
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <main+0x84>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
			break;
 800150c:	e013      	b.n	8001536 <main+0x6a>
		}
		LED_Blink(3, 200, LED_Final_Off);
 800150e:	2201      	movs	r2, #1
 8001510:	21c8      	movs	r1, #200	; 0xc8
 8001512:	2003      	movs	r0, #3
 8001514:	f7ff ffac 	bl	8001470 <LED_Blink>
		retry_count++;
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <main+0x84>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	b2da      	uxtb	r2, r3
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <main+0x84>)
 8001522:	701a      	strb	r2, [r3, #0]
		if (retry_count >= 10) {
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <main+0x84>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b09      	cmp	r3, #9
 800152a:	d9e7      	bls.n	80014fc <main+0x30>
			u1_printf("(DBG:) esp8266 connect to server failed\r\n");
 800152c:	4809      	ldr	r0, [pc, #36]	; (8001554 <main+0x88>)
 800152e:	f000 fc63 	bl	8001df8 <u1_printf>
			LED_On();
 8001532:	f7ff ff79 	bl	8001428 <LED_On>
			break;
		}
	}

	if (mqtt_ConnectServer() != 1) {
 8001536:	f000 f8a3 	bl	8001680 <mqtt_ConnectServer>
 800153a:	4603      	mov	r3, r0
 800153c:	2b01      	cmp	r3, #1
 800153e:	d004      	beq.n	800154a <main+0x7e>
		u1_printf("(DBG:) Connect to mqtt server failed\r\n");
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <main+0x8c>)
 8001542:	f000 fc59 	bl	8001df8 <u1_printf>
		LED_On();
 8001546:	f7ff ff6f 	bl	8001428 <LED_On>
	}

	while (1) {
 800154a:	e7fe      	b.n	800154a <main+0x7e>
 800154c:	080082f4 	.word	0x080082f4
 8001550:	20000201 	.word	0x20000201
 8001554:	0800830c 	.word	0x0800830c
 8001558:	08008338 	.word	0x08008338

0800155c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b090      	sub	sp, #64	; 0x40
 8001560:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001562:	f107 0318 	add.w	r3, r7, #24
 8001566:	2228      	movs	r2, #40	; 0x28
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fd08 	bl	8004f80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800157e:	2301      	movs	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001586:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001590:	2302      	movs	r3, #2
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001598:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800159a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 fa99 	bl	8002adc <HAL_RCC_OscConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0x58>
		Error_Handler();
 80015b0:	f000 f819 	bl	80015e6 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80015b4:	230f      	movs	r3, #15
 80015b6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b8:	2302      	movs	r3, #2
 80015ba:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2102      	movs	r1, #2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f001 fd04 	bl	8002fdc <HAL_RCC_ClockConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x82>
		Error_Handler();
 80015da:	f000 f804 	bl	80015e6 <Error_Handler>
	}
}
 80015de:	bf00      	nop
 80015e0:	3740      	adds	r7, #64	; 0x40
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ea:	b672      	cpsid	i
}
 80015ec:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015ee:	e7fe      	b.n	80015ee <Error_Handler+0x8>

080015f0 <mqtt_transport_sendPacketBuffer>:
uint32_t mqtt_msgId = 0;

int mqtt_buflen = MQTT_PacketBuffSize;
uint8_t mqtt_PacketBuf[MQTT_PacketBuffSize];

int mqtt_transport_sendPacketBuffer(uint8_t *buf, int buflen) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]

	// MQTT Head may have 0x00
	USART2_RecvEndFlag = 0;
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <mqtt_transport_sendPacketBuffer+0x34>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
	memset(USART2_RxBUF, 0, USART2_MAX_RECVLEN);
 8001600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001604:	2100      	movs	r1, #0
 8001606:	4808      	ldr	r0, [pc, #32]	; (8001628 <mqtt_transport_sendPacketBuffer+0x38>)
 8001608:	f003 fcba 	bl	8004f80 <memset>
	HAL_UART_Transmit(&huart2, buf, buflen, 0xff);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b29a      	uxth	r2, r3
 8001610:	23ff      	movs	r3, #255	; 0xff
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <mqtt_transport_sendPacketBuffer+0x3c>)
 8001616:	f002 fa70 	bl	8003afa <HAL_UART_Transmit>

	return buflen;
 800161a:	683b      	ldr	r3, [r7, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000209 	.word	0x20000209
 8001628:	20000ea4 	.word	0x20000ea4
 800162c:	200016e8 	.word	0x200016e8

08001630 <mqtt_transport_getdata>:

int mqtt_transport_getdata(uint8_t *buf, int buflen) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]

	if (MQTT_RecvEndFlag == 1) {
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <mqtt_transport_getdata+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d111      	bne.n	8001668 <mqtt_transport_getdata+0x38>
		memcpy(buf, (const char*) USART2_RxBUF, buflen);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	490b      	ldr	r1, [pc, #44]	; (8001678 <mqtt_transport_getdata+0x48>)
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f003 fc8a 	bl	8004f64 <memcpy>

		USART2_RxLen = 0;
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <mqtt_transport_getdata+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
		USART2_RecvEndFlag = 0;
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <mqtt_transport_getdata+0x44>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
		memset(USART2_RxBUF, 0, USART2_MAX_RECVLEN);
 800165c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001660:	2100      	movs	r1, #0
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <mqtt_transport_getdata+0x48>)
 8001664:	f003 fc8c 	bl	8004f80 <memset>
	}

	return buflen;
 8001668:	683b      	ldr	r3, [r7, #0]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000209 	.word	0x20000209
 8001678:	20000ea4 	.word	0x20000ea4
 800167c:	20000208 	.word	0x20000208

08001680 <mqtt_ConnectServer>:
}
int mqtt_transport_close(int sock) {
	return 0;
}

uint8_t mqtt_ConnectServer() {
 8001680:	b580      	push	{r7, lr}
 8001682:	b098      	sub	sp, #96	; 0x60
 8001684:	af00      	add	r7, sp, #0

	uint8_t responMsg = 0xff;
 8001686:	23ff      	movs	r3, #255	; 0xff
 8001688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t sessionPresent = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t connack_rc = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	mqtt_buflen = sizeof(mqtt_PacketBuf);
 8001698:	4b3a      	ldr	r3, [pc, #232]	; (8001784 <mqtt_ConnectServer+0x104>)
 800169a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800169e:	601a      	str	r2, [r3, #0]

	MQTTPacket_connectData ConnectData = MQTTPacket_connectData_initializer;
 80016a0:	4a39      	ldr	r2, [pc, #228]	; (8001788 <mqtt_ConnectServer+0x108>)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	4611      	mov	r1, r2
 80016a6:	2258      	movs	r2, #88	; 0x58
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 fc5b 	bl	8004f64 <memcpy>
	ConnectData.clientID.cstring = MQTT_CLIENTID;
 80016ae:	4b37      	ldr	r3, [pc, #220]	; (800178c <mqtt_ConnectServer+0x10c>)
 80016b0:	613b      	str	r3, [r7, #16]
	ConnectData.username.cstring = MQTT_USERNAME;
 80016b2:	4b37      	ldr	r3, [pc, #220]	; (8001790 <mqtt_ConnectServer+0x110>)
 80016b4:	647b      	str	r3, [r7, #68]	; 0x44
	ConnectData.password.cstring = MQTT_PASSWORD;
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <mqtt_ConnectServer+0x114>)
 80016b8:	653b      	str	r3, [r7, #80]	; 0x50
	ConnectData.keepAliveInterval = MQTT_KeepAliveInterval;
 80016ba:	233c      	movs	r3, #60	; 0x3c
 80016bc:	83bb      	strh	r3, [r7, #28]
	ConnectData.MQTTVersion = 4;
 80016be:	2304      	movs	r3, #4
 80016c0:	733b      	strb	r3, [r7, #12]
	ConnectData.cleansession = 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	77bb      	strb	r3, [r7, #30]

	u1_printf("(DBG:) Trying to connect MQTT server\r\n\n");
 80016c6:	4834      	ldr	r0, [pc, #208]	; (8001798 <mqtt_ConnectServer+0x118>)
 80016c8:	f000 fb96 	bl	8001df8 <u1_printf>

	// Use connack_rc as command length here
	connack_rc = MQTTSerialize_connect(mqtt_PacketBuf, mqtt_buflen,
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <mqtt_ConnectServer+0x104>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	1d3a      	adds	r2, r7, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4831      	ldr	r0, [pc, #196]	; (800179c <mqtt_ConnectServer+0x11c>)
 80016d6:	f003 f8bb 	bl	8004850 <MQTTSerialize_connect>
 80016da:	4603      	mov	r3, r0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			&ConnectData); // build connect packet
	mqtt_transport_sendPacketBuffer(mqtt_PacketBuf, connack_rc);
 80016e2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80016e6:	4619      	mov	r1, r3
 80016e8:	482c      	ldr	r0, [pc, #176]	; (800179c <mqtt_ConnectServer+0x11c>)
 80016ea:	f7ff ff81 	bl	80015f0 <mqtt_transport_sendPacketBuffer>

	do {
		while (responMsg != CONNACK) {
 80016ee:	e009      	b.n	8001704 <mqtt_ConnectServer+0x84>
			responMsg = MQTTPacket_read(mqtt_PacketBuf, mqtt_buflen,
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <mqtt_ConnectServer+0x104>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a2a      	ldr	r2, [pc, #168]	; (80017a0 <mqtt_ConnectServer+0x120>)
 80016f6:	4619      	mov	r1, r3
 80016f8:	4828      	ldr	r0, [pc, #160]	; (800179c <mqtt_ConnectServer+0x11c>)
 80016fa:	f003 fbb0 	bl	8004e5e <MQTTPacket_read>
 80016fe:	4603      	mov	r3, r0
 8001700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		while (responMsg != CONNACK) {
 8001704:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001708:	2b02      	cmp	r3, #2
 800170a:	d1f1      	bne.n	80016f0 <mqtt_ConnectServer+0x70>
					mqtt_transport_getdata);
		}

		HAL_UART_Receive_DMA(&huart2, USART2_RxBUF, USART2_MAX_RECVLEN);
 800170c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001710:	4924      	ldr	r1, [pc, #144]	; (80017a4 <mqtt_ConnectServer+0x124>)
 8001712:	4825      	ldr	r0, [pc, #148]	; (80017a8 <mqtt_ConnectServer+0x128>)
 8001714:	f002 fa83 	bl	8003c1e <HAL_UART_Receive_DMA>

	} while (MQTTDeserialize_connack(&sessionPresent, &connack_rc,
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <mqtt_ConnectServer+0x104>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f107 015d 	add.w	r1, r7, #93	; 0x5d
 8001720:	f107 005e 	add.w	r0, r7, #94	; 0x5e
 8001724:	4a1d      	ldr	r2, [pc, #116]	; (800179c <mqtt_ConnectServer+0x11c>)
 8001726:	f003 f97f 	bl	8004a28 <MQTTDeserialize_connack>
 800172a:	4603      	mov	r3, r0
			mqtt_PacketBuf, mqtt_buflen) != 1 || connack_rc != 0);
 800172c:	2b01      	cmp	r3, #1
 800172e:	d1e9      	bne.n	8001704 <mqtt_ConnectServer+0x84>
 8001730:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1e5      	bne.n	8001704 <mqtt_ConnectServer+0x84>

	if (connack_rc != 0) {
 8001738:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <mqtt_ConnectServer+0xcc>
		u1_printf("connack_rc:%uc\r\n", connack_rc);
 8001740:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001744:	4619      	mov	r1, r3
 8001746:	4819      	ldr	r0, [pc, #100]	; (80017ac <mqtt_ConnectServer+0x12c>)
 8001748:	f000 fb56 	bl	8001df8 <u1_printf>
	}

	u1_printf("Connect Success!\r\n");
 800174c:	4818      	ldr	r0, [pc, #96]	; (80017b0 <mqtt_ConnectServer+0x130>)
 800174e:	f000 fb53 	bl	8001df8 <u1_printf>

	HAL_Delay(3000);
 8001752:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001756:	f000 fc55 	bl	8002004 <HAL_Delay>
	connack_rc = MQTTSerialize_disconnect(mqtt_PacketBuf, mqtt_buflen);
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <mqtt_ConnectServer+0x104>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4619      	mov	r1, r3
 8001760:	480e      	ldr	r0, [pc, #56]	; (800179c <mqtt_ConnectServer+0x11c>)
 8001762:	f003 f9ee 	bl	8004b42 <MQTTSerialize_disconnect>
 8001766:	4603      	mov	r3, r0
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	mqtt_transport_sendPacketBuffer(mqtt_PacketBuf, connack_rc);
 800176e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001772:	4619      	mov	r1, r3
 8001774:	4809      	ldr	r0, [pc, #36]	; (800179c <mqtt_ConnectServer+0x11c>)
 8001776:	f7ff ff3b 	bl	80015f0 <mqtt_transport_sendPacketBuffer>

	return 1;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	3760      	adds	r7, #96	; 0x60
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000004 	.word	0x20000004
 8001788:	08008454 	.word	0x08008454
 800178c:	08008360 	.word	0x08008360
 8001790:	08008398 	.word	0x08008398
 8001794:	080083c0 	.word	0x080083c0
 8001798:	08008404 	.word	0x08008404
 800179c:	20000218 	.word	0x20000218
 80017a0:	08001631 	.word	0x08001631
 80017a4:	20000ea4 	.word	0x20000ea4
 80017a8:	200016e8 	.word	0x200016e8
 80017ac:	0800842c 	.word	0x0800842c
 80017b0:	08008440 	.word	0x08008440

080017b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_MspInit+0x5c>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	4a14      	ldr	r2, [pc, #80]	; (8001810 <HAL_MspInit+0x5c>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6193      	str	r3, [r2, #24]
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_MspInit+0x5c>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_MspInit+0x5c>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_MspInit+0x5c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_MspInit+0x5c>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_MspInit+0x60>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_MspInit+0x60>)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000

08001818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800181c:	e7fe      	b.n	800181c <NMI_Handler+0x4>

0800181e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <MemManage_Handler+0x4>

0800182a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <UsageFault_Handler+0x4>

08001836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185e:	f000 fbb5 	bl	8001fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <DMA1_Channel6_IRQHandler+0x10>)
 800186e:	f000 fe65 	bl	800253c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000660 	.word	0x20000660

0800187c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <TIM2_IRQHandler+0x10>)
 8001882:	f001 fd94 	bl	80033ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000618 	.word	0x20000618

08001890 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <USART1_IRQHandler+0x10>)
 8001896:	f002 fa4d 	bl	8003d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200012a4 	.word	0x200012a4

080018a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
	uint32_t temp;
	tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <USART2_IRQHandler+0x7c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0310 	and.w	r3, r3, #16
 80018b8:	2b10      	cmp	r3, #16
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	60fb      	str	r3, [r7, #12]
	if ((tmp_flag != RESET)) {
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d022      	beq.n	8001910 <USART2_IRQHandler+0x6c>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <USART2_IRQHandler+0x7c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <USART2_IRQHandler+0x7c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
		temp = huart2.Instance->SR;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <USART2_IRQHandler+0x7c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	60bb      	str	r3, [r7, #8]
		temp = huart2.Instance->DR;
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <USART2_IRQHandler+0x7c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	60bb      	str	r3, [r7, #8]
		HAL_UART_DMAStop(&huart2);
 80018f0:	480b      	ldr	r0, [pc, #44]	; (8001920 <USART2_IRQHandler+0x7c>)
 80018f2:	f002 f9c4 	bl	8003c7e <HAL_UART_DMAStop>
		temp = hdma_usart2_rx.Instance->CNDTR;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <USART2_IRQHandler+0x80>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	60bb      	str	r3, [r7, #8]
		USART2_RxLen = USART2_MAX_RECVLEN - temp;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	425b      	negs	r3, r3
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <USART2_IRQHandler+0x84>)
 8001908:	701a      	strb	r2, [r3, #0]
		USART2_RecvEndFlag = 1;
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <USART2_IRQHandler+0x88>)
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001910:	4803      	ldr	r0, [pc, #12]	; (8001920 <USART2_IRQHandler+0x7c>)
 8001912:	f002 fa0f 	bl	8003d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200016e8 	.word	0x200016e8
 8001924:	20000660 	.word	0x20000660
 8001928:	20000208 	.word	0x20000208
 800192c:	20000209 	.word	0x20000209

08001930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
	return 1;
 8001934:	2301      	movs	r3, #1
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <_kill>:

int _kill(int pid, int sig)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001948:	f003 fada 	bl	8004f00 <__errno>
 800194c:	4603      	mov	r3, r0
 800194e:	2216      	movs	r2, #22
 8001950:	601a      	str	r2, [r3, #0]
	return -1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_exit>:

void _exit (int status)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001966:	f04f 31ff 	mov.w	r1, #4294967295
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffe7 	bl	800193e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001970:	e7fe      	b.n	8001970 <_exit+0x12>

08001972 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e00a      	b.n	800199a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001984:	f3af 8000 	nop.w
 8001988:	4601      	mov	r1, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	60ba      	str	r2, [r7, #8]
 8001990:	b2ca      	uxtb	r2, r1
 8001992:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3301      	adds	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	dbf0      	blt.n	8001984 <_read+0x12>
	}

return len;
 80019a2:	687b      	ldr	r3, [r7, #4]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e009      	b.n	80019d2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	60ba      	str	r2, [r7, #8]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3301      	adds	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	dbf1      	blt.n	80019be <_write+0x12>
	}
	return len;
 80019da:	687b      	ldr	r3, [r7, #4]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_close>:

int _close(int file)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	return -1;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <_isatty>:

int _isatty(int file)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	return 1;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
	return 0;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f003 fa44 	bl	8004f00 <__errno>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20005000 	.word	0x20005000
 8001aa4:	00000800 	.word	0x00000800
 8001aa8:	20000204 	.word	0x20000204
 8001aac:	20001740 	.word	0x20001740

08001ab0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <MX_TIM2_Init+0x98>)
 8001ada:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ade:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <MX_TIM2_Init+0x98>)
 8001ae2:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001ae6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_TIM2_Init+0x98>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <MX_TIM2_Init+0x98>)
 8001af0:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001af4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <MX_TIM2_Init+0x98>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_TIM2_Init+0x98>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b02:	4814      	ldr	r0, [pc, #80]	; (8001b54 <MX_TIM2_Init+0x98>)
 8001b04:	f001 fc04 	bl	8003310 <HAL_TIM_Base_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b0e:	f7ff fd6a 	bl	80015e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b18:	f107 0308 	add.w	r3, r7, #8
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480d      	ldr	r0, [pc, #52]	; (8001b54 <MX_TIM2_Init+0x98>)
 8001b20:	f001 fd4d 	bl	80035be <HAL_TIM_ConfigClockSource>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b2a:	f7ff fd5c 	bl	80015e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b36:	463b      	mov	r3, r7
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4806      	ldr	r0, [pc, #24]	; (8001b54 <MX_TIM2_Init+0x98>)
 8001b3c:	f001 ff20 	bl	8003980 <HAL_TIMEx_MasterConfigSynchronization>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b46:	f7ff fd4e 	bl	80015e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000618 	.word	0x20000618

08001b58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b68:	d113      	bne.n	8001b92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <HAL_TIM_Base_MspInit+0x44>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <HAL_TIM_Base_MspInit+0x44>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	61d3      	str	r3, [r2, #28]
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_TIM_Base_MspInit+0x44>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2101      	movs	r1, #1
 8001b86:	201c      	movs	r0, #28
 8001b88:	f000 fb37 	bl	80021fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b8c:	201c      	movs	r0, #28
 8001b8e:	f000 fb50 	bl	8002232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM2)
    {

    }
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
	...

08001bb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <MX_USART1_UART_Init+0x50>)
 8001bbc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bc4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_USART1_UART_Init+0x4c>)
 8001bec:	f001 ff38 	bl	8003a60 <HAL_UART_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001bf6:	f7ff fcf6 	bl	80015e6 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200012a4 	.word	0x200012a4
 8001c04:	40013800 	.word	0x40013800

08001c08 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <MX_USART2_UART_Init+0x68>)
 8001c0e:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <MX_USART2_UART_Init+0x6c>)
 8001c10:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001c12:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <MX_USART2_UART_Init+0x68>)
 8001c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c18:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <MX_USART2_UART_Init+0x68>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <MX_USART2_UART_Init+0x68>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <MX_USART2_UART_Init+0x68>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <MX_USART2_UART_Init+0x68>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <MX_USART2_UART_Init+0x68>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <MX_USART2_UART_Init+0x68>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001c3e:	480c      	ldr	r0, [pc, #48]	; (8001c70 <MX_USART2_UART_Init+0x68>)
 8001c40:	f001 ff0e 	bl	8003a60 <HAL_UART_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001c4a:	f7ff fccc 	bl	80015e6 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <MX_USART2_UART_Init+0x68>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_USART2_UART_Init+0x68>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0210 	orr.w	r2, r2, #16
 8001c5c:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(&huart2, USART2_RxBUF, USART2_MAX_RECVLEN);
 8001c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c62:	4905      	ldr	r1, [pc, #20]	; (8001c78 <MX_USART2_UART_Init+0x70>)
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <MX_USART2_UART_Init+0x68>)
 8001c66:	f001 ffda 	bl	8003c1e <HAL_UART_Receive_DMA>

	/* USER CODE END USART2_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200016e8 	.word	0x200016e8
 8001c74:	40004400 	.word	0x40004400
 8001c78:	20000ea4 	.word	0x20000ea4

08001c7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c84:	f107 0318 	add.w	r3, r7, #24
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
	if (uartHandle->Instance == USART1) {
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a52      	ldr	r2, [pc, #328]	; (8001de0 <HAL_UART_MspInit+0x164>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d13a      	bne.n	8001d12 <HAL_UART_MspInit+0x96>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* USART1 clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8001c9c:	4b51      	ldr	r3, [pc, #324]	; (8001de4 <HAL_UART_MspInit+0x168>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a50      	ldr	r2, [pc, #320]	; (8001de4 <HAL_UART_MspInit+0x168>)
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b4e      	ldr	r3, [pc, #312]	; (8001de4 <HAL_UART_MspInit+0x168>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb4:	4b4b      	ldr	r3, [pc, #300]	; (8001de4 <HAL_UART_MspInit+0x168>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	4a4a      	ldr	r2, [pc, #296]	; (8001de4 <HAL_UART_MspInit+0x168>)
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	6193      	str	r3, [r2, #24]
 8001cc0:	4b48      	ldr	r3, [pc, #288]	; (8001de4 <HAL_UART_MspInit+0x168>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	693b      	ldr	r3, [r7, #16]
		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 0318 	add.w	r3, r7, #24
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4841      	ldr	r0, [pc, #260]	; (8001de8 <HAL_UART_MspInit+0x16c>)
 8001ce2:	f000 fd5f 	bl	80027a4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cea:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f107 0318 	add.w	r3, r7, #24
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	483b      	ldr	r0, [pc, #236]	; (8001de8 <HAL_UART_MspInit+0x16c>)
 8001cfc:	f000 fd52 	bl	80027a4 <HAL_GPIO_Init>

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2103      	movs	r1, #3
 8001d04:	2025      	movs	r0, #37	; 0x25
 8001d06:	f000 fa78 	bl	80021fa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d0a:	2025      	movs	r0, #37	; 0x25
 8001d0c:	f000 fa91 	bl	8002232 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}
}
 8001d10:	e062      	b.n	8001dd8 <HAL_UART_MspInit+0x15c>
	} else if (uartHandle->Instance == USART2) {
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a35      	ldr	r2, [pc, #212]	; (8001dec <HAL_UART_MspInit+0x170>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d15d      	bne.n	8001dd8 <HAL_UART_MspInit+0x15c>
		__HAL_RCC_USART2_CLK_ENABLE();
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <HAL_UART_MspInit+0x168>)
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	4a30      	ldr	r2, [pc, #192]	; (8001de4 <HAL_UART_MspInit+0x168>)
 8001d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d26:	61d3      	str	r3, [r2, #28]
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_UART_MspInit+0x168>)
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d34:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <HAL_UART_MspInit+0x168>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <HAL_UART_MspInit+0x168>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <HAL_UART_MspInit+0x168>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 0318 	add.w	r3, r7, #24
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4822      	ldr	r0, [pc, #136]	; (8001de8 <HAL_UART_MspInit+0x16c>)
 8001d60:	f000 fd20 	bl	80027a4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d64:	2308      	movs	r3, #8
 8001d66:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	4619      	mov	r1, r3
 8001d76:	481c      	ldr	r0, [pc, #112]	; (8001de8 <HAL_UART_MspInit+0x16c>)
 8001d78:	f000 fd14 	bl	80027a4 <HAL_GPIO_Init>
		hdma_usart2_rx.Instance = DMA1_Channel6;
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <HAL_UART_MspInit+0x174>)
 8001d7e:	4a1d      	ldr	r2, [pc, #116]	; (8001df4 <HAL_UART_MspInit+0x178>)
 8001d80:	601a      	str	r2, [r3, #0]
		hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d82:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <HAL_UART_MspInit+0x174>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	605a      	str	r2, [r3, #4]
		hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_UART_MspInit+0x174>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
		hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <HAL_UART_MspInit+0x174>)
 8001d90:	2280      	movs	r2, #128	; 0x80
 8001d92:	60da      	str	r2, [r3, #12]
		hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_UART_MspInit+0x174>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
		hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_UART_MspInit+0x174>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
		hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <HAL_UART_MspInit+0x174>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
		hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_UART_MspInit+0x174>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	61da      	str	r2, [r3, #28]
		if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8001dac:	4810      	ldr	r0, [pc, #64]	; (8001df0 <HAL_UART_MspInit+0x174>)
 8001dae:	f000 fa5b 	bl	8002268 <HAL_DMA_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_UART_MspInit+0x140>
			Error_Handler();
 8001db8:	f7ff fc15 	bl	80015e6 <Error_Handler>
		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a0c      	ldr	r2, [pc, #48]	; (8001df0 <HAL_UART_MspInit+0x174>)
 8001dc0:	639a      	str	r2, [r3, #56]	; 0x38
 8001dc2:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <HAL_UART_MspInit+0x174>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6253      	str	r3, [r2, #36]	; 0x24
		HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2102      	movs	r1, #2
 8001dcc:	2026      	movs	r0, #38	; 0x26
 8001dce:	f000 fa14 	bl	80021fa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dd2:	2026      	movs	r0, #38	; 0x26
 8001dd4:	f000 fa2d 	bl	8002232 <HAL_NVIC_EnableIRQ>
}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	; 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40013800 	.word	0x40013800
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010800 	.word	0x40010800
 8001dec:	40004400 	.word	0x40004400
 8001df0:	20000660 	.word	0x20000660
 8001df4:	4002006c 	.word	0x4002006c

08001df8 <u1_printf>:
		/* USER CODE END USART2_MspDeInit 1 */
	}
}

/* USER CODE BEGIN 1 */
void u1_printf(char *fmt, ...) {
 8001df8:	b40f      	push	{r0, r1, r2, r3}
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
	uint16_t i;
	va_list ap;
	va_start(ap, fmt);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	603b      	str	r3, [r7, #0]
	vsprintf((char*) USART1_TxBUF, fmt, ap);
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	6939      	ldr	r1, [r7, #16]
 8001e0a:	480d      	ldr	r0, [pc, #52]	; (8001e40 <u1_printf+0x48>)
 8001e0c:	f003 fe66 	bl	8005adc <vsiprintf>
	va_end(ap);
	i = strlen((const char*) USART1_TxBUF);
 8001e10:	480b      	ldr	r0, [pc, #44]	; (8001e40 <u1_printf+0x48>)
 8001e12:	f7fe f99d 	bl	8000150 <strlen>
 8001e16:	4603      	mov	r3, r0
 8001e18:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(&huart1, USART1_TxBUF, i, 100);
 8001e1a:	88fa      	ldrh	r2, [r7, #6]
 8001e1c:	2364      	movs	r3, #100	; 0x64
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <u1_printf+0x48>)
 8001e20:	4808      	ldr	r0, [pc, #32]	; (8001e44 <u1_printf+0x4c>)
 8001e22:	f001 fe6a 	bl	8003afa <HAL_UART_Transmit>

	memset(USART1_TxBUF, 0, USART1_MAX_SENDLEN);
 8001e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <u1_printf+0x48>)
 8001e2e:	f003 f8a7 	bl	8004f80 <memset>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e3c:	b004      	add	sp, #16
 8001e3e:	4770      	bx	lr
 8001e40:	200006a4 	.word	0x200006a4
 8001e44:	200012a4 	.word	0x200012a4

08001e48 <u2_transmit>:

void u2_transmit(char *fmt, ...) {
 8001e48:	b40f      	push	{r0, r1, r2, r3}
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
	uint16_t i, j;
	va_list ap;
	va_start(ap, fmt);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	603b      	str	r3, [r7, #0]
	vsprintf((char*) USART2_TxBUF, fmt, ap);
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	6939      	ldr	r1, [r7, #16]
 8001e5a:	4822      	ldr	r0, [pc, #136]	; (8001ee4 <u2_transmit+0x9c>)
 8001e5c:	f003 fe3e 	bl	8005adc <vsiprintf>
	va_end(ap);

	for (i = 0; i < USART2_MAX_SENDLEN; i++) {
 8001e60:	2300      	movs	r3, #0
 8001e62:	80fb      	strh	r3, [r7, #6]
 8001e64:	e019      	b.n	8001e9a <u2_transmit+0x52>
		j = i + 1;
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	80bb      	strh	r3, [r7, #4]
		if (USART2_TxBUF[i] == '\00') {
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ee4 <u2_transmit+0x9c>)
 8001e70:	5cd3      	ldrb	r3, [r2, r3]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10e      	bne.n	8001e94 <u2_transmit+0x4c>
			for (; j < USART2_MAX_SENDLEN; j++) {
 8001e76:	e009      	b.n	8001e8c <u2_transmit+0x44>
				USART2_TxBUF[j - 1] = USART2_TxBUF[j];
 8001e78:	88ba      	ldrh	r2, [r7, #4]
 8001e7a:	88bb      	ldrh	r3, [r7, #4]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	4919      	ldr	r1, [pc, #100]	; (8001ee4 <u2_transmit+0x9c>)
 8001e80:	5c89      	ldrb	r1, [r1, r2]
 8001e82:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <u2_transmit+0x9c>)
 8001e84:	54d1      	strb	r1, [r2, r3]
			for (; j < USART2_MAX_SENDLEN; j++) {
 8001e86:	88bb      	ldrh	r3, [r7, #4]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	80bb      	strh	r3, [r7, #4]
 8001e8c:	88bb      	ldrh	r3, [r7, #4]
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e92:	d3f1      	bcc.n	8001e78 <u2_transmit+0x30>
	for (i = 0; i < USART2_MAX_SENDLEN; i++) {
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	3301      	adds	r3, #1
 8001e98:	80fb      	strh	r3, [r7, #6]
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea0:	d3e1      	bcc.n	8001e66 <u2_transmit+0x1e>
			}
		}
	}

	i = strlen((const char*) USART2_TxBUF);
 8001ea2:	4810      	ldr	r0, [pc, #64]	; (8001ee4 <u2_transmit+0x9c>)
 8001ea4:	f7fe f954 	bl	8000150 <strlen>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(&huart2, USART2_TxBUF, i, 100);
 8001eac:	88fa      	ldrh	r2, [r7, #6]
 8001eae:	2364      	movs	r3, #100	; 0x64
 8001eb0:	490c      	ldr	r1, [pc, #48]	; (8001ee4 <u2_transmit+0x9c>)
 8001eb2:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <u2_transmit+0xa0>)
 8001eb4:	f001 fe21 	bl	8003afa <HAL_UART_Transmit>

	memset(USART2_TxBUF, 0, USART2_MAX_SENDLEN);
 8001eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <u2_transmit+0x9c>)
 8001ec0:	f003 f85e 	bl	8004f80 <memset>
	memset(USART2_RxBUF, 0, USART2_MAX_RECVLEN);
 8001ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4808      	ldr	r0, [pc, #32]	; (8001eec <u2_transmit+0xa4>)
 8001ecc:	f003 f858 	bl	8004f80 <memset>
	USART2_RecvEndFlag = 0;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <u2_transmit+0xa8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ee0:	b004      	add	sp, #16
 8001ee2:	4770      	bx	lr
 8001ee4:	20000aa4 	.word	0x20000aa4
 8001ee8:	200016e8 	.word	0x200016e8
 8001eec:	20000ea4 	.word	0x20000ea4
 8001ef0:	20000209 	.word	0x20000209

08001ef4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ef6:	490d      	ldr	r1, [pc, #52]	; (8001f2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001efc:	e002      	b.n	8001f04 <LoopCopyDataInit>

08001efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f02:	3304      	adds	r3, #4

08001f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f08:	d3f9      	bcc.n	8001efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f0c:	4c0a      	ldr	r4, [pc, #40]	; (8001f38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f10:	e001      	b.n	8001f16 <LoopFillZerobss>

08001f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f14:	3204      	adds	r2, #4

08001f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f18:	d3fb      	bcc.n	8001f12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f1a:	f7ff fdc9 	bl	8001ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f1e:	f002 fff5 	bl	8004f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f22:	f7ff fad3 	bl	80014cc <main>
  bx lr
 8001f26:	4770      	bx	lr
  ldr r0, =_sdata
 8001f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f2c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001f30:	080088d4 	.word	0x080088d4
  ldr r2, =_sbss
 8001f34:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001f38:	20001740 	.word	0x20001740

08001f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f3c:	e7fe      	b.n	8001f3c <ADC1_2_IRQHandler>
	...

08001f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_Init+0x28>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_Init+0x28>)
 8001f4a:	f043 0310 	orr.w	r3, r3, #16
 8001f4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f50:	2003      	movs	r0, #3
 8001f52:	f000 f947 	bl	80021e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f000 f808 	bl	8001f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f5c:	f7ff fc2a 	bl	80017b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40022000 	.word	0x40022000

08001f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_InitTick+0x54>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_InitTick+0x58>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f95f 	bl	800224e <HAL_SYSTICK_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00e      	b.n	8001fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b0f      	cmp	r3, #15
 8001f9e:	d80a      	bhi.n	8001fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f000 f927 	bl	80021fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fac:	4a06      	ldr	r2, [pc, #24]	; (8001fc8 <HAL_InitTick+0x5c>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	20000010 	.word	0x20000010
 8001fc8:	2000000c 	.word	0x2000000c

08001fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_IncTick+0x1c>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_IncTick+0x20>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a03      	ldr	r2, [pc, #12]	; (8001fec <HAL_IncTick+0x20>)
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	20000010 	.word	0x20000010
 8001fec:	2000172c 	.word	0x2000172c

08001ff0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff4:	4b02      	ldr	r3, [pc, #8]	; (8002000 <HAL_GetTick+0x10>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	2000172c 	.word	0x2000172c

08002004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800200c:	f7ff fff0 	bl	8001ff0 <HAL_GetTick>
 8002010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	d005      	beq.n	800202a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_Delay+0x44>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800202a:	bf00      	nop
 800202c:	f7ff ffe0 	bl	8001ff0 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	429a      	cmp	r2, r3
 800203a:	d8f7      	bhi.n	800202c <HAL_Delay+0x28>
  {
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000010 	.word	0x20000010

0800204c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <__NVIC_GetPriorityGrouping+0x18>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f003 0307 	and.w	r3, r3, #7
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db0b      	blt.n	80020da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	4906      	ldr	r1, [pc, #24]	; (80020e4 <__NVIC_EnableIRQ+0x34>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2001      	movs	r0, #1
 80020d2:	fa00 f202 	lsl.w	r2, r0, r2
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100

080020e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	db0a      	blt.n	8002112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	490c      	ldr	r1, [pc, #48]	; (8002134 <__NVIC_SetPriority+0x4c>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	440b      	add	r3, r1
 800210c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002110:	e00a      	b.n	8002128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4908      	ldr	r1, [pc, #32]	; (8002138 <__NVIC_SetPriority+0x50>)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3b04      	subs	r3, #4
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	440b      	add	r3, r1
 8002126:	761a      	strb	r2, [r3, #24]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f1c3 0307 	rsb	r3, r3, #7
 8002156:	2b04      	cmp	r3, #4
 8002158:	bf28      	it	cs
 800215a:	2304      	movcs	r3, #4
 800215c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3304      	adds	r3, #4
 8002162:	2b06      	cmp	r3, #6
 8002164:	d902      	bls.n	800216c <NVIC_EncodePriority+0x30>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3b03      	subs	r3, #3
 800216a:	e000      	b.n	800216e <NVIC_EncodePriority+0x32>
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43d9      	mvns	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	4313      	orrs	r3, r2
         );
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b0:	d301      	bcc.n	80021b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00f      	b.n	80021d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <SysTick_Config+0x40>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021be:	210f      	movs	r1, #15
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	f7ff ff90 	bl	80020e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <SysTick_Config+0x40>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <SysTick_Config+0x40>)
 80021d0:	2207      	movs	r2, #7
 80021d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	e000e010 	.word	0xe000e010

080021e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff2d 	bl	800204c <__NVIC_SetPriorityGrouping>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800220c:	f7ff ff42 	bl	8002094 <__NVIC_GetPriorityGrouping>
 8002210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	6978      	ldr	r0, [r7, #20]
 8002218:	f7ff ff90 	bl	800213c <NVIC_EncodePriority>
 800221c:	4602      	mov	r2, r0
 800221e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff5f 	bl	80020e8 <__NVIC_SetPriority>
}
 800222a:	bf00      	nop
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800223c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff35 	bl	80020b0 <__NVIC_EnableIRQ>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ffa2 	bl	80021a0 <SysTick_Config>
 800225c:	4603      	mov	r3, r0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e043      	b.n	8002306 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	4b22      	ldr	r3, [pc, #136]	; (8002310 <HAL_DMA_Init+0xa8>)
 8002286:	4413      	add	r3, r2
 8002288:	4a22      	ldr	r2, [pc, #136]	; (8002314 <HAL_DMA_Init+0xac>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	009a      	lsls	r2, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a1f      	ldr	r2, [pc, #124]	; (8002318 <HAL_DMA_Init+0xb0>)
 800229a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	bffdfff8 	.word	0xbffdfff8
 8002314:	cccccccd 	.word	0xcccccccd
 8002318:	40020000 	.word	0x40020000

0800231c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_DMA_Start_IT+0x20>
 8002338:	2302      	movs	r3, #2
 800233a:	e04a      	b.n	80023d2 <HAL_DMA_Start_IT+0xb6>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800234a:	2b01      	cmp	r3, #1
 800234c:	d13a      	bne.n	80023c4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2202      	movs	r2, #2
 8002352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f9e8 	bl	8002748 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 020e 	orr.w	r2, r2, #14
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	e00f      	b.n	80023b2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0204 	bic.w	r2, r2, #4
 80023a0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 020a 	orr.w	r2, r2, #10
 80023b0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e005      	b.n	80023d0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80023cc:	2302      	movs	r3, #2
 80023ce:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80023d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023da:	b480      	push	{r7}
 80023dc:	b085      	sub	sp, #20
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d008      	beq.n	8002402 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2204      	movs	r2, #4
 80023f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e020      	b.n	8002444 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 020e 	bic.w	r2, r2, #14
 8002410:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0201 	bic.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242a:	2101      	movs	r1, #1
 800242c:	fa01 f202 	lsl.w	r2, r1, r2
 8002430:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002442:	7bfb      	ldrb	r3, [r7, #15]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr
	...

08002450 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002462:	2b02      	cmp	r3, #2
 8002464:	d005      	beq.n	8002472 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2204      	movs	r2, #4
 800246a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e051      	b.n	8002516 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 020e 	bic.w	r2, r2, #14
 8002480:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a22      	ldr	r2, [pc, #136]	; (8002520 <HAL_DMA_Abort_IT+0xd0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d029      	beq.n	80024f0 <HAL_DMA_Abort_IT+0xa0>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a20      	ldr	r2, [pc, #128]	; (8002524 <HAL_DMA_Abort_IT+0xd4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d022      	beq.n	80024ec <HAL_DMA_Abort_IT+0x9c>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1f      	ldr	r2, [pc, #124]	; (8002528 <HAL_DMA_Abort_IT+0xd8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d01a      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x96>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1d      	ldr	r2, [pc, #116]	; (800252c <HAL_DMA_Abort_IT+0xdc>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d012      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x90>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <HAL_DMA_Abort_IT+0xe0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00a      	beq.n	80024da <HAL_DMA_Abort_IT+0x8a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <HAL_DMA_Abort_IT+0xe4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d102      	bne.n	80024d4 <HAL_DMA_Abort_IT+0x84>
 80024ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024d2:	e00e      	b.n	80024f2 <HAL_DMA_Abort_IT+0xa2>
 80024d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024d8:	e00b      	b.n	80024f2 <HAL_DMA_Abort_IT+0xa2>
 80024da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024de:	e008      	b.n	80024f2 <HAL_DMA_Abort_IT+0xa2>
 80024e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e4:	e005      	b.n	80024f2 <HAL_DMA_Abort_IT+0xa2>
 80024e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ea:	e002      	b.n	80024f2 <HAL_DMA_Abort_IT+0xa2>
 80024ec:	2310      	movs	r3, #16
 80024ee:	e000      	b.n	80024f2 <HAL_DMA_Abort_IT+0xa2>
 80024f0:	2301      	movs	r3, #1
 80024f2:	4a11      	ldr	r2, [pc, #68]	; (8002538 <HAL_DMA_Abort_IT+0xe8>)
 80024f4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	4798      	blx	r3
    } 
  }
  return status;
 8002516:	7bfb      	ldrb	r3, [r7, #15]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40020008 	.word	0x40020008
 8002524:	4002001c 	.word	0x4002001c
 8002528:	40020030 	.word	0x40020030
 800252c:	40020044 	.word	0x40020044
 8002530:	40020058 	.word	0x40020058
 8002534:	4002006c 	.word	0x4002006c
 8002538:	40020000 	.word	0x40020000

0800253c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	2204      	movs	r2, #4
 800255a:	409a      	lsls	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d04f      	beq.n	8002604 <HAL_DMA_IRQHandler+0xc8>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d04a      	beq.n	8002604 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0204 	bic.w	r2, r2, #4
 800258a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a66      	ldr	r2, [pc, #408]	; (800272c <HAL_DMA_IRQHandler+0x1f0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d029      	beq.n	80025ea <HAL_DMA_IRQHandler+0xae>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a65      	ldr	r2, [pc, #404]	; (8002730 <HAL_DMA_IRQHandler+0x1f4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d022      	beq.n	80025e6 <HAL_DMA_IRQHandler+0xaa>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a63      	ldr	r2, [pc, #396]	; (8002734 <HAL_DMA_IRQHandler+0x1f8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d01a      	beq.n	80025e0 <HAL_DMA_IRQHandler+0xa4>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a62      	ldr	r2, [pc, #392]	; (8002738 <HAL_DMA_IRQHandler+0x1fc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d012      	beq.n	80025da <HAL_DMA_IRQHandler+0x9e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a60      	ldr	r2, [pc, #384]	; (800273c <HAL_DMA_IRQHandler+0x200>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00a      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x98>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a5f      	ldr	r2, [pc, #380]	; (8002740 <HAL_DMA_IRQHandler+0x204>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d102      	bne.n	80025ce <HAL_DMA_IRQHandler+0x92>
 80025c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025cc:	e00e      	b.n	80025ec <HAL_DMA_IRQHandler+0xb0>
 80025ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025d2:	e00b      	b.n	80025ec <HAL_DMA_IRQHandler+0xb0>
 80025d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025d8:	e008      	b.n	80025ec <HAL_DMA_IRQHandler+0xb0>
 80025da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025de:	e005      	b.n	80025ec <HAL_DMA_IRQHandler+0xb0>
 80025e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025e4:	e002      	b.n	80025ec <HAL_DMA_IRQHandler+0xb0>
 80025e6:	2340      	movs	r3, #64	; 0x40
 80025e8:	e000      	b.n	80025ec <HAL_DMA_IRQHandler+0xb0>
 80025ea:	2304      	movs	r3, #4
 80025ec:	4a55      	ldr	r2, [pc, #340]	; (8002744 <HAL_DMA_IRQHandler+0x208>)
 80025ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8094 	beq.w	8002722 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002602:	e08e      	b.n	8002722 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	2202      	movs	r2, #2
 800260a:	409a      	lsls	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d056      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x186>
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d051      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10b      	bne.n	8002644 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 020a 	bic.w	r2, r2, #10
 800263a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a38      	ldr	r2, [pc, #224]	; (800272c <HAL_DMA_IRQHandler+0x1f0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d029      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x166>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a37      	ldr	r2, [pc, #220]	; (8002730 <HAL_DMA_IRQHandler+0x1f4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d022      	beq.n	800269e <HAL_DMA_IRQHandler+0x162>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a35      	ldr	r2, [pc, #212]	; (8002734 <HAL_DMA_IRQHandler+0x1f8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01a      	beq.n	8002698 <HAL_DMA_IRQHandler+0x15c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a34      	ldr	r2, [pc, #208]	; (8002738 <HAL_DMA_IRQHandler+0x1fc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d012      	beq.n	8002692 <HAL_DMA_IRQHandler+0x156>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a32      	ldr	r2, [pc, #200]	; (800273c <HAL_DMA_IRQHandler+0x200>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00a      	beq.n	800268c <HAL_DMA_IRQHandler+0x150>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a31      	ldr	r2, [pc, #196]	; (8002740 <HAL_DMA_IRQHandler+0x204>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d102      	bne.n	8002686 <HAL_DMA_IRQHandler+0x14a>
 8002680:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002684:	e00e      	b.n	80026a4 <HAL_DMA_IRQHandler+0x168>
 8002686:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800268a:	e00b      	b.n	80026a4 <HAL_DMA_IRQHandler+0x168>
 800268c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002690:	e008      	b.n	80026a4 <HAL_DMA_IRQHandler+0x168>
 8002692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002696:	e005      	b.n	80026a4 <HAL_DMA_IRQHandler+0x168>
 8002698:	f44f 7300 	mov.w	r3, #512	; 0x200
 800269c:	e002      	b.n	80026a4 <HAL_DMA_IRQHandler+0x168>
 800269e:	2320      	movs	r3, #32
 80026a0:	e000      	b.n	80026a4 <HAL_DMA_IRQHandler+0x168>
 80026a2:	2302      	movs	r3, #2
 80026a4:	4a27      	ldr	r2, [pc, #156]	; (8002744 <HAL_DMA_IRQHandler+0x208>)
 80026a6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d034      	beq.n	8002722 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026c0:	e02f      	b.n	8002722 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2208      	movs	r2, #8
 80026c8:	409a      	lsls	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d028      	beq.n	8002724 <HAL_DMA_IRQHandler+0x1e8>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d023      	beq.n	8002724 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 020e 	bic.w	r2, r2, #14
 80026ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f4:	2101      	movs	r1, #1
 80026f6:	fa01 f202 	lsl.w	r2, r1, r2
 80026fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	4798      	blx	r3
    }
  }
  return;
 8002722:	bf00      	nop
 8002724:	bf00      	nop
}
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40020008 	.word	0x40020008
 8002730:	4002001c 	.word	0x4002001c
 8002734:	40020030 	.word	0x40020030
 8002738:	40020044 	.word	0x40020044
 800273c:	40020058 	.word	0x40020058
 8002740:	4002006c 	.word	0x4002006c
 8002744:	40020000 	.word	0x40020000

08002748 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	2101      	movs	r1, #1
 8002760:	fa01 f202 	lsl.w	r2, r1, r2
 8002764:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b10      	cmp	r3, #16
 8002774:	d108      	bne.n	8002788 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002786:	e007      	b.n	8002798 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	60da      	str	r2, [r3, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
	...

080027a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b08b      	sub	sp, #44	; 0x2c
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027b2:	2300      	movs	r3, #0
 80027b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b6:	e169      	b.n	8002a8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027b8:	2201      	movs	r2, #1
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	f040 8158 	bne.w	8002a86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4a9a      	ldr	r2, [pc, #616]	; (8002a44 <HAL_GPIO_Init+0x2a0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d05e      	beq.n	800289e <HAL_GPIO_Init+0xfa>
 80027e0:	4a98      	ldr	r2, [pc, #608]	; (8002a44 <HAL_GPIO_Init+0x2a0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d875      	bhi.n	80028d2 <HAL_GPIO_Init+0x12e>
 80027e6:	4a98      	ldr	r2, [pc, #608]	; (8002a48 <HAL_GPIO_Init+0x2a4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d058      	beq.n	800289e <HAL_GPIO_Init+0xfa>
 80027ec:	4a96      	ldr	r2, [pc, #600]	; (8002a48 <HAL_GPIO_Init+0x2a4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d86f      	bhi.n	80028d2 <HAL_GPIO_Init+0x12e>
 80027f2:	4a96      	ldr	r2, [pc, #600]	; (8002a4c <HAL_GPIO_Init+0x2a8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d052      	beq.n	800289e <HAL_GPIO_Init+0xfa>
 80027f8:	4a94      	ldr	r2, [pc, #592]	; (8002a4c <HAL_GPIO_Init+0x2a8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d869      	bhi.n	80028d2 <HAL_GPIO_Init+0x12e>
 80027fe:	4a94      	ldr	r2, [pc, #592]	; (8002a50 <HAL_GPIO_Init+0x2ac>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d04c      	beq.n	800289e <HAL_GPIO_Init+0xfa>
 8002804:	4a92      	ldr	r2, [pc, #584]	; (8002a50 <HAL_GPIO_Init+0x2ac>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d863      	bhi.n	80028d2 <HAL_GPIO_Init+0x12e>
 800280a:	4a92      	ldr	r2, [pc, #584]	; (8002a54 <HAL_GPIO_Init+0x2b0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d046      	beq.n	800289e <HAL_GPIO_Init+0xfa>
 8002810:	4a90      	ldr	r2, [pc, #576]	; (8002a54 <HAL_GPIO_Init+0x2b0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d85d      	bhi.n	80028d2 <HAL_GPIO_Init+0x12e>
 8002816:	2b12      	cmp	r3, #18
 8002818:	d82a      	bhi.n	8002870 <HAL_GPIO_Init+0xcc>
 800281a:	2b12      	cmp	r3, #18
 800281c:	d859      	bhi.n	80028d2 <HAL_GPIO_Init+0x12e>
 800281e:	a201      	add	r2, pc, #4	; (adr r2, 8002824 <HAL_GPIO_Init+0x80>)
 8002820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002824:	0800289f 	.word	0x0800289f
 8002828:	08002879 	.word	0x08002879
 800282c:	0800288b 	.word	0x0800288b
 8002830:	080028cd 	.word	0x080028cd
 8002834:	080028d3 	.word	0x080028d3
 8002838:	080028d3 	.word	0x080028d3
 800283c:	080028d3 	.word	0x080028d3
 8002840:	080028d3 	.word	0x080028d3
 8002844:	080028d3 	.word	0x080028d3
 8002848:	080028d3 	.word	0x080028d3
 800284c:	080028d3 	.word	0x080028d3
 8002850:	080028d3 	.word	0x080028d3
 8002854:	080028d3 	.word	0x080028d3
 8002858:	080028d3 	.word	0x080028d3
 800285c:	080028d3 	.word	0x080028d3
 8002860:	080028d3 	.word	0x080028d3
 8002864:	080028d3 	.word	0x080028d3
 8002868:	08002881 	.word	0x08002881
 800286c:	08002895 	.word	0x08002895
 8002870:	4a79      	ldr	r2, [pc, #484]	; (8002a58 <HAL_GPIO_Init+0x2b4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002876:	e02c      	b.n	80028d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	623b      	str	r3, [r7, #32]
          break;
 800287e:	e029      	b.n	80028d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	3304      	adds	r3, #4
 8002886:	623b      	str	r3, [r7, #32]
          break;
 8002888:	e024      	b.n	80028d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	3308      	adds	r3, #8
 8002890:	623b      	str	r3, [r7, #32]
          break;
 8002892:	e01f      	b.n	80028d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	330c      	adds	r3, #12
 800289a:	623b      	str	r3, [r7, #32]
          break;
 800289c:	e01a      	b.n	80028d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d102      	bne.n	80028ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028a6:	2304      	movs	r3, #4
 80028a8:	623b      	str	r3, [r7, #32]
          break;
 80028aa:	e013      	b.n	80028d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028b4:	2308      	movs	r3, #8
 80028b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	611a      	str	r2, [r3, #16]
          break;
 80028be:	e009      	b.n	80028d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028c0:	2308      	movs	r3, #8
 80028c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	615a      	str	r2, [r3, #20]
          break;
 80028ca:	e003      	b.n	80028d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
          break;
 80028d0:	e000      	b.n	80028d4 <HAL_GPIO_Init+0x130>
          break;
 80028d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2bff      	cmp	r3, #255	; 0xff
 80028d8:	d801      	bhi.n	80028de <HAL_GPIO_Init+0x13a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	e001      	b.n	80028e2 <HAL_GPIO_Init+0x13e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3304      	adds	r3, #4
 80028e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2bff      	cmp	r3, #255	; 0xff
 80028e8:	d802      	bhi.n	80028f0 <HAL_GPIO_Init+0x14c>
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	e002      	b.n	80028f6 <HAL_GPIO_Init+0x152>
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	3b08      	subs	r3, #8
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	210f      	movs	r1, #15
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	401a      	ands	r2, r3
 8002908:	6a39      	ldr	r1, [r7, #32]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	fa01 f303 	lsl.w	r3, r1, r3
 8002910:	431a      	orrs	r2, r3
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 80b1 	beq.w	8002a86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002924:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <HAL_GPIO_Init+0x2b8>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	4a4c      	ldr	r2, [pc, #304]	; (8002a5c <HAL_GPIO_Init+0x2b8>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6193      	str	r3, [r2, #24]
 8002930:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <HAL_GPIO_Init+0x2b8>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800293c:	4a48      	ldr	r2, [pc, #288]	; (8002a60 <HAL_GPIO_Init+0x2bc>)
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	089b      	lsrs	r3, r3, #2
 8002942:	3302      	adds	r3, #2
 8002944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002948:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	220f      	movs	r2, #15
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4013      	ands	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a40      	ldr	r2, [pc, #256]	; (8002a64 <HAL_GPIO_Init+0x2c0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d013      	beq.n	8002990 <HAL_GPIO_Init+0x1ec>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a3f      	ldr	r2, [pc, #252]	; (8002a68 <HAL_GPIO_Init+0x2c4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d00d      	beq.n	800298c <HAL_GPIO_Init+0x1e8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a3e      	ldr	r2, [pc, #248]	; (8002a6c <HAL_GPIO_Init+0x2c8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d007      	beq.n	8002988 <HAL_GPIO_Init+0x1e4>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a3d      	ldr	r2, [pc, #244]	; (8002a70 <HAL_GPIO_Init+0x2cc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_GPIO_Init+0x1e0>
 8002980:	2303      	movs	r3, #3
 8002982:	e006      	b.n	8002992 <HAL_GPIO_Init+0x1ee>
 8002984:	2304      	movs	r3, #4
 8002986:	e004      	b.n	8002992 <HAL_GPIO_Init+0x1ee>
 8002988:	2302      	movs	r3, #2
 800298a:	e002      	b.n	8002992 <HAL_GPIO_Init+0x1ee>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_GPIO_Init+0x1ee>
 8002990:	2300      	movs	r3, #0
 8002992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002994:	f002 0203 	and.w	r2, r2, #3
 8002998:	0092      	lsls	r2, r2, #2
 800299a:	4093      	lsls	r3, r2
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029a2:	492f      	ldr	r1, [pc, #188]	; (8002a60 <HAL_GPIO_Init+0x2bc>)
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	3302      	adds	r3, #2
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d006      	beq.n	80029ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029bc:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <HAL_GPIO_Init+0x2d0>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	492c      	ldr	r1, [pc, #176]	; (8002a74 <HAL_GPIO_Init+0x2d0>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	600b      	str	r3, [r1, #0]
 80029c8:	e006      	b.n	80029d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029ca:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <HAL_GPIO_Init+0x2d0>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	4928      	ldr	r1, [pc, #160]	; (8002a74 <HAL_GPIO_Init+0x2d0>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d006      	beq.n	80029f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029e4:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <HAL_GPIO_Init+0x2d0>)
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	4922      	ldr	r1, [pc, #136]	; (8002a74 <HAL_GPIO_Init+0x2d0>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
 80029f0:	e006      	b.n	8002a00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029f2:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <HAL_GPIO_Init+0x2d0>)
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	491e      	ldr	r1, [pc, #120]	; (8002a74 <HAL_GPIO_Init+0x2d0>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d006      	beq.n	8002a1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a0c:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <HAL_GPIO_Init+0x2d0>)
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	4918      	ldr	r1, [pc, #96]	; (8002a74 <HAL_GPIO_Init+0x2d0>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	608b      	str	r3, [r1, #8]
 8002a18:	e006      	b.n	8002a28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a1a:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <HAL_GPIO_Init+0x2d0>)
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	4914      	ldr	r1, [pc, #80]	; (8002a74 <HAL_GPIO_Init+0x2d0>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d021      	beq.n	8002a78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a34:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <HAL_GPIO_Init+0x2d0>)
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	490e      	ldr	r1, [pc, #56]	; (8002a74 <HAL_GPIO_Init+0x2d0>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60cb      	str	r3, [r1, #12]
 8002a40:	e021      	b.n	8002a86 <HAL_GPIO_Init+0x2e2>
 8002a42:	bf00      	nop
 8002a44:	10320000 	.word	0x10320000
 8002a48:	10310000 	.word	0x10310000
 8002a4c:	10220000 	.word	0x10220000
 8002a50:	10210000 	.word	0x10210000
 8002a54:	10120000 	.word	0x10120000
 8002a58:	10110000 	.word	0x10110000
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40010000 	.word	0x40010000
 8002a64:	40010800 	.word	0x40010800
 8002a68:	40010c00 	.word	0x40010c00
 8002a6c:	40011000 	.word	0x40011000
 8002a70:	40011400 	.word	0x40011400
 8002a74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_GPIO_Init+0x304>)
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	4909      	ldr	r1, [pc, #36]	; (8002aa8 <HAL_GPIO_Init+0x304>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	3301      	adds	r3, #1
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	fa22 f303 	lsr.w	r3, r2, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f47f ae8e 	bne.w	80027b8 <HAL_GPIO_Init+0x14>
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	372c      	adds	r7, #44	; 0x2c
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	40010400 	.word	0x40010400

08002aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	807b      	strh	r3, [r7, #2]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002abc:	787b      	ldrb	r3, [r7, #1]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ac8:	e003      	b.n	8002ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aca:	887b      	ldrh	r3, [r7, #2]
 8002acc:	041a      	lsls	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	611a      	str	r2, [r3, #16]
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e26c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8087 	beq.w	8002c0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002afc:	4b92      	ldr	r3, [pc, #584]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d00c      	beq.n	8002b22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b08:	4b8f      	ldr	r3, [pc, #572]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d112      	bne.n	8002b3a <HAL_RCC_OscConfig+0x5e>
 8002b14:	4b8c      	ldr	r3, [pc, #560]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b20:	d10b      	bne.n	8002b3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b22:	4b89      	ldr	r3, [pc, #548]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d06c      	beq.n	8002c08 <HAL_RCC_OscConfig+0x12c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d168      	bne.n	8002c08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e246      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x76>
 8002b44:	4b80      	ldr	r3, [pc, #512]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a7f      	ldr	r2, [pc, #508]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	e02e      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd4>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x98>
 8002b5a:	4b7b      	ldr	r3, [pc, #492]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a7a      	ldr	r2, [pc, #488]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b78      	ldr	r3, [pc, #480]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a77      	ldr	r2, [pc, #476]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e01d      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd4>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0xbc>
 8002b7e:	4b72      	ldr	r3, [pc, #456]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a71      	ldr	r2, [pc, #452]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b6f      	ldr	r3, [pc, #444]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a6e      	ldr	r2, [pc, #440]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd4>
 8002b98:	4b6b      	ldr	r3, [pc, #428]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a6a      	ldr	r2, [pc, #424]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b68      	ldr	r3, [pc, #416]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a67      	ldr	r2, [pc, #412]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d013      	beq.n	8002be0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7ff fa1a 	bl	8001ff0 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7ff fa16 	bl	8001ff0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1fa      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	4b5d      	ldr	r3, [pc, #372]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0xe4>
 8002bde:	e014      	b.n	8002c0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7ff fa06 	bl	8001ff0 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7ff fa02 	bl	8001ff0 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e1e6      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfa:	4b53      	ldr	r3, [pc, #332]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x10c>
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d063      	beq.n	8002cde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c16:	4b4c      	ldr	r3, [pc, #304]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00b      	beq.n	8002c3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c22:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d11c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x18c>
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d116      	bne.n	8002c68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	4b43      	ldr	r3, [pc, #268]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_RCC_OscConfig+0x176>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e1ba      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c52:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4939      	ldr	r1, [pc, #228]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c66:	e03a      	b.n	8002cde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d020      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c70:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <HAL_RCC_OscConfig+0x270>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7ff f9bb 	bl	8001ff0 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c7e:	f7ff f9b7 	bl	8001ff0 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e19b      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c90:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4927      	ldr	r1, [pc, #156]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	600b      	str	r3, [r1, #0]
 8002cb0:	e015      	b.n	8002cde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <HAL_RCC_OscConfig+0x270>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7ff f99a 	bl	8001ff0 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc0:	f7ff f996 	bl	8001ff0 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e17a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd2:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d03a      	beq.n	8002d60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d019      	beq.n	8002d26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf2:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf8:	f7ff f97a 	bl	8001ff0 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d00:	f7ff f976 	bl	8001ff0 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e15a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d1e:	2001      	movs	r0, #1
 8002d20:	f000 fad8 	bl	80032d4 <RCC_Delay>
 8002d24:	e01c      	b.n	8002d60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <HAL_RCC_OscConfig+0x274>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2c:	f7ff f960 	bl	8001ff0 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d32:	e00f      	b.n	8002d54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d34:	f7ff f95c 	bl	8001ff0 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d908      	bls.n	8002d54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e140      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	42420000 	.word	0x42420000
 8002d50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d54:	4b9e      	ldr	r3, [pc, #632]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1e9      	bne.n	8002d34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80a6 	beq.w	8002eba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d72:	4b97      	ldr	r3, [pc, #604]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10d      	bne.n	8002d9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	4b94      	ldr	r3, [pc, #592]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	4a93      	ldr	r2, [pc, #588]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d88:	61d3      	str	r3, [r2, #28]
 8002d8a:	4b91      	ldr	r3, [pc, #580]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d96:	2301      	movs	r3, #1
 8002d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9a:	4b8e      	ldr	r3, [pc, #568]	; (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d118      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da6:	4b8b      	ldr	r3, [pc, #556]	; (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a8a      	ldr	r2, [pc, #552]	; (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db2:	f7ff f91d 	bl	8001ff0 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dba:	f7ff f919 	bl	8001ff0 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b64      	cmp	r3, #100	; 0x64
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0fd      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dcc:	4b81      	ldr	r3, [pc, #516]	; (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d106      	bne.n	8002dee <HAL_RCC_OscConfig+0x312>
 8002de0:	4b7b      	ldr	r3, [pc, #492]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	4a7a      	ldr	r2, [pc, #488]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6213      	str	r3, [r2, #32]
 8002dec:	e02d      	b.n	8002e4a <HAL_RCC_OscConfig+0x36e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x334>
 8002df6:	4b76      	ldr	r3, [pc, #472]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	4a75      	ldr	r2, [pc, #468]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6213      	str	r3, [r2, #32]
 8002e02:	4b73      	ldr	r3, [pc, #460]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4a72      	ldr	r2, [pc, #456]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	6213      	str	r3, [r2, #32]
 8002e0e:	e01c      	b.n	8002e4a <HAL_RCC_OscConfig+0x36e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b05      	cmp	r3, #5
 8002e16:	d10c      	bne.n	8002e32 <HAL_RCC_OscConfig+0x356>
 8002e18:	4b6d      	ldr	r3, [pc, #436]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4a6c      	ldr	r2, [pc, #432]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	6213      	str	r3, [r2, #32]
 8002e24:	4b6a      	ldr	r3, [pc, #424]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4a69      	ldr	r2, [pc, #420]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6213      	str	r3, [r2, #32]
 8002e30:	e00b      	b.n	8002e4a <HAL_RCC_OscConfig+0x36e>
 8002e32:	4b67      	ldr	r3, [pc, #412]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4a66      	ldr	r2, [pc, #408]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6213      	str	r3, [r2, #32]
 8002e3e:	4b64      	ldr	r3, [pc, #400]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	4a63      	ldr	r2, [pc, #396]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002e44:	f023 0304 	bic.w	r3, r3, #4
 8002e48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d015      	beq.n	8002e7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e52:	f7ff f8cd 	bl	8001ff0 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e58:	e00a      	b.n	8002e70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7ff f8c9 	bl	8001ff0 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e0ab      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e70:	4b57      	ldr	r3, [pc, #348]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ee      	beq.n	8002e5a <HAL_RCC_OscConfig+0x37e>
 8002e7c:	e014      	b.n	8002ea8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7e:	f7ff f8b7 	bl	8001ff0 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e84:	e00a      	b.n	8002e9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e86:	f7ff f8b3 	bl	8001ff0 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e095      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9c:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1ee      	bne.n	8002e86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d105      	bne.n	8002eba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4b48      	ldr	r3, [pc, #288]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4a47      	ldr	r2, [pc, #284]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8081 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ec4:	4b42      	ldr	r3, [pc, #264]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d061      	beq.n	8002f94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d146      	bne.n	8002f66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed8:	4b3f      	ldr	r3, [pc, #252]	; (8002fd8 <HAL_RCC_OscConfig+0x4fc>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7ff f887 	bl	8001ff0 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee6:	f7ff f883 	bl	8001ff0 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e067      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef8:	4b35      	ldr	r3, [pc, #212]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f0      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0c:	d108      	bne.n	8002f20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f0e:	4b30      	ldr	r3, [pc, #192]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	492d      	ldr	r1, [pc, #180]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f20:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a19      	ldr	r1, [r3, #32]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	430b      	orrs	r3, r1
 8002f32:	4927      	ldr	r1, [pc, #156]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f38:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <HAL_RCC_OscConfig+0x4fc>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3e:	f7ff f857 	bl	8001ff0 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f46:	f7ff f853 	bl	8001ff0 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e037      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x46a>
 8002f64:	e02f      	b.n	8002fc6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f66:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <HAL_RCC_OscConfig+0x4fc>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7ff f840 	bl	8001ff0 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f74:	f7ff f83c 	bl	8001ff0 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e020      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x498>
 8002f92:	e018      	b.n	8002fc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e013      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d001      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40007000 	.word	0x40007000
 8002fd8:	42420060 	.word	0x42420060

08002fdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0d0      	b.n	8003192 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b6a      	ldr	r3, [pc, #424]	; (800319c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d910      	bls.n	8003020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b67      	ldr	r3, [pc, #412]	; (800319c <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 0207 	bic.w	r2, r3, #7
 8003006:	4965      	ldr	r1, [pc, #404]	; (800319c <HAL_RCC_ClockConfig+0x1c0>)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b63      	ldr	r3, [pc, #396]	; (800319c <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0b8      	b.n	8003192 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d020      	beq.n	800306e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003038:	4b59      	ldr	r3, [pc, #356]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4a58      	ldr	r2, [pc, #352]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003042:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003050:	4b53      	ldr	r3, [pc, #332]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4a52      	ldr	r2, [pc, #328]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800305a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800305c:	4b50      	ldr	r3, [pc, #320]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	494d      	ldr	r1, [pc, #308]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d040      	beq.n	80030fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	4b47      	ldr	r3, [pc, #284]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d115      	bne.n	80030ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e07f      	b.n	8003192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d107      	bne.n	80030aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309a:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e073      	b.n	8003192 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030aa:	4b3d      	ldr	r3, [pc, #244]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e06b      	b.n	8003192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ba:	4b39      	ldr	r3, [pc, #228]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f023 0203 	bic.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4936      	ldr	r1, [pc, #216]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030cc:	f7fe ff90 	bl	8001ff0 <HAL_GetTick>
 80030d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	e00a      	b.n	80030ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d4:	f7fe ff8c 	bl	8001ff0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e053      	b.n	8003192 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ea:	4b2d      	ldr	r3, [pc, #180]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 020c 	and.w	r2, r3, #12
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d1eb      	bne.n	80030d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030fc:	4b27      	ldr	r3, [pc, #156]	; (800319c <HAL_RCC_ClockConfig+0x1c0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d210      	bcs.n	800312c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b24      	ldr	r3, [pc, #144]	; (800319c <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 0207 	bic.w	r2, r3, #7
 8003112:	4922      	ldr	r1, [pc, #136]	; (800319c <HAL_RCC_ClockConfig+0x1c0>)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e032      	b.n	8003192 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003138:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4916      	ldr	r1, [pc, #88]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003156:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	490e      	ldr	r1, [pc, #56]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	4313      	orrs	r3, r2
 8003168:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800316a:	f000 f821 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 800316e:	4602      	mov	r2, r0
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	490a      	ldr	r1, [pc, #40]	; (80031a4 <HAL_RCC_ClockConfig+0x1c8>)
 800317c:	5ccb      	ldrb	r3, [r1, r3]
 800317e:	fa22 f303 	lsr.w	r3, r2, r3
 8003182:	4a09      	ldr	r2, [pc, #36]	; (80031a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_RCC_ClockConfig+0x1d0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe feee 	bl	8001f6c <HAL_InitTick>

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40022000 	.word	0x40022000
 80031a0:	40021000 	.word	0x40021000
 80031a4:	080084cc 	.word	0x080084cc
 80031a8:	20000008 	.word	0x20000008
 80031ac:	2000000c 	.word	0x2000000c

080031b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b0:	b490      	push	{r4, r7}
 80031b2:	b08a      	sub	sp, #40	; 0x28
 80031b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031b6:	4b2a      	ldr	r3, [pc, #168]	; (8003260 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031b8:	1d3c      	adds	r4, r7, #4
 80031ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031c0:	f240 2301 	movw	r3, #513	; 0x201
 80031c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	2300      	movs	r3, #0
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031da:	4b22      	ldr	r3, [pc, #136]	; (8003264 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d002      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x40>
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d003      	beq.n	80031f6 <HAL_RCC_GetSysClockFreq+0x46>
 80031ee:	e02d      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031f2:	623b      	str	r3, [r7, #32]
      break;
 80031f4:	e02d      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	0c9b      	lsrs	r3, r3, #18
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003202:	4413      	add	r3, r2
 8003204:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003208:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003214:	4b13      	ldr	r3, [pc, #76]	; (8003264 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	0c5b      	lsrs	r3, r3, #17
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003222:	4413      	add	r3, r2
 8003224:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003228:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <HAL_RCC_GetSysClockFreq+0xb8>)
 800322e:	fb02 f203 	mul.w	r2, r2, r3
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
 800323a:	e004      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	4a0b      	ldr	r2, [pc, #44]	; (800326c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003240:	fb02 f303 	mul.w	r3, r2, r3
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	623b      	str	r3, [r7, #32]
      break;
 800324a:	e002      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_RCC_GetSysClockFreq+0xb8>)
 800324e:	623b      	str	r3, [r7, #32]
      break;
 8003250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003252:	6a3b      	ldr	r3, [r7, #32]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3728      	adds	r7, #40	; 0x28
 8003258:	46bd      	mov	sp, r7
 800325a:	bc90      	pop	{r4, r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	080084ac 	.word	0x080084ac
 8003264:	40021000 	.word	0x40021000
 8003268:	007a1200 	.word	0x007a1200
 800326c:	003d0900 	.word	0x003d0900

08003270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003274:	4b02      	ldr	r3, [pc, #8]	; (8003280 <HAL_RCC_GetHCLKFreq+0x10>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	20000008 	.word	0x20000008

08003284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003288:	f7ff fff2 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 800328c:	4602      	mov	r2, r0
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	0a1b      	lsrs	r3, r3, #8
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	4903      	ldr	r1, [pc, #12]	; (80032a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800329a:	5ccb      	ldrb	r3, [r1, r3]
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40021000 	.word	0x40021000
 80032a8:	080084dc 	.word	0x080084dc

080032ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032b0:	f7ff ffde 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	0adb      	lsrs	r3, r3, #11
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4903      	ldr	r1, [pc, #12]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40021000 	.word	0x40021000
 80032d0:	080084dc 	.word	0x080084dc

080032d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <RCC_Delay+0x34>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a0a      	ldr	r2, [pc, #40]	; (800330c <RCC_Delay+0x38>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	0a5b      	lsrs	r3, r3, #9
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	fb02 f303 	mul.w	r3, r2, r3
 80032ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032f0:	bf00      	nop
  }
  while (Delay --);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1e5a      	subs	r2, r3, #1
 80032f6:	60fa      	str	r2, [r7, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f9      	bne.n	80032f0 <RCC_Delay+0x1c>
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	20000008 	.word	0x20000008
 800330c:	10624dd3 	.word	0x10624dd3

08003310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e041      	b.n	80033a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe fc0e 	bl	8001b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f000 fa1e 	bl	8003790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d122      	bne.n	800340a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d11b      	bne.n	800340a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f06f 0202 	mvn.w	r2, #2
 80033da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f9b1 	bl	8003758 <HAL_TIM_IC_CaptureCallback>
 80033f6:	e005      	b.n	8003404 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f9a4 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f9b3 	bl	800376a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b04      	cmp	r3, #4
 8003416:	d122      	bne.n	800345e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b04      	cmp	r3, #4
 8003424:	d11b      	bne.n	800345e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f06f 0204 	mvn.w	r2, #4
 800342e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f987 	bl	8003758 <HAL_TIM_IC_CaptureCallback>
 800344a:	e005      	b.n	8003458 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f97a 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f989 	bl	800376a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b08      	cmp	r3, #8
 800346a:	d122      	bne.n	80034b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b08      	cmp	r3, #8
 8003478:	d11b      	bne.n	80034b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f06f 0208 	mvn.w	r2, #8
 8003482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2204      	movs	r2, #4
 8003488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f95d 	bl	8003758 <HAL_TIM_IC_CaptureCallback>
 800349e:	e005      	b.n	80034ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f950 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f95f 	bl	800376a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d122      	bne.n	8003506 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b10      	cmp	r3, #16
 80034cc:	d11b      	bne.n	8003506 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f06f 0210 	mvn.w	r2, #16
 80034d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2208      	movs	r2, #8
 80034dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f933 	bl	8003758 <HAL_TIM_IC_CaptureCallback>
 80034f2:	e005      	b.n	8003500 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f926 	bl	8003746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f935 	bl	800376a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b01      	cmp	r3, #1
 8003512:	d10e      	bne.n	8003532 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d107      	bne.n	8003532 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f06f 0201 	mvn.w	r2, #1
 800352a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7fe fb37 	bl	8001ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353c:	2b80      	cmp	r3, #128	; 0x80
 800353e:	d10e      	bne.n	800355e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b80      	cmp	r3, #128	; 0x80
 800354c:	d107      	bne.n	800355e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fa78 	bl	8003a4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003568:	2b40      	cmp	r3, #64	; 0x40
 800356a:	d10e      	bne.n	800358a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	d107      	bne.n	800358a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f8f9 	bl	800377c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b20      	cmp	r3, #32
 8003596:	d10e      	bne.n	80035b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d107      	bne.n	80035b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f06f 0220 	mvn.w	r2, #32
 80035ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fa43 	bl	8003a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_TIM_ConfigClockSource+0x18>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e0b3      	b.n	800373e <HAL_TIM_ConfigClockSource+0x180>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2202      	movs	r2, #2
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035fc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800360e:	d03e      	beq.n	800368e <HAL_TIM_ConfigClockSource+0xd0>
 8003610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003614:	f200 8087 	bhi.w	8003726 <HAL_TIM_ConfigClockSource+0x168>
 8003618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361c:	f000 8085 	beq.w	800372a <HAL_TIM_ConfigClockSource+0x16c>
 8003620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003624:	d87f      	bhi.n	8003726 <HAL_TIM_ConfigClockSource+0x168>
 8003626:	2b70      	cmp	r3, #112	; 0x70
 8003628:	d01a      	beq.n	8003660 <HAL_TIM_ConfigClockSource+0xa2>
 800362a:	2b70      	cmp	r3, #112	; 0x70
 800362c:	d87b      	bhi.n	8003726 <HAL_TIM_ConfigClockSource+0x168>
 800362e:	2b60      	cmp	r3, #96	; 0x60
 8003630:	d050      	beq.n	80036d4 <HAL_TIM_ConfigClockSource+0x116>
 8003632:	2b60      	cmp	r3, #96	; 0x60
 8003634:	d877      	bhi.n	8003726 <HAL_TIM_ConfigClockSource+0x168>
 8003636:	2b50      	cmp	r3, #80	; 0x50
 8003638:	d03c      	beq.n	80036b4 <HAL_TIM_ConfigClockSource+0xf6>
 800363a:	2b50      	cmp	r3, #80	; 0x50
 800363c:	d873      	bhi.n	8003726 <HAL_TIM_ConfigClockSource+0x168>
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d058      	beq.n	80036f4 <HAL_TIM_ConfigClockSource+0x136>
 8003642:	2b40      	cmp	r3, #64	; 0x40
 8003644:	d86f      	bhi.n	8003726 <HAL_TIM_ConfigClockSource+0x168>
 8003646:	2b30      	cmp	r3, #48	; 0x30
 8003648:	d064      	beq.n	8003714 <HAL_TIM_ConfigClockSource+0x156>
 800364a:	2b30      	cmp	r3, #48	; 0x30
 800364c:	d86b      	bhi.n	8003726 <HAL_TIM_ConfigClockSource+0x168>
 800364e:	2b20      	cmp	r3, #32
 8003650:	d060      	beq.n	8003714 <HAL_TIM_ConfigClockSource+0x156>
 8003652:	2b20      	cmp	r3, #32
 8003654:	d867      	bhi.n	8003726 <HAL_TIM_ConfigClockSource+0x168>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d05c      	beq.n	8003714 <HAL_TIM_ConfigClockSource+0x156>
 800365a:	2b10      	cmp	r3, #16
 800365c:	d05a      	beq.n	8003714 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800365e:	e062      	b.n	8003726 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	6899      	ldr	r1, [r3, #8]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f000 f967 	bl	8003942 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003682:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	609a      	str	r2, [r3, #8]
      break;
 800368c:	e04e      	b.n	800372c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6899      	ldr	r1, [r3, #8]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f000 f950 	bl	8003942 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036b0:	609a      	str	r2, [r3, #8]
      break;
 80036b2:	e03b      	b.n	800372c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	461a      	mov	r2, r3
 80036c2:	f000 f8c7 	bl	8003854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2150      	movs	r1, #80	; 0x50
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f91e 	bl	800390e <TIM_ITRx_SetConfig>
      break;
 80036d2:	e02b      	b.n	800372c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	461a      	mov	r2, r3
 80036e2:	f000 f8e5 	bl	80038b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2160      	movs	r1, #96	; 0x60
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 f90e 	bl	800390e <TIM_ITRx_SetConfig>
      break;
 80036f2:	e01b      	b.n	800372c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6859      	ldr	r1, [r3, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	461a      	mov	r2, r3
 8003702:	f000 f8a7 	bl	8003854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2140      	movs	r1, #64	; 0x40
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f8fe 	bl	800390e <TIM_ITRx_SetConfig>
      break;
 8003712:	e00b      	b.n	800372c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f000 f8f5 	bl	800390e <TIM_ITRx_SetConfig>
        break;
 8003724:	e002      	b.n	800372c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003726:	bf00      	nop
 8003728:	e000      	b.n	800372c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800372a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr
	...

08003790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a29      	ldr	r2, [pc, #164]	; (8003848 <TIM_Base_SetConfig+0xb8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00b      	beq.n	80037c0 <TIM_Base_SetConfig+0x30>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ae:	d007      	beq.n	80037c0 <TIM_Base_SetConfig+0x30>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a26      	ldr	r2, [pc, #152]	; (800384c <TIM_Base_SetConfig+0xbc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_Base_SetConfig+0x30>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a25      	ldr	r2, [pc, #148]	; (8003850 <TIM_Base_SetConfig+0xc0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d108      	bne.n	80037d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a1c      	ldr	r2, [pc, #112]	; (8003848 <TIM_Base_SetConfig+0xb8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00b      	beq.n	80037f2 <TIM_Base_SetConfig+0x62>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e0:	d007      	beq.n	80037f2 <TIM_Base_SetConfig+0x62>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a19      	ldr	r2, [pc, #100]	; (800384c <TIM_Base_SetConfig+0xbc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d003      	beq.n	80037f2 <TIM_Base_SetConfig+0x62>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a18      	ldr	r2, [pc, #96]	; (8003850 <TIM_Base_SetConfig+0xc0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d108      	bne.n	8003804 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a07      	ldr	r2, [pc, #28]	; (8003848 <TIM_Base_SetConfig+0xb8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d103      	bne.n	8003838 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	615a      	str	r2, [r3, #20]
}
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800

08003854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f023 0201 	bic.w	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800387e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f023 030a 	bic.w	r3, r3, #10
 8003890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	621a      	str	r2, [r3, #32]
}
 80038a6:	bf00      	nop
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f023 0210 	bic.w	r2, r3, #16
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	031b      	lsls	r3, r3, #12
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	621a      	str	r2, [r3, #32]
}
 8003904:	bf00      	nop
 8003906:	371c      	adds	r7, #28
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr

0800390e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800390e:	b480      	push	{r7}
 8003910:	b085      	sub	sp, #20
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	f043 0307 	orr.w	r3, r3, #7
 8003930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	609a      	str	r2, [r3, #8]
}
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr

08003942 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003942:	b480      	push	{r7}
 8003944:	b087      	sub	sp, #28
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800395c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	021a      	lsls	r2, r3, #8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	431a      	orrs	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4313      	orrs	r3, r2
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	609a      	str	r2, [r3, #8]
}
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003994:	2302      	movs	r3, #2
 8003996:	e046      	b.n	8003a26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00e      	beq.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d009      	beq.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d004      	beq.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a10      	ldr	r2, [pc, #64]	; (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d10c      	bne.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	40012c00 	.word	0x40012c00
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800

08003a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e03f      	b.n	8003af2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fe f8f8 	bl	8001c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fde3 	bl	8004670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b08a      	sub	sp, #40	; 0x28
 8003afe:	af02      	add	r7, sp, #8
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d17c      	bne.n	8003c14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_UART_Transmit+0x2c>
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e075      	b.n	8003c16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_UART_Transmit+0x3e>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e06e      	b.n	8003c16 <HAL_UART_Transmit+0x11c>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2221      	movs	r2, #33	; 0x21
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b4e:	f7fe fa4f 	bl	8001ff0 <HAL_GetTick>
 8003b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	88fa      	ldrh	r2, [r7, #6]
 8003b5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b68:	d108      	bne.n	8003b7c <HAL_UART_Transmit+0x82>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d104      	bne.n	8003b7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	e003      	b.n	8003b84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b8c:	e02a      	b.n	8003be4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2200      	movs	r2, #0
 8003b96:	2180      	movs	r1, #128	; 0x80
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fb54 	bl	8004246 <UART_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e036      	b.n	8003c16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10b      	bne.n	8003bc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	e007      	b.n	8003bd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1cf      	bne.n	8003b8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2140      	movs	r1, #64	; 0x40
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 fb24 	bl	8004246 <UART_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e006      	b.n	8003c16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	e000      	b.n	8003c16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
  }
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d11d      	bne.n	8003c74 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_UART_Receive_DMA+0x26>
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e016      	b.n	8003c76 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Receive_DMA+0x38>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e00f      	b.n	8003c76 <HAL_UART_Receive_DMA+0x58>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	461a      	mov	r2, r3
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fb36 	bl	80042dc <UART_Start_Receive_DMA>
 8003c70:	4603      	mov	r3, r0
 8003c72:	e000      	b.n	8003c76 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b21      	cmp	r3, #33	; 0x21
 8003caa:	d116      	bne.n	8003cda <HAL_UART_DMAStop+0x5c>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d013      	beq.n	8003cda <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695a      	ldr	r2, [r3, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cc0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fb83 	bl	80023da <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fb65 	bl	80043a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf14      	ite	ne
 8003ce8:	2301      	movne	r3, #1
 8003cea:	2300      	moveq	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b22      	cmp	r3, #34	; 0x22
 8003cfa:	d116      	bne.n	8003d2a <HAL_UART_DMAStop+0xac>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d013      	beq.n	8003d2a <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d10:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe fb5b 	bl	80023da <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fb52 	bl	80043ce <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10d      	bne.n	8003d86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_UART_IRQHandler+0x52>
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fbcc 	bl	800451c <UART_Receive_IT>
      return;
 8003d84:	e17b      	b.n	800407e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80b1 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x1bc>
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d105      	bne.n	8003da4 <HAL_UART_IRQHandler+0x70>
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 80a6 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x90>
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f043 0201 	orr.w	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_UART_IRQHandler+0xb0>
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	f043 0202 	orr.w	r2, r3, #2
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_UART_IRQHandler+0xd0>
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	f043 0204 	orr.w	r2, r3, #4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00f      	beq.n	8003e2e <HAL_UART_IRQHandler+0xfa>
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d104      	bne.n	8003e22 <HAL_UART_IRQHandler+0xee>
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f043 0208 	orr.w	r2, r3, #8
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 811e 	beq.w	8004074 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_UART_IRQHandler+0x11e>
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fb65 	bl	800451c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf14      	ite	ne
 8003e60:	2301      	movne	r3, #1
 8003e62:	2300      	moveq	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <HAL_UART_IRQHandler+0x146>
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d031      	beq.n	8003ede <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 faa7 	bl	80043ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d023      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d013      	beq.n	8003ece <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	4a76      	ldr	r2, [pc, #472]	; (8004084 <HAL_UART_IRQHandler+0x350>)
 8003eac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe facc 	bl	8002450 <HAL_DMA_Abort_IT>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d016      	beq.n	8003eec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ec8:	4610      	mov	r0, r2
 8003eca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ecc:	e00e      	b.n	8003eec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f8f5 	bl	80040be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	e00a      	b.n	8003eec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f8f1 	bl	80040be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003edc:	e006      	b.n	8003eec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f8ed 	bl	80040be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003eea:	e0c3      	b.n	8004074 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eec:	bf00      	nop
    return;
 8003eee:	e0c1      	b.n	8004074 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	f040 80a1 	bne.w	800403c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 809b 	beq.w	800403c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8095 	beq.w	800403c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d04e      	beq.n	8003fd4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f40:	8a3b      	ldrh	r3, [r7, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8098 	beq.w	8004078 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f4c:	8a3a      	ldrh	r2, [r7, #16]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	f080 8092 	bcs.w	8004078 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8a3a      	ldrh	r2, [r7, #16]
 8003f58:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d02b      	beq.n	8003fbc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f72:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695a      	ldr	r2, [r3, #20]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0201 	bic.w	r2, r2, #1
 8003f82:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695a      	ldr	r2, [r3, #20]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f92:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0210 	bic.w	r2, r2, #16
 8003fb0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe fa0f 	bl	80023da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f87f 	bl	80040d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fd2:	e051      	b.n	8004078 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d047      	beq.n	800407c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003fec:	8a7b      	ldrh	r3, [r7, #18]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d044      	beq.n	800407c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004000:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0210 	bic.w	r2, r2, #16
 800402e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004030:	8a7b      	ldrh	r3, [r7, #18]
 8004032:	4619      	mov	r1, r3
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f84b 	bl	80040d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800403a:	e01f      	b.n	800407c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_UART_IRQHandler+0x324>
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f9fc 	bl	800444e <UART_Transmit_IT>
    return;
 8004056:	e012      	b.n	800407e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00d      	beq.n	800407e <HAL_UART_IRQHandler+0x34a>
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fa3d 	bl	80044ec <UART_EndTransmit_IT>
    return;
 8004072:	e004      	b.n	800407e <HAL_UART_IRQHandler+0x34a>
    return;
 8004074:	bf00      	nop
 8004076:	e002      	b.n	800407e <HAL_UART_IRQHandler+0x34a>
      return;
 8004078:	bf00      	nop
 800407a:	e000      	b.n	800407e <HAL_UART_IRQHandler+0x34a>
      return;
 800407c:	bf00      	nop
  }
}
 800407e:	3728      	adds	r7, #40	; 0x28
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	08004427 	.word	0x08004427

08004088 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr

0800409a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr

080040ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr

080040be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d12a      	bne.n	8004158 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004116:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004136:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	2b01      	cmp	r3, #1
 8004146:	d107      	bne.n	8004158 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0210 	bic.w	r2, r2, #16
 8004156:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	2b01      	cmp	r3, #1
 800415e:	d106      	bne.n	800416e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004164:	4619      	mov	r1, r3
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f7ff ffb2 	bl	80040d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800416c:	e002      	b.n	8004174 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff ff93 	bl	800409a <HAL_UART_RxCpltCallback>
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	2b01      	cmp	r3, #1
 8004190:	d108      	bne.n	80041a4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	b29b      	uxth	r3, r3
 800419a:	4619      	mov	r1, r3
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f7ff ff97 	bl	80040d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041a2:	e002      	b.n	80041aa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7ff ff81 	bl	80040ac <HAL_UART_RxHalfCpltCallback>
}
 80041aa:	bf00      	nop
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b21      	cmp	r3, #33	; 0x21
 80041e4:	d108      	bne.n	80041f8 <UART_DMAError+0x46>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2200      	movs	r2, #0
 80041f0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80041f2:	68b8      	ldr	r0, [r7, #8]
 80041f4:	f000 f8d6 	bl	80043a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	bf14      	ite	ne
 8004206:	2301      	movne	r3, #1
 8004208:	2300      	moveq	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b22      	cmp	r3, #34	; 0x22
 8004218:	d108      	bne.n	800422c <UART_DMAError+0x7a>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2200      	movs	r2, #0
 8004224:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004226:	68b8      	ldr	r0, [r7, #8]
 8004228:	f000 f8d1 	bl	80043ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	f043 0210 	orr.w	r2, r3, #16
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004238:	68b8      	ldr	r0, [r7, #8]
 800423a:	f7ff ff40 	bl	80040be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	4613      	mov	r3, r2
 8004254:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004256:	e02c      	b.n	80042b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d028      	beq.n	80042b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <UART_WaitOnFlagUntilTimeout+0x30>
 8004266:	f7fd fec3 	bl	8001ff0 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	429a      	cmp	r2, r3
 8004274:	d21d      	bcs.n	80042b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004284:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695a      	ldr	r2, [r3, #20]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0201 	bic.w	r2, r2, #1
 8004294:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e00f      	b.n	80042d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4013      	ands	r3, r2
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	429a      	cmp	r2, r3
 80042c0:	bf0c      	ite	eq
 80042c2:	2301      	moveq	r3, #1
 80042c4:	2300      	movne	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d0c3      	beq.n	8004258 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	4613      	mov	r3, r2
 80042e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	88fa      	ldrh	r2, [r7, #6]
 80042f4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2222      	movs	r2, #34	; 0x22
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	4a23      	ldr	r2, [pc, #140]	; (8004398 <UART_Start_Receive_DMA+0xbc>)
 800430a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	4a22      	ldr	r2, [pc, #136]	; (800439c <UART_Start_Receive_DMA+0xc0>)
 8004312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	4a21      	ldr	r2, [pc, #132]	; (80043a0 <UART_Start_Receive_DMA+0xc4>)
 800431a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	2200      	movs	r2, #0
 8004322:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004324:	f107 0308 	add.w	r3, r7, #8
 8004328:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	f7fd ffee 	bl	800231c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004340:	2300      	movs	r3, #0
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800436c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0201 	orr.w	r2, r2, #1
 800437c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695a      	ldr	r2, [r3, #20]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800438c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	080040e7 	.word	0x080040e7
 800439c:	0800417d 	.word	0x0800417d
 80043a0:	080041b3 	.word	0x080041b3

080043a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80043ba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695a      	ldr	r2, [r3, #20]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d107      	bne.n	800440e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0210 	bic.w	r2, r2, #16
 800440c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr

08004426 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f7ff fe3c 	bl	80040be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b21      	cmp	r3, #33	; 0x21
 8004460:	d13e      	bne.n	80044e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446a:	d114      	bne.n	8004496 <UART_Transmit_IT+0x48>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d110      	bne.n	8004496 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004488:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	1c9a      	adds	r2, r3, #2
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	621a      	str	r2, [r3, #32]
 8004494:	e008      	b.n	80044a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	1c59      	adds	r1, r3, #1
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6211      	str	r1, [r2, #32]
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4619      	mov	r1, r3
 80044b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10f      	bne.n	80044dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	e000      	b.n	80044e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044e0:	2302      	movs	r3, #2
  }
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr

080044ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004502:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fdbb 	bl	8004088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b22      	cmp	r3, #34	; 0x22
 800452e:	f040 8099 	bne.w	8004664 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453a:	d117      	bne.n	800456c <UART_Receive_IT+0x50>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d113      	bne.n	800456c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	b29b      	uxth	r3, r3
 8004556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455a:	b29a      	uxth	r2, r3
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	1c9a      	adds	r2, r3, #2
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	629a      	str	r2, [r3, #40]	; 0x28
 800456a:	e026      	b.n	80045ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457e:	d007      	beq.n	8004590 <UART_Receive_IT+0x74>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <UART_Receive_IT+0x82>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d106      	bne.n	800459e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	b2da      	uxtb	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	e008      	b.n	80045b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4619      	mov	r1, r3
 80045c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d148      	bne.n	8004660 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0220 	bic.w	r2, r2, #32
 80045dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695a      	ldr	r2, [r3, #20]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	2b01      	cmp	r3, #1
 800460c:	d123      	bne.n	8004656 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0210 	bic.w	r2, r2, #16
 8004622:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	2b10      	cmp	r3, #16
 8004630:	d10a      	bne.n	8004648 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800464c:	4619      	mov	r1, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff fd3e 	bl	80040d0 <HAL_UARTEx_RxEventCallback>
 8004654:	e002      	b.n	800465c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff fd1f 	bl	800409a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	e002      	b.n	8004666 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	e000      	b.n	8004666 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004664:	2302      	movs	r3, #2
  }
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046aa:	f023 030c 	bic.w	r3, r3, #12
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	430b      	orrs	r3, r1
 80046b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a2c      	ldr	r2, [pc, #176]	; (8004784 <UART_SetConfig+0x114>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d103      	bne.n	80046e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046d8:	f7fe fde8 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	e002      	b.n	80046e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046e0:	f7fe fdd0 	bl	8003284 <HAL_RCC_GetPCLK1Freq>
 80046e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	009a      	lsls	r2, r3, #2
 80046f0:	441a      	add	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	4a22      	ldr	r2, [pc, #136]	; (8004788 <UART_SetConfig+0x118>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	0119      	lsls	r1, r3, #4
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	009a      	lsls	r2, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	fbb2 f2f3 	udiv	r2, r2, r3
 800471c:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <UART_SetConfig+0x118>)
 800471e:	fba3 0302 	umull	r0, r3, r3, r2
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	2064      	movs	r0, #100	; 0x64
 8004726:	fb00 f303 	mul.w	r3, r0, r3
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	3332      	adds	r3, #50	; 0x32
 8004730:	4a15      	ldr	r2, [pc, #84]	; (8004788 <UART_SetConfig+0x118>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800473c:	4419      	add	r1, r3
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	009a      	lsls	r2, r3, #2
 8004748:	441a      	add	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	fbb2 f2f3 	udiv	r2, r2, r3
 8004754:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <UART_SetConfig+0x118>)
 8004756:	fba3 0302 	umull	r0, r3, r3, r2
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	2064      	movs	r0, #100	; 0x64
 800475e:	fb00 f303 	mul.w	r3, r0, r3
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	3332      	adds	r3, #50	; 0x32
 8004768:	4a07      	ldr	r2, [pc, #28]	; (8004788 <UART_SetConfig+0x118>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	f003 020f 	and.w	r2, r3, #15
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	440a      	add	r2, r1
 800477a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800477c:	bf00      	nop
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40013800 	.word	0x40013800
 8004788:	51eb851f 	.word	0x51eb851f

0800478c <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
	int len = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	7a1b      	ldrb	r3, [r3, #8]
 800479c:	2b03      	cmp	r3, #3
 800479e:	d102      	bne.n	80047a6 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 80047a0:	230c      	movs	r3, #12
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	e005      	b.n	80047b2 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	7a1b      	ldrb	r3, [r3, #8]
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d101      	bne.n	80047b2 <MQTTSerialize_connectLength+0x26>
		len = 10;
 80047ae:	230a      	movs	r3, #10
 80047b0:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	330c      	adds	r3, #12
 80047b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047ba:	f000 fb37 	bl	8004e2c <MQTTstrlen>
 80047be:	4603      	mov	r3, r0
 80047c0:	3302      	adds	r3, #2
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	7edb      	ldrb	r3, [r3, #27]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d013      	beq.n	80047f8 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3324      	adds	r3, #36	; 0x24
 80047d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047d8:	f000 fb28 	bl	8004e2c <MQTTstrlen>
 80047dc:	4603      	mov	r3, r0
 80047de:	1c9c      	adds	r4, r3, #2
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3330      	adds	r3, #48	; 0x30
 80047e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047e8:	f000 fb20 	bl	8004e2c <MQTTstrlen>
 80047ec:	4603      	mov	r3, r0
 80047ee:	4423      	add	r3, r4
 80047f0:	3302      	adds	r3, #2
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4413      	add	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d103      	bne.n	8004808 <MQTTSerialize_connectLength+0x7c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3340      	adds	r3, #64	; 0x40
 800480c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004810:	f000 fb0c 	bl	8004e2c <MQTTstrlen>
 8004814:	4603      	mov	r3, r0
 8004816:	3302      	adds	r3, #2
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <MQTTSerialize_connectLength+0xa2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	334c      	adds	r3, #76	; 0x4c
 8004832:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004836:	f000 faf9 	bl	8004e2c <MQTTstrlen>
 800483a:	4603      	mov	r3, r0
 800483c:	3302      	adds	r3, #2
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4413      	add	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8004844:	68fb      	ldr	r3, [r7, #12]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bd90      	pop	{r4, r7, pc}
	...

08004850 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08a      	sub	sp, #40	; 0x28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8004860:	2300      	movs	r3, #0
 8004862:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
	int len = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800486c:	f04f 33ff 	mov.w	r3, #4294967295
 8004870:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ff8a 	bl	800478c <MQTTSerialize_connectLength>
 8004878:	6238      	str	r0, [r7, #32]
 800487a:	6a38      	ldr	r0, [r7, #32]
 800487c:	f000 f9da 	bl	8004c34 <MQTTPacket_len>
 8004880:	4602      	mov	r2, r0
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	4293      	cmp	r3, r2
 8004886:	da03      	bge.n	8004890 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8004888:	f06f 0301 	mvn.w	r3, #1
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800488e:	e0c2      	b.n	8004a16 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8004894:	7e3b      	ldrb	r3, [r7, #24]
 8004896:	2201      	movs	r2, #1
 8004898:	f362 1307 	bfi	r3, r2, #4, #4
 800489c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800489e:	7e3a      	ldrb	r2, [r7, #24]
 80048a0:	f107 031c 	add.w	r3, r7, #28
 80048a4:	4611      	mov	r1, r2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fa37 	bl	8004d1a <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	6a39      	ldr	r1, [r7, #32]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 f955 	bl	8004b60 <MQTTPacket_encode>
 80048b6:	4602      	mov	r2, r0
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	4413      	add	r3, r2
 80048bc:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	7a1b      	ldrb	r3, [r3, #8]
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d10c      	bne.n	80048e0 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 80048c6:	f107 031c 	add.w	r3, r7, #28
 80048ca:	4955      	ldr	r1, [pc, #340]	; (8004a20 <MQTTSerialize_connect+0x1d0>)
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fa60 	bl	8004d92 <writeCString>
		writeChar(&ptr, (char) 4);
 80048d2:	f107 031c 	add.w	r3, r7, #28
 80048d6:	2104      	movs	r1, #4
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fa1e 	bl	8004d1a <writeChar>
 80048de:	e00b      	b.n	80048f8 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 80048e0:	f107 031c 	add.w	r3, r7, #28
 80048e4:	494f      	ldr	r1, [pc, #316]	; (8004a24 <MQTTSerialize_connect+0x1d4>)
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fa53 	bl	8004d92 <writeCString>
		writeChar(&ptr, (char) 3);
 80048ec:	f107 031c 	add.w	r3, r7, #28
 80048f0:	2103      	movs	r1, #3
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fa11 	bl	8004d1a <writeChar>
	}

	flags.all = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7e9b      	ldrb	r3, [r3, #26]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	b2da      	uxtb	r2, r3
 8004906:	7d3b      	ldrb	r3, [r7, #20]
 8004908:	f362 0341 	bfi	r3, r2, #1, #1
 800490c:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	7edb      	ldrb	r3, [r3, #27]
 8004912:	2b00      	cmp	r3, #0
 8004914:	bf14      	ite	ne
 8004916:	2301      	movne	r3, #1
 8004918:	2300      	moveq	r3, #0
 800491a:	b2da      	uxtb	r2, r3
 800491c:	7d3b      	ldrb	r3, [r7, #20]
 800491e:	f362 0382 	bfi	r3, r2, #2, #1
 8004922:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8004924:	7d3b      	ldrb	r3, [r7, #20]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d013      	beq.n	8004958 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	b2da      	uxtb	r2, r3
 800493c:	7d3b      	ldrb	r3, [r7, #20]
 800493e:	f362 03c4 	bfi	r3, r2, #3, #2
 8004942:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	b2da      	uxtb	r2, r3
 8004950:	7d3b      	ldrb	r3, [r7, #20]
 8004952:	f362 1345 	bfi	r3, r2, #5, #1
 8004956:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d103      	bne.n	8004968 <MQTTSerialize_connect+0x118>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8004968:	7d3b      	ldrb	r3, [r7, #20]
 800496a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496e:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d103      	bne.n	8004980 <MQTTSerialize_connect+0x130>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8004980:	7d3b      	ldrb	r3, [r7, #20]
 8004982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004986:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8004988:	7d3a      	ldrb	r2, [r7, #20]
 800498a:	f107 031c 	add.w	r3, r7, #28
 800498e:	4611      	mov	r1, r2
 8004990:	4618      	mov	r0, r3
 8004992:	f000 f9c2 	bl	8004d1a <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8b1b      	ldrh	r3, [r3, #24]
 800499a:	461a      	mov	r2, r3
 800499c:	f107 031c 	add.w	r3, r7, #28
 80049a0:	4611      	mov	r1, r2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 f9cd 	bl	8004d42 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f107 001c 	add.w	r0, r7, #28
 80049ae:	330c      	adds	r3, #12
 80049b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049b2:	f000 fa0d 	bl	8004dd0 <writeMQTTString>
	if (options->willFlag)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	7edb      	ldrb	r3, [r3, #27]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f107 001c 	add.w	r0, r7, #28
 80049c4:	3324      	adds	r3, #36	; 0x24
 80049c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049c8:	f000 fa02 	bl	8004dd0 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f107 001c 	add.w	r0, r7, #28
 80049d2:	3330      	adds	r3, #48	; 0x30
 80049d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049d6:	f000 f9fb 	bl	8004dd0 <writeMQTTString>
	}
	if (flags.bits.username)
 80049da:	7d3b      	ldrb	r3, [r7, #20]
 80049dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d006      	beq.n	80049f4 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f107 001c 	add.w	r0, r7, #28
 80049ec:	3340      	adds	r3, #64	; 0x40
 80049ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049f0:	f000 f9ee 	bl	8004dd0 <writeMQTTString>
	if (flags.bits.password)
 80049f4:	7d3b      	ldrb	r3, [r7, #20]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d006      	beq.n	8004a0e <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f107 001c 	add.w	r0, r7, #28
 8004a06:	334c      	adds	r3, #76	; 0x4c
 8004a08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a0a:	f000 f9e1 	bl	8004dd0 <writeMQTTString>

	rc = ptr - buf;
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3728      	adds	r7, #40	; 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	080084bc 	.word	0x080084bc
 8004a24:	080084c4 	.word	0x080084c4

08004a28 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08a      	sub	sp, #40	; 0x28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8004a4a:	f107 0318 	add.w	r3, r7, #24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f950 	bl	8004cf4 <readChar>
 8004a54:	4603      	mov	r3, r0
 8004a56:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8004a58:	7f3b      	ldrb	r3, [r7, #28]
 8004a5a:	f023 030f 	bic.w	r3, r3, #15
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d12e      	bne.n	8004ac2 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	f107 0214 	add.w	r2, r7, #20
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 f92b 	bl	8004cc8 <MQTTPacket_decodeBuf>
 8004a72:	6278      	str	r0, [r7, #36]	; 0x24
 8004a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	4413      	add	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4413      	add	r3, r2
 8004a82:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	6a3a      	ldr	r2, [r7, #32]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	dd1b      	ble.n	8004ac6 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8004a8e:	f107 0318 	add.w	r3, r7, #24
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f92e 	bl	8004cf4 <readChar>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8004a9c:	7c3b      	ldrb	r3, [r7, #16]
 8004a9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8004aaa:	f107 0318 	add.w	r3, r7, #24
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f920 	bl	8004cf4 <readChar>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8004abc:	2301      	movs	r3, #1
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac0:	e002      	b.n	8004ac8 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8004ac2:	bf00      	nop
 8004ac4:	e000      	b.n	8004ac8 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8004ac6:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3728      	adds	r7, #40	; 0x28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b088      	sub	sp, #32
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	4613      	mov	r3, r2
 8004ade:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8004ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	dc03      	bgt.n	8004afc <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8004af4:	f06f 0301 	mvn.w	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
		goto exit;
 8004afa:	e01d      	b.n	8004b38 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	7e3b      	ldrb	r3, [r7, #24]
 8004b0a:	f362 1307 	bfi	r3, r2, #4, #4
 8004b0e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8004b10:	7e3a      	ldrb	r2, [r7, #24]
 8004b12:	f107 0314 	add.w	r3, r7, #20
 8004b16:	4611      	mov	r1, r2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 f8fe 	bl	8004d1a <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f81c 	bl	8004b60 <MQTTPacket_encode>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004b38:	69fb      	ldr	r3, [r7, #28]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3720      	adds	r7, #32
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 8004b4c:	220e      	movs	r2, #14
 8004b4e:	6839      	ldr	r1, [r7, #0]
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff ffbe 	bl	8004ad2 <MQTTSerialize_zero>
 8004b56:	4603      	mov	r3, r0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	425a      	negs	r2, r3
 8004b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b7a:	bf58      	it	pl
 8004b7c:	4253      	negpl	r3, r2
 8004b7e:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	da00      	bge.n	8004b88 <MQTTPacket_encode+0x28>
 8004b86:	337f      	adds	r3, #127	; 0x7f
 8004b88:	11db      	asrs	r3, r3, #7
 8004b8a:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	dd03      	ble.n	8004b9a <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8004b92:	7afb      	ldrb	r3, [r7, #11]
 8004b94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b98:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	60fa      	str	r2, [r7, #12]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	7afa      	ldrb	r2, [r7, #11]
 8004ba8:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	dcde      	bgt.n	8004b6e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
	int len = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8004bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd8:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	dd03      	ble.n	8004bee <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8004be6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bea:	60fb      	str	r3, [r7, #12]
			goto exit;
 8004bec:	e01d      	b.n	8004c2a <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8004bee:	f107 020b 	add.w	r2, r7, #11
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	4798      	blx	r3
 8004bfa:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d112      	bne.n	8004c28 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	7afb      	ldrb	r3, [r7, #11]
 8004c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c0c:	6979      	ldr	r1, [r7, #20]
 8004c0e:	fb01 f303 	mul.w	r3, r1, r3
 8004c12:	441a      	add	r2, r3
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	01db      	lsls	r3, r3, #7
 8004c1c:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8004c1e:	7afb      	ldrb	r3, [r7, #11]
 8004c20:	b25b      	sxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	dbd6      	blt.n	8004bd4 <MQTTPacket_decode+0x18>
exit:
 8004c26:	e000      	b.n	8004c2a <MQTTPacket_decode+0x6e>
			goto exit;
 8004c28:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8004c2a:	693b      	ldr	r3, [r7, #16]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b7f      	cmp	r3, #127	; 0x7f
 8004c46:	dc03      	bgt.n	8004c50 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	607b      	str	r3, [r7, #4]
 8004c4e:	e012      	b.n	8004c76 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c56:	da03      	bge.n	8004c60 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3302      	adds	r3, #2
 8004c5c:	607b      	str	r3, [r7, #4]
 8004c5e:	e00a      	b.n	8004c76 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <MQTTPacket_len+0x50>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	dc03      	bgt.n	8004c70 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3303      	adds	r3, #3
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	e002      	b.n	8004c76 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	607b      	str	r3, [r7, #4]
	return rem_len;
 8004c76:	687b      	ldr	r3, [r7, #4]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	001ffffe 	.word	0x001ffffe

08004c88 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	e00a      	b.n	8004cae <bufchar+0x26>
		*c = *bufptr++;
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <bufchar+0x3c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	4909      	ldr	r1, [pc, #36]	; (8004cc4 <bufchar+0x3c>)
 8004ca0:	600a      	str	r2, [r1, #0]
 8004ca2:	781a      	ldrb	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3301      	adds	r3, #1
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	dbf0      	blt.n	8004c98 <bufchar+0x10>
	return count;
 8004cb6:	683b      	ldr	r3, [r7, #0]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	2000020c 	.word	0x2000020c

08004cc8 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8004cd2:	4a06      	ldr	r2, [pc, #24]	; (8004cec <MQTTPacket_decodeBuf+0x24>)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8004cd8:	6839      	ldr	r1, [r7, #0]
 8004cda:	4805      	ldr	r0, [pc, #20]	; (8004cf0 <MQTTPacket_decodeBuf+0x28>)
 8004cdc:	f7ff ff6e 	bl	8004bbc <MQTTPacket_decode>
 8004ce0:	4603      	mov	r3, r0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	2000020c 	.word	0x2000020c
 8004cf0:	08004c89 	.word	0x08004c89

08004cf4 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	601a      	str	r2, [r3, #0]
	return c;
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	460b      	mov	r3, r1
 8004d24:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	78fa      	ldrb	r2, [r7, #3]
 8004d2c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	601a      	str	r2, [r3, #0]
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr

08004d42 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	da00      	bge.n	8004d54 <writeInt+0x12>
 8004d52:	33ff      	adds	r3, #255	; 0xff
 8004d54:	121b      	asrs	r3, r3, #8
 8004d56:	461a      	mov	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	425a      	negs	r2, r3
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	bf58      	it	pl
 8004d74:	4253      	negpl	r3, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr

08004d92 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8004d9c:	6838      	ldr	r0, [r7, #0]
 8004d9e:	f7fb f9d7 	bl	8000150 <strlen>
 8004da2:	4603      	mov	r3, r0
 8004da4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8004da6:	68f9      	ldr	r1, [r7, #12]
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff ffca 	bl	8004d42 <writeInt>
	memcpy(*pptr, string, len);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	6839      	ldr	r1, [r7, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 f8d4 	bl	8004f64 <memcpy>
	*pptr += len;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	441a      	add	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	601a      	str	r2, [r3, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	4638      	mov	r0, r7
 8004dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	dd12      	ble.n	8004e0a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4619      	mov	r1, r3
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f7ff ffaa 	bl	8004d42 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 f8b4 	bl	8004f64 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	441a      	add	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8004e08:	e00c      	b.n	8004e24 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	4619      	mov	r1, r3
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff ffbc 	bl	8004d92 <writeCString>
}
 8004e1a:	e003      	b.n	8004e24 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f7ff ff8f 	bl	8004d42 <writeInt>
}
 8004e24:	bf00      	nop
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	1d3b      	adds	r3, r7, #4
 8004e34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d006      	beq.n	8004e50 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fb f983 	bl	8000150 <strlen>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	e001      	b.n	8004e54 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	617b      	str	r3, [r7, #20]
	return rc;
 8004e54:	697b      	ldr	r3, [r7, #20]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <MQTTPacket_read>:
 * @param getfn pointer to a function which will read any number of bytes from the needed source
 * @return integer MQTT packet type, or -1 on error
 * @note  the whole message must fit into the caller's buffer
 */
int MQTTPacket_read(unsigned char* buf, int buflen, int (*getfn)(unsigned char*, int))
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b088      	sub	sp, #32
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	607a      	str	r2, [r7, #4]
	int rc = -1;
 8004e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
	int len = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61bb      	str	r3, [r7, #24]
	int rem_len = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	613b      	str	r3, [r7, #16]

	/* 1. read the header byte.  This has the packet type in it */
	if ((*getfn)(buf, 1) != 1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2101      	movs	r1, #1
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	4798      	blx	r3
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d12f      	bne.n	8004eea <MQTTPacket_read+0x8c>
		goto exit;

	len = 1;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	61bb      	str	r3, [r7, #24]
	/* 2. read the remaining length.  This is variable in itself */
	MQTTPacket_decode(getfn, &rem_len);
 8004e8e:	f107 0310 	add.w	r3, r7, #16
 8004e92:	4619      	mov	r1, r3
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff fe91 	bl	8004bbc <MQTTPacket_decode>
	len += MQTTPacket_encode(buf + 1, rem_len); /* put the original remaining length back into the buffer */
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff fe5c 	bl	8004b60 <MQTTPacket_encode>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	4413      	add	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]

	/* 3. read the rest of the buffer using a callback to supply the rest of the data */
	if((rem_len + len) > buflen)
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	db18      	blt.n	8004eee <MQTTPacket_read+0x90>
		goto exit;
	if (rem_len && ((*getfn)(buf + len, rem_len) != rem_len))
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <MQTTPacket_read+0x7a>
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	441a      	add	r2, r3
 8004ec8:	6939      	ldr	r1, [r7, #16]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4798      	blx	r3
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d10c      	bne.n	8004ef2 <MQTTPacket_read+0x94>
		goto exit;

	header.byte = buf[0];
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	753b      	strb	r3, [r7, #20]
	rc = header.bits.type;
 8004ede:	7d3b      	ldrb	r3, [r7, #20]
 8004ee0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	61fb      	str	r3, [r7, #28]
 8004ee8:	e004      	b.n	8004ef4 <MQTTPacket_read+0x96>
		goto exit;
 8004eea:	bf00      	nop
 8004eec:	e002      	b.n	8004ef4 <MQTTPacket_read+0x96>
		goto exit;
 8004eee:	bf00      	nop
 8004ef0:	e000      	b.n	8004ef4 <MQTTPacket_read+0x96>
		goto exit;
 8004ef2:	bf00      	nop
exit:
	return rc;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <__errno>:
 8004f00:	4b01      	ldr	r3, [pc, #4]	; (8004f08 <__errno+0x8>)
 8004f02:	6818      	ldr	r0, [r3, #0]
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20000014 	.word	0x20000014

08004f0c <__libc_init_array>:
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	2600      	movs	r6, #0
 8004f10:	4d0c      	ldr	r5, [pc, #48]	; (8004f44 <__libc_init_array+0x38>)
 8004f12:	4c0d      	ldr	r4, [pc, #52]	; (8004f48 <__libc_init_array+0x3c>)
 8004f14:	1b64      	subs	r4, r4, r5
 8004f16:	10a4      	asrs	r4, r4, #2
 8004f18:	42a6      	cmp	r6, r4
 8004f1a:	d109      	bne.n	8004f30 <__libc_init_array+0x24>
 8004f1c:	f002 fef0 	bl	8007d00 <_init>
 8004f20:	2600      	movs	r6, #0
 8004f22:	4d0a      	ldr	r5, [pc, #40]	; (8004f4c <__libc_init_array+0x40>)
 8004f24:	4c0a      	ldr	r4, [pc, #40]	; (8004f50 <__libc_init_array+0x44>)
 8004f26:	1b64      	subs	r4, r4, r5
 8004f28:	10a4      	asrs	r4, r4, #2
 8004f2a:	42a6      	cmp	r6, r4
 8004f2c:	d105      	bne.n	8004f3a <__libc_init_array+0x2e>
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
 8004f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f34:	4798      	blx	r3
 8004f36:	3601      	adds	r6, #1
 8004f38:	e7ee      	b.n	8004f18 <__libc_init_array+0xc>
 8004f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f3e:	4798      	blx	r3
 8004f40:	3601      	adds	r6, #1
 8004f42:	e7f2      	b.n	8004f2a <__libc_init_array+0x1e>
 8004f44:	080088cc 	.word	0x080088cc
 8004f48:	080088cc 	.word	0x080088cc
 8004f4c:	080088cc 	.word	0x080088cc
 8004f50:	080088d0 	.word	0x080088d0

08004f54 <malloc>:
 8004f54:	4b02      	ldr	r3, [pc, #8]	; (8004f60 <malloc+0xc>)
 8004f56:	4601      	mov	r1, r0
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	f000 b865 	b.w	8005028 <_malloc_r>
 8004f5e:	bf00      	nop
 8004f60:	20000014 	.word	0x20000014

08004f64 <memcpy>:
 8004f64:	440a      	add	r2, r1
 8004f66:	4291      	cmp	r1, r2
 8004f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f6c:	d100      	bne.n	8004f70 <memcpy+0xc>
 8004f6e:	4770      	bx	lr
 8004f70:	b510      	push	{r4, lr}
 8004f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f76:	4291      	cmp	r1, r2
 8004f78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f7c:	d1f9      	bne.n	8004f72 <memcpy+0xe>
 8004f7e:	bd10      	pop	{r4, pc}

08004f80 <memset>:
 8004f80:	4603      	mov	r3, r0
 8004f82:	4402      	add	r2, r0
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d100      	bne.n	8004f8a <memset+0xa>
 8004f88:	4770      	bx	lr
 8004f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8e:	e7f9      	b.n	8004f84 <memset+0x4>

08004f90 <_free_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4605      	mov	r5, r0
 8004f94:	2900      	cmp	r1, #0
 8004f96:	d043      	beq.n	8005020 <_free_r+0x90>
 8004f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f9c:	1f0c      	subs	r4, r1, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bfb8      	it	lt
 8004fa2:	18e4      	addlt	r4, r4, r3
 8004fa4:	f001 fc78 	bl	8006898 <__malloc_lock>
 8004fa8:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <_free_r+0x94>)
 8004faa:	6813      	ldr	r3, [r2, #0]
 8004fac:	4610      	mov	r0, r2
 8004fae:	b933      	cbnz	r3, 8004fbe <_free_r+0x2e>
 8004fb0:	6063      	str	r3, [r4, #4]
 8004fb2:	6014      	str	r4, [r2, #0]
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fba:	f001 bc73 	b.w	80068a4 <__malloc_unlock>
 8004fbe:	42a3      	cmp	r3, r4
 8004fc0:	d90a      	bls.n	8004fd8 <_free_r+0x48>
 8004fc2:	6821      	ldr	r1, [r4, #0]
 8004fc4:	1862      	adds	r2, r4, r1
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	bf01      	itttt	eq
 8004fca:	681a      	ldreq	r2, [r3, #0]
 8004fcc:	685b      	ldreq	r3, [r3, #4]
 8004fce:	1852      	addeq	r2, r2, r1
 8004fd0:	6022      	streq	r2, [r4, #0]
 8004fd2:	6063      	str	r3, [r4, #4]
 8004fd4:	6004      	str	r4, [r0, #0]
 8004fd6:	e7ed      	b.n	8004fb4 <_free_r+0x24>
 8004fd8:	461a      	mov	r2, r3
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	b10b      	cbz	r3, 8004fe2 <_free_r+0x52>
 8004fde:	42a3      	cmp	r3, r4
 8004fe0:	d9fa      	bls.n	8004fd8 <_free_r+0x48>
 8004fe2:	6811      	ldr	r1, [r2, #0]
 8004fe4:	1850      	adds	r0, r2, r1
 8004fe6:	42a0      	cmp	r0, r4
 8004fe8:	d10b      	bne.n	8005002 <_free_r+0x72>
 8004fea:	6820      	ldr	r0, [r4, #0]
 8004fec:	4401      	add	r1, r0
 8004fee:	1850      	adds	r0, r2, r1
 8004ff0:	4283      	cmp	r3, r0
 8004ff2:	6011      	str	r1, [r2, #0]
 8004ff4:	d1de      	bne.n	8004fb4 <_free_r+0x24>
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	4401      	add	r1, r0
 8004ffc:	6011      	str	r1, [r2, #0]
 8004ffe:	6053      	str	r3, [r2, #4]
 8005000:	e7d8      	b.n	8004fb4 <_free_r+0x24>
 8005002:	d902      	bls.n	800500a <_free_r+0x7a>
 8005004:	230c      	movs	r3, #12
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	e7d4      	b.n	8004fb4 <_free_r+0x24>
 800500a:	6820      	ldr	r0, [r4, #0]
 800500c:	1821      	adds	r1, r4, r0
 800500e:	428b      	cmp	r3, r1
 8005010:	bf01      	itttt	eq
 8005012:	6819      	ldreq	r1, [r3, #0]
 8005014:	685b      	ldreq	r3, [r3, #4]
 8005016:	1809      	addeq	r1, r1, r0
 8005018:	6021      	streq	r1, [r4, #0]
 800501a:	6063      	str	r3, [r4, #4]
 800501c:	6054      	str	r4, [r2, #4]
 800501e:	e7c9      	b.n	8004fb4 <_free_r+0x24>
 8005020:	bd38      	pop	{r3, r4, r5, pc}
 8005022:	bf00      	nop
 8005024:	20000210 	.word	0x20000210

08005028 <_malloc_r>:
 8005028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502a:	1ccd      	adds	r5, r1, #3
 800502c:	f025 0503 	bic.w	r5, r5, #3
 8005030:	3508      	adds	r5, #8
 8005032:	2d0c      	cmp	r5, #12
 8005034:	bf38      	it	cc
 8005036:	250c      	movcc	r5, #12
 8005038:	2d00      	cmp	r5, #0
 800503a:	4606      	mov	r6, r0
 800503c:	db01      	blt.n	8005042 <_malloc_r+0x1a>
 800503e:	42a9      	cmp	r1, r5
 8005040:	d903      	bls.n	800504a <_malloc_r+0x22>
 8005042:	230c      	movs	r3, #12
 8005044:	6033      	str	r3, [r6, #0]
 8005046:	2000      	movs	r0, #0
 8005048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800504a:	f001 fc25 	bl	8006898 <__malloc_lock>
 800504e:	4921      	ldr	r1, [pc, #132]	; (80050d4 <_malloc_r+0xac>)
 8005050:	680a      	ldr	r2, [r1, #0]
 8005052:	4614      	mov	r4, r2
 8005054:	b99c      	cbnz	r4, 800507e <_malloc_r+0x56>
 8005056:	4f20      	ldr	r7, [pc, #128]	; (80050d8 <_malloc_r+0xb0>)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	b923      	cbnz	r3, 8005066 <_malloc_r+0x3e>
 800505c:	4621      	mov	r1, r4
 800505e:	4630      	mov	r0, r6
 8005060:	f000 fc9c 	bl	800599c <_sbrk_r>
 8005064:	6038      	str	r0, [r7, #0]
 8005066:	4629      	mov	r1, r5
 8005068:	4630      	mov	r0, r6
 800506a:	f000 fc97 	bl	800599c <_sbrk_r>
 800506e:	1c43      	adds	r3, r0, #1
 8005070:	d123      	bne.n	80050ba <_malloc_r+0x92>
 8005072:	230c      	movs	r3, #12
 8005074:	4630      	mov	r0, r6
 8005076:	6033      	str	r3, [r6, #0]
 8005078:	f001 fc14 	bl	80068a4 <__malloc_unlock>
 800507c:	e7e3      	b.n	8005046 <_malloc_r+0x1e>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	1b5b      	subs	r3, r3, r5
 8005082:	d417      	bmi.n	80050b4 <_malloc_r+0x8c>
 8005084:	2b0b      	cmp	r3, #11
 8005086:	d903      	bls.n	8005090 <_malloc_r+0x68>
 8005088:	6023      	str	r3, [r4, #0]
 800508a:	441c      	add	r4, r3
 800508c:	6025      	str	r5, [r4, #0]
 800508e:	e004      	b.n	800509a <_malloc_r+0x72>
 8005090:	6863      	ldr	r3, [r4, #4]
 8005092:	42a2      	cmp	r2, r4
 8005094:	bf0c      	ite	eq
 8005096:	600b      	streq	r3, [r1, #0]
 8005098:	6053      	strne	r3, [r2, #4]
 800509a:	4630      	mov	r0, r6
 800509c:	f001 fc02 	bl	80068a4 <__malloc_unlock>
 80050a0:	f104 000b 	add.w	r0, r4, #11
 80050a4:	1d23      	adds	r3, r4, #4
 80050a6:	f020 0007 	bic.w	r0, r0, #7
 80050aa:	1ac2      	subs	r2, r0, r3
 80050ac:	d0cc      	beq.n	8005048 <_malloc_r+0x20>
 80050ae:	1a1b      	subs	r3, r3, r0
 80050b0:	50a3      	str	r3, [r4, r2]
 80050b2:	e7c9      	b.n	8005048 <_malloc_r+0x20>
 80050b4:	4622      	mov	r2, r4
 80050b6:	6864      	ldr	r4, [r4, #4]
 80050b8:	e7cc      	b.n	8005054 <_malloc_r+0x2c>
 80050ba:	1cc4      	adds	r4, r0, #3
 80050bc:	f024 0403 	bic.w	r4, r4, #3
 80050c0:	42a0      	cmp	r0, r4
 80050c2:	d0e3      	beq.n	800508c <_malloc_r+0x64>
 80050c4:	1a21      	subs	r1, r4, r0
 80050c6:	4630      	mov	r0, r6
 80050c8:	f000 fc68 	bl	800599c <_sbrk_r>
 80050cc:	3001      	adds	r0, #1
 80050ce:	d1dd      	bne.n	800508c <_malloc_r+0x64>
 80050d0:	e7cf      	b.n	8005072 <_malloc_r+0x4a>
 80050d2:	bf00      	nop
 80050d4:	20000210 	.word	0x20000210
 80050d8:	20000214 	.word	0x20000214

080050dc <__cvt>:
 80050dc:	2b00      	cmp	r3, #0
 80050de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e2:	461f      	mov	r7, r3
 80050e4:	bfbb      	ittet	lt
 80050e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80050ea:	461f      	movlt	r7, r3
 80050ec:	2300      	movge	r3, #0
 80050ee:	232d      	movlt	r3, #45	; 0x2d
 80050f0:	b088      	sub	sp, #32
 80050f2:	4614      	mov	r4, r2
 80050f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80050f8:	7013      	strb	r3, [r2, #0]
 80050fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005100:	f023 0820 	bic.w	r8, r3, #32
 8005104:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005108:	d005      	beq.n	8005116 <__cvt+0x3a>
 800510a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800510e:	d100      	bne.n	8005112 <__cvt+0x36>
 8005110:	3501      	adds	r5, #1
 8005112:	2302      	movs	r3, #2
 8005114:	e000      	b.n	8005118 <__cvt+0x3c>
 8005116:	2303      	movs	r3, #3
 8005118:	aa07      	add	r2, sp, #28
 800511a:	9204      	str	r2, [sp, #16]
 800511c:	aa06      	add	r2, sp, #24
 800511e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005122:	e9cd 3500 	strd	r3, r5, [sp]
 8005126:	4622      	mov	r2, r4
 8005128:	463b      	mov	r3, r7
 800512a:	f000 fd91 	bl	8005c50 <_dtoa_r>
 800512e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005132:	4606      	mov	r6, r0
 8005134:	d102      	bne.n	800513c <__cvt+0x60>
 8005136:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005138:	07db      	lsls	r3, r3, #31
 800513a:	d522      	bpl.n	8005182 <__cvt+0xa6>
 800513c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005140:	eb06 0905 	add.w	r9, r6, r5
 8005144:	d110      	bne.n	8005168 <__cvt+0x8c>
 8005146:	7833      	ldrb	r3, [r6, #0]
 8005148:	2b30      	cmp	r3, #48	; 0x30
 800514a:	d10a      	bne.n	8005162 <__cvt+0x86>
 800514c:	2200      	movs	r2, #0
 800514e:	2300      	movs	r3, #0
 8005150:	4620      	mov	r0, r4
 8005152:	4639      	mov	r1, r7
 8005154:	f7fb fc28 	bl	80009a8 <__aeabi_dcmpeq>
 8005158:	b918      	cbnz	r0, 8005162 <__cvt+0x86>
 800515a:	f1c5 0501 	rsb	r5, r5, #1
 800515e:	f8ca 5000 	str.w	r5, [sl]
 8005162:	f8da 3000 	ldr.w	r3, [sl]
 8005166:	4499      	add	r9, r3
 8005168:	2200      	movs	r2, #0
 800516a:	2300      	movs	r3, #0
 800516c:	4620      	mov	r0, r4
 800516e:	4639      	mov	r1, r7
 8005170:	f7fb fc1a 	bl	80009a8 <__aeabi_dcmpeq>
 8005174:	b108      	cbz	r0, 800517a <__cvt+0x9e>
 8005176:	f8cd 901c 	str.w	r9, [sp, #28]
 800517a:	2230      	movs	r2, #48	; 0x30
 800517c:	9b07      	ldr	r3, [sp, #28]
 800517e:	454b      	cmp	r3, r9
 8005180:	d307      	bcc.n	8005192 <__cvt+0xb6>
 8005182:	4630      	mov	r0, r6
 8005184:	9b07      	ldr	r3, [sp, #28]
 8005186:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005188:	1b9b      	subs	r3, r3, r6
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	b008      	add	sp, #32
 800518e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005192:	1c59      	adds	r1, r3, #1
 8005194:	9107      	str	r1, [sp, #28]
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	e7f0      	b.n	800517c <__cvt+0xa0>

0800519a <__exponent>:
 800519a:	4603      	mov	r3, r0
 800519c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800519e:	2900      	cmp	r1, #0
 80051a0:	f803 2b02 	strb.w	r2, [r3], #2
 80051a4:	bfb6      	itet	lt
 80051a6:	222d      	movlt	r2, #45	; 0x2d
 80051a8:	222b      	movge	r2, #43	; 0x2b
 80051aa:	4249      	neglt	r1, r1
 80051ac:	2909      	cmp	r1, #9
 80051ae:	7042      	strb	r2, [r0, #1]
 80051b0:	dd2b      	ble.n	800520a <__exponent+0x70>
 80051b2:	f10d 0407 	add.w	r4, sp, #7
 80051b6:	46a4      	mov	ip, r4
 80051b8:	270a      	movs	r7, #10
 80051ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80051be:	460a      	mov	r2, r1
 80051c0:	46a6      	mov	lr, r4
 80051c2:	fb07 1516 	mls	r5, r7, r6, r1
 80051c6:	2a63      	cmp	r2, #99	; 0x63
 80051c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80051cc:	4631      	mov	r1, r6
 80051ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80051d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80051d6:	dcf0      	bgt.n	80051ba <__exponent+0x20>
 80051d8:	3130      	adds	r1, #48	; 0x30
 80051da:	f1ae 0502 	sub.w	r5, lr, #2
 80051de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80051e2:	4629      	mov	r1, r5
 80051e4:	1c44      	adds	r4, r0, #1
 80051e6:	4561      	cmp	r1, ip
 80051e8:	d30a      	bcc.n	8005200 <__exponent+0x66>
 80051ea:	f10d 0209 	add.w	r2, sp, #9
 80051ee:	eba2 020e 	sub.w	r2, r2, lr
 80051f2:	4565      	cmp	r5, ip
 80051f4:	bf88      	it	hi
 80051f6:	2200      	movhi	r2, #0
 80051f8:	4413      	add	r3, r2
 80051fa:	1a18      	subs	r0, r3, r0
 80051fc:	b003      	add	sp, #12
 80051fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005200:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005204:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005208:	e7ed      	b.n	80051e6 <__exponent+0x4c>
 800520a:	2330      	movs	r3, #48	; 0x30
 800520c:	3130      	adds	r1, #48	; 0x30
 800520e:	7083      	strb	r3, [r0, #2]
 8005210:	70c1      	strb	r1, [r0, #3]
 8005212:	1d03      	adds	r3, r0, #4
 8005214:	e7f1      	b.n	80051fa <__exponent+0x60>
	...

08005218 <_printf_float>:
 8005218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521c:	b091      	sub	sp, #68	; 0x44
 800521e:	460c      	mov	r4, r1
 8005220:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005224:	4616      	mov	r6, r2
 8005226:	461f      	mov	r7, r3
 8005228:	4605      	mov	r5, r0
 800522a:	f001 faff 	bl	800682c <_localeconv_r>
 800522e:	6803      	ldr	r3, [r0, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	9309      	str	r3, [sp, #36]	; 0x24
 8005234:	f7fa ff8c 	bl	8000150 <strlen>
 8005238:	2300      	movs	r3, #0
 800523a:	930e      	str	r3, [sp, #56]	; 0x38
 800523c:	f8d8 3000 	ldr.w	r3, [r8]
 8005240:	900a      	str	r0, [sp, #40]	; 0x28
 8005242:	3307      	adds	r3, #7
 8005244:	f023 0307 	bic.w	r3, r3, #7
 8005248:	f103 0208 	add.w	r2, r3, #8
 800524c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005250:	f8d4 b000 	ldr.w	fp, [r4]
 8005254:	f8c8 2000 	str.w	r2, [r8]
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005260:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005264:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005268:	930b      	str	r3, [sp, #44]	; 0x2c
 800526a:	f04f 32ff 	mov.w	r2, #4294967295
 800526e:	4640      	mov	r0, r8
 8005270:	4b9c      	ldr	r3, [pc, #624]	; (80054e4 <_printf_float+0x2cc>)
 8005272:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005274:	f7fb fbca 	bl	8000a0c <__aeabi_dcmpun>
 8005278:	bb70      	cbnz	r0, 80052d8 <_printf_float+0xc0>
 800527a:	f04f 32ff 	mov.w	r2, #4294967295
 800527e:	4640      	mov	r0, r8
 8005280:	4b98      	ldr	r3, [pc, #608]	; (80054e4 <_printf_float+0x2cc>)
 8005282:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005284:	f7fb fba4 	bl	80009d0 <__aeabi_dcmple>
 8005288:	bb30      	cbnz	r0, 80052d8 <_printf_float+0xc0>
 800528a:	2200      	movs	r2, #0
 800528c:	2300      	movs	r3, #0
 800528e:	4640      	mov	r0, r8
 8005290:	4651      	mov	r1, sl
 8005292:	f7fb fb93 	bl	80009bc <__aeabi_dcmplt>
 8005296:	b110      	cbz	r0, 800529e <_printf_float+0x86>
 8005298:	232d      	movs	r3, #45	; 0x2d
 800529a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800529e:	4b92      	ldr	r3, [pc, #584]	; (80054e8 <_printf_float+0x2d0>)
 80052a0:	4892      	ldr	r0, [pc, #584]	; (80054ec <_printf_float+0x2d4>)
 80052a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80052a6:	bf94      	ite	ls
 80052a8:	4698      	movls	r8, r3
 80052aa:	4680      	movhi	r8, r0
 80052ac:	2303      	movs	r3, #3
 80052ae:	f04f 0a00 	mov.w	sl, #0
 80052b2:	6123      	str	r3, [r4, #16]
 80052b4:	f02b 0304 	bic.w	r3, fp, #4
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	4633      	mov	r3, r6
 80052bc:	4621      	mov	r1, r4
 80052be:	4628      	mov	r0, r5
 80052c0:	9700      	str	r7, [sp, #0]
 80052c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80052c4:	f000 f9d4 	bl	8005670 <_printf_common>
 80052c8:	3001      	adds	r0, #1
 80052ca:	f040 8090 	bne.w	80053ee <_printf_float+0x1d6>
 80052ce:	f04f 30ff 	mov.w	r0, #4294967295
 80052d2:	b011      	add	sp, #68	; 0x44
 80052d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d8:	4642      	mov	r2, r8
 80052da:	4653      	mov	r3, sl
 80052dc:	4640      	mov	r0, r8
 80052de:	4651      	mov	r1, sl
 80052e0:	f7fb fb94 	bl	8000a0c <__aeabi_dcmpun>
 80052e4:	b148      	cbz	r0, 80052fa <_printf_float+0xe2>
 80052e6:	f1ba 0f00 	cmp.w	sl, #0
 80052ea:	bfb8      	it	lt
 80052ec:	232d      	movlt	r3, #45	; 0x2d
 80052ee:	4880      	ldr	r0, [pc, #512]	; (80054f0 <_printf_float+0x2d8>)
 80052f0:	bfb8      	it	lt
 80052f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052f6:	4b7f      	ldr	r3, [pc, #508]	; (80054f4 <_printf_float+0x2dc>)
 80052f8:	e7d3      	b.n	80052a2 <_printf_float+0x8a>
 80052fa:	6863      	ldr	r3, [r4, #4]
 80052fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	d142      	bne.n	800538a <_printf_float+0x172>
 8005304:	2306      	movs	r3, #6
 8005306:	6063      	str	r3, [r4, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	9206      	str	r2, [sp, #24]
 800530c:	aa0e      	add	r2, sp, #56	; 0x38
 800530e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005312:	aa0d      	add	r2, sp, #52	; 0x34
 8005314:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005318:	9203      	str	r2, [sp, #12]
 800531a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800531e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	6863      	ldr	r3, [r4, #4]
 8005326:	4642      	mov	r2, r8
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	4628      	mov	r0, r5
 800532c:	4653      	mov	r3, sl
 800532e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005330:	f7ff fed4 	bl	80050dc <__cvt>
 8005334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005336:	4680      	mov	r8, r0
 8005338:	2947      	cmp	r1, #71	; 0x47
 800533a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800533c:	d108      	bne.n	8005350 <_printf_float+0x138>
 800533e:	1cc8      	adds	r0, r1, #3
 8005340:	db02      	blt.n	8005348 <_printf_float+0x130>
 8005342:	6863      	ldr	r3, [r4, #4]
 8005344:	4299      	cmp	r1, r3
 8005346:	dd40      	ble.n	80053ca <_printf_float+0x1b2>
 8005348:	f1a9 0902 	sub.w	r9, r9, #2
 800534c:	fa5f f989 	uxtb.w	r9, r9
 8005350:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005354:	d81f      	bhi.n	8005396 <_printf_float+0x17e>
 8005356:	464a      	mov	r2, r9
 8005358:	3901      	subs	r1, #1
 800535a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800535e:	910d      	str	r1, [sp, #52]	; 0x34
 8005360:	f7ff ff1b 	bl	800519a <__exponent>
 8005364:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005366:	4682      	mov	sl, r0
 8005368:	1813      	adds	r3, r2, r0
 800536a:	2a01      	cmp	r2, #1
 800536c:	6123      	str	r3, [r4, #16]
 800536e:	dc02      	bgt.n	8005376 <_printf_float+0x15e>
 8005370:	6822      	ldr	r2, [r4, #0]
 8005372:	07d2      	lsls	r2, r2, #31
 8005374:	d501      	bpl.n	800537a <_printf_float+0x162>
 8005376:	3301      	adds	r3, #1
 8005378:	6123      	str	r3, [r4, #16]
 800537a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800537e:	2b00      	cmp	r3, #0
 8005380:	d09b      	beq.n	80052ba <_printf_float+0xa2>
 8005382:	232d      	movs	r3, #45	; 0x2d
 8005384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005388:	e797      	b.n	80052ba <_printf_float+0xa2>
 800538a:	2947      	cmp	r1, #71	; 0x47
 800538c:	d1bc      	bne.n	8005308 <_printf_float+0xf0>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1ba      	bne.n	8005308 <_printf_float+0xf0>
 8005392:	2301      	movs	r3, #1
 8005394:	e7b7      	b.n	8005306 <_printf_float+0xee>
 8005396:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800539a:	d118      	bne.n	80053ce <_printf_float+0x1b6>
 800539c:	2900      	cmp	r1, #0
 800539e:	6863      	ldr	r3, [r4, #4]
 80053a0:	dd0b      	ble.n	80053ba <_printf_float+0x1a2>
 80053a2:	6121      	str	r1, [r4, #16]
 80053a4:	b913      	cbnz	r3, 80053ac <_printf_float+0x194>
 80053a6:	6822      	ldr	r2, [r4, #0]
 80053a8:	07d0      	lsls	r0, r2, #31
 80053aa:	d502      	bpl.n	80053b2 <_printf_float+0x19a>
 80053ac:	3301      	adds	r3, #1
 80053ae:	440b      	add	r3, r1
 80053b0:	6123      	str	r3, [r4, #16]
 80053b2:	f04f 0a00 	mov.w	sl, #0
 80053b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80053b8:	e7df      	b.n	800537a <_printf_float+0x162>
 80053ba:	b913      	cbnz	r3, 80053c2 <_printf_float+0x1aa>
 80053bc:	6822      	ldr	r2, [r4, #0]
 80053be:	07d2      	lsls	r2, r2, #31
 80053c0:	d501      	bpl.n	80053c6 <_printf_float+0x1ae>
 80053c2:	3302      	adds	r3, #2
 80053c4:	e7f4      	b.n	80053b0 <_printf_float+0x198>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e7f2      	b.n	80053b0 <_printf_float+0x198>
 80053ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80053ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053d0:	4299      	cmp	r1, r3
 80053d2:	db05      	blt.n	80053e0 <_printf_float+0x1c8>
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	6121      	str	r1, [r4, #16]
 80053d8:	07d8      	lsls	r0, r3, #31
 80053da:	d5ea      	bpl.n	80053b2 <_printf_float+0x19a>
 80053dc:	1c4b      	adds	r3, r1, #1
 80053de:	e7e7      	b.n	80053b0 <_printf_float+0x198>
 80053e0:	2900      	cmp	r1, #0
 80053e2:	bfcc      	ite	gt
 80053e4:	2201      	movgt	r2, #1
 80053e6:	f1c1 0202 	rsble	r2, r1, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	e7e0      	b.n	80053b0 <_printf_float+0x198>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	055a      	lsls	r2, r3, #21
 80053f2:	d407      	bmi.n	8005404 <_printf_float+0x1ec>
 80053f4:	6923      	ldr	r3, [r4, #16]
 80053f6:	4642      	mov	r2, r8
 80053f8:	4631      	mov	r1, r6
 80053fa:	4628      	mov	r0, r5
 80053fc:	47b8      	blx	r7
 80053fe:	3001      	adds	r0, #1
 8005400:	d12b      	bne.n	800545a <_printf_float+0x242>
 8005402:	e764      	b.n	80052ce <_printf_float+0xb6>
 8005404:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005408:	f240 80dd 	bls.w	80055c6 <_printf_float+0x3ae>
 800540c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005410:	2200      	movs	r2, #0
 8005412:	2300      	movs	r3, #0
 8005414:	f7fb fac8 	bl	80009a8 <__aeabi_dcmpeq>
 8005418:	2800      	cmp	r0, #0
 800541a:	d033      	beq.n	8005484 <_printf_float+0x26c>
 800541c:	2301      	movs	r3, #1
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	4a35      	ldr	r2, [pc, #212]	; (80054f8 <_printf_float+0x2e0>)
 8005424:	47b8      	blx	r7
 8005426:	3001      	adds	r0, #1
 8005428:	f43f af51 	beq.w	80052ce <_printf_float+0xb6>
 800542c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005430:	429a      	cmp	r2, r3
 8005432:	db02      	blt.n	800543a <_printf_float+0x222>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	07d8      	lsls	r0, r3, #31
 8005438:	d50f      	bpl.n	800545a <_printf_float+0x242>
 800543a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800543e:	4631      	mov	r1, r6
 8005440:	4628      	mov	r0, r5
 8005442:	47b8      	blx	r7
 8005444:	3001      	adds	r0, #1
 8005446:	f43f af42 	beq.w	80052ce <_printf_float+0xb6>
 800544a:	f04f 0800 	mov.w	r8, #0
 800544e:	f104 091a 	add.w	r9, r4, #26
 8005452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005454:	3b01      	subs	r3, #1
 8005456:	4543      	cmp	r3, r8
 8005458:	dc09      	bgt.n	800546e <_printf_float+0x256>
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	079b      	lsls	r3, r3, #30
 800545e:	f100 8102 	bmi.w	8005666 <_printf_float+0x44e>
 8005462:	68e0      	ldr	r0, [r4, #12]
 8005464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005466:	4298      	cmp	r0, r3
 8005468:	bfb8      	it	lt
 800546a:	4618      	movlt	r0, r3
 800546c:	e731      	b.n	80052d2 <_printf_float+0xba>
 800546e:	2301      	movs	r3, #1
 8005470:	464a      	mov	r2, r9
 8005472:	4631      	mov	r1, r6
 8005474:	4628      	mov	r0, r5
 8005476:	47b8      	blx	r7
 8005478:	3001      	adds	r0, #1
 800547a:	f43f af28 	beq.w	80052ce <_printf_float+0xb6>
 800547e:	f108 0801 	add.w	r8, r8, #1
 8005482:	e7e6      	b.n	8005452 <_printf_float+0x23a>
 8005484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005486:	2b00      	cmp	r3, #0
 8005488:	dc38      	bgt.n	80054fc <_printf_float+0x2e4>
 800548a:	2301      	movs	r3, #1
 800548c:	4631      	mov	r1, r6
 800548e:	4628      	mov	r0, r5
 8005490:	4a19      	ldr	r2, [pc, #100]	; (80054f8 <_printf_float+0x2e0>)
 8005492:	47b8      	blx	r7
 8005494:	3001      	adds	r0, #1
 8005496:	f43f af1a 	beq.w	80052ce <_printf_float+0xb6>
 800549a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800549e:	4313      	orrs	r3, r2
 80054a0:	d102      	bne.n	80054a8 <_printf_float+0x290>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	07d9      	lsls	r1, r3, #31
 80054a6:	d5d8      	bpl.n	800545a <_printf_float+0x242>
 80054a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054ac:	4631      	mov	r1, r6
 80054ae:	4628      	mov	r0, r5
 80054b0:	47b8      	blx	r7
 80054b2:	3001      	adds	r0, #1
 80054b4:	f43f af0b 	beq.w	80052ce <_printf_float+0xb6>
 80054b8:	f04f 0900 	mov.w	r9, #0
 80054bc:	f104 0a1a 	add.w	sl, r4, #26
 80054c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054c2:	425b      	negs	r3, r3
 80054c4:	454b      	cmp	r3, r9
 80054c6:	dc01      	bgt.n	80054cc <_printf_float+0x2b4>
 80054c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054ca:	e794      	b.n	80053f6 <_printf_float+0x1de>
 80054cc:	2301      	movs	r3, #1
 80054ce:	4652      	mov	r2, sl
 80054d0:	4631      	mov	r1, r6
 80054d2:	4628      	mov	r0, r5
 80054d4:	47b8      	blx	r7
 80054d6:	3001      	adds	r0, #1
 80054d8:	f43f aef9 	beq.w	80052ce <_printf_float+0xb6>
 80054dc:	f109 0901 	add.w	r9, r9, #1
 80054e0:	e7ee      	b.n	80054c0 <_printf_float+0x2a8>
 80054e2:	bf00      	nop
 80054e4:	7fefffff 	.word	0x7fefffff
 80054e8:	080085ec 	.word	0x080085ec
 80054ec:	080085f0 	.word	0x080085f0
 80054f0:	080085f8 	.word	0x080085f8
 80054f4:	080085f4 	.word	0x080085f4
 80054f8:	080085fc 	.word	0x080085fc
 80054fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005500:	429a      	cmp	r2, r3
 8005502:	bfa8      	it	ge
 8005504:	461a      	movge	r2, r3
 8005506:	2a00      	cmp	r2, #0
 8005508:	4691      	mov	r9, r2
 800550a:	dc37      	bgt.n	800557c <_printf_float+0x364>
 800550c:	f04f 0b00 	mov.w	fp, #0
 8005510:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005514:	f104 021a 	add.w	r2, r4, #26
 8005518:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800551c:	ebaa 0309 	sub.w	r3, sl, r9
 8005520:	455b      	cmp	r3, fp
 8005522:	dc33      	bgt.n	800558c <_printf_float+0x374>
 8005524:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005528:	429a      	cmp	r2, r3
 800552a:	db3b      	blt.n	80055a4 <_printf_float+0x38c>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	07da      	lsls	r2, r3, #31
 8005530:	d438      	bmi.n	80055a4 <_printf_float+0x38c>
 8005532:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005534:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005536:	eba2 030a 	sub.w	r3, r2, sl
 800553a:	eba2 0901 	sub.w	r9, r2, r1
 800553e:	4599      	cmp	r9, r3
 8005540:	bfa8      	it	ge
 8005542:	4699      	movge	r9, r3
 8005544:	f1b9 0f00 	cmp.w	r9, #0
 8005548:	dc34      	bgt.n	80055b4 <_printf_float+0x39c>
 800554a:	f04f 0800 	mov.w	r8, #0
 800554e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005552:	f104 0a1a 	add.w	sl, r4, #26
 8005556:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	eba3 0309 	sub.w	r3, r3, r9
 8005560:	4543      	cmp	r3, r8
 8005562:	f77f af7a 	ble.w	800545a <_printf_float+0x242>
 8005566:	2301      	movs	r3, #1
 8005568:	4652      	mov	r2, sl
 800556a:	4631      	mov	r1, r6
 800556c:	4628      	mov	r0, r5
 800556e:	47b8      	blx	r7
 8005570:	3001      	adds	r0, #1
 8005572:	f43f aeac 	beq.w	80052ce <_printf_float+0xb6>
 8005576:	f108 0801 	add.w	r8, r8, #1
 800557a:	e7ec      	b.n	8005556 <_printf_float+0x33e>
 800557c:	4613      	mov	r3, r2
 800557e:	4631      	mov	r1, r6
 8005580:	4642      	mov	r2, r8
 8005582:	4628      	mov	r0, r5
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	d1c0      	bne.n	800550c <_printf_float+0x2f4>
 800558a:	e6a0      	b.n	80052ce <_printf_float+0xb6>
 800558c:	2301      	movs	r3, #1
 800558e:	4631      	mov	r1, r6
 8005590:	4628      	mov	r0, r5
 8005592:	920b      	str	r2, [sp, #44]	; 0x2c
 8005594:	47b8      	blx	r7
 8005596:	3001      	adds	r0, #1
 8005598:	f43f ae99 	beq.w	80052ce <_printf_float+0xb6>
 800559c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800559e:	f10b 0b01 	add.w	fp, fp, #1
 80055a2:	e7b9      	b.n	8005518 <_printf_float+0x300>
 80055a4:	4631      	mov	r1, r6
 80055a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055aa:	4628      	mov	r0, r5
 80055ac:	47b8      	blx	r7
 80055ae:	3001      	adds	r0, #1
 80055b0:	d1bf      	bne.n	8005532 <_printf_float+0x31a>
 80055b2:	e68c      	b.n	80052ce <_printf_float+0xb6>
 80055b4:	464b      	mov	r3, r9
 80055b6:	4631      	mov	r1, r6
 80055b8:	4628      	mov	r0, r5
 80055ba:	eb08 020a 	add.w	r2, r8, sl
 80055be:	47b8      	blx	r7
 80055c0:	3001      	adds	r0, #1
 80055c2:	d1c2      	bne.n	800554a <_printf_float+0x332>
 80055c4:	e683      	b.n	80052ce <_printf_float+0xb6>
 80055c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055c8:	2a01      	cmp	r2, #1
 80055ca:	dc01      	bgt.n	80055d0 <_printf_float+0x3b8>
 80055cc:	07db      	lsls	r3, r3, #31
 80055ce:	d537      	bpl.n	8005640 <_printf_float+0x428>
 80055d0:	2301      	movs	r3, #1
 80055d2:	4642      	mov	r2, r8
 80055d4:	4631      	mov	r1, r6
 80055d6:	4628      	mov	r0, r5
 80055d8:	47b8      	blx	r7
 80055da:	3001      	adds	r0, #1
 80055dc:	f43f ae77 	beq.w	80052ce <_printf_float+0xb6>
 80055e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055e4:	4631      	mov	r1, r6
 80055e6:	4628      	mov	r0, r5
 80055e8:	47b8      	blx	r7
 80055ea:	3001      	adds	r0, #1
 80055ec:	f43f ae6f 	beq.w	80052ce <_printf_float+0xb6>
 80055f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055f4:	2200      	movs	r2, #0
 80055f6:	2300      	movs	r3, #0
 80055f8:	f7fb f9d6 	bl	80009a8 <__aeabi_dcmpeq>
 80055fc:	b9d8      	cbnz	r0, 8005636 <_printf_float+0x41e>
 80055fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005600:	f108 0201 	add.w	r2, r8, #1
 8005604:	3b01      	subs	r3, #1
 8005606:	4631      	mov	r1, r6
 8005608:	4628      	mov	r0, r5
 800560a:	47b8      	blx	r7
 800560c:	3001      	adds	r0, #1
 800560e:	d10e      	bne.n	800562e <_printf_float+0x416>
 8005610:	e65d      	b.n	80052ce <_printf_float+0xb6>
 8005612:	2301      	movs	r3, #1
 8005614:	464a      	mov	r2, r9
 8005616:	4631      	mov	r1, r6
 8005618:	4628      	mov	r0, r5
 800561a:	47b8      	blx	r7
 800561c:	3001      	adds	r0, #1
 800561e:	f43f ae56 	beq.w	80052ce <_printf_float+0xb6>
 8005622:	f108 0801 	add.w	r8, r8, #1
 8005626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005628:	3b01      	subs	r3, #1
 800562a:	4543      	cmp	r3, r8
 800562c:	dcf1      	bgt.n	8005612 <_printf_float+0x3fa>
 800562e:	4653      	mov	r3, sl
 8005630:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005634:	e6e0      	b.n	80053f8 <_printf_float+0x1e0>
 8005636:	f04f 0800 	mov.w	r8, #0
 800563a:	f104 091a 	add.w	r9, r4, #26
 800563e:	e7f2      	b.n	8005626 <_printf_float+0x40e>
 8005640:	2301      	movs	r3, #1
 8005642:	4642      	mov	r2, r8
 8005644:	e7df      	b.n	8005606 <_printf_float+0x3ee>
 8005646:	2301      	movs	r3, #1
 8005648:	464a      	mov	r2, r9
 800564a:	4631      	mov	r1, r6
 800564c:	4628      	mov	r0, r5
 800564e:	47b8      	blx	r7
 8005650:	3001      	adds	r0, #1
 8005652:	f43f ae3c 	beq.w	80052ce <_printf_float+0xb6>
 8005656:	f108 0801 	add.w	r8, r8, #1
 800565a:	68e3      	ldr	r3, [r4, #12]
 800565c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800565e:	1a5b      	subs	r3, r3, r1
 8005660:	4543      	cmp	r3, r8
 8005662:	dcf0      	bgt.n	8005646 <_printf_float+0x42e>
 8005664:	e6fd      	b.n	8005462 <_printf_float+0x24a>
 8005666:	f04f 0800 	mov.w	r8, #0
 800566a:	f104 0919 	add.w	r9, r4, #25
 800566e:	e7f4      	b.n	800565a <_printf_float+0x442>

08005670 <_printf_common>:
 8005670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005674:	4616      	mov	r6, r2
 8005676:	4699      	mov	r9, r3
 8005678:	688a      	ldr	r2, [r1, #8]
 800567a:	690b      	ldr	r3, [r1, #16]
 800567c:	4607      	mov	r7, r0
 800567e:	4293      	cmp	r3, r2
 8005680:	bfb8      	it	lt
 8005682:	4613      	movlt	r3, r2
 8005684:	6033      	str	r3, [r6, #0]
 8005686:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800568a:	460c      	mov	r4, r1
 800568c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005690:	b10a      	cbz	r2, 8005696 <_printf_common+0x26>
 8005692:	3301      	adds	r3, #1
 8005694:	6033      	str	r3, [r6, #0]
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	0699      	lsls	r1, r3, #26
 800569a:	bf42      	ittt	mi
 800569c:	6833      	ldrmi	r3, [r6, #0]
 800569e:	3302      	addmi	r3, #2
 80056a0:	6033      	strmi	r3, [r6, #0]
 80056a2:	6825      	ldr	r5, [r4, #0]
 80056a4:	f015 0506 	ands.w	r5, r5, #6
 80056a8:	d106      	bne.n	80056b8 <_printf_common+0x48>
 80056aa:	f104 0a19 	add.w	sl, r4, #25
 80056ae:	68e3      	ldr	r3, [r4, #12]
 80056b0:	6832      	ldr	r2, [r6, #0]
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	42ab      	cmp	r3, r5
 80056b6:	dc28      	bgt.n	800570a <_printf_common+0x9a>
 80056b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056bc:	1e13      	subs	r3, r2, #0
 80056be:	6822      	ldr	r2, [r4, #0]
 80056c0:	bf18      	it	ne
 80056c2:	2301      	movne	r3, #1
 80056c4:	0692      	lsls	r2, r2, #26
 80056c6:	d42d      	bmi.n	8005724 <_printf_common+0xb4>
 80056c8:	4649      	mov	r1, r9
 80056ca:	4638      	mov	r0, r7
 80056cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056d0:	47c0      	blx	r8
 80056d2:	3001      	adds	r0, #1
 80056d4:	d020      	beq.n	8005718 <_printf_common+0xa8>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	68e5      	ldr	r5, [r4, #12]
 80056da:	f003 0306 	and.w	r3, r3, #6
 80056de:	2b04      	cmp	r3, #4
 80056e0:	bf18      	it	ne
 80056e2:	2500      	movne	r5, #0
 80056e4:	6832      	ldr	r2, [r6, #0]
 80056e6:	f04f 0600 	mov.w	r6, #0
 80056ea:	68a3      	ldr	r3, [r4, #8]
 80056ec:	bf08      	it	eq
 80056ee:	1aad      	subeq	r5, r5, r2
 80056f0:	6922      	ldr	r2, [r4, #16]
 80056f2:	bf08      	it	eq
 80056f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056f8:	4293      	cmp	r3, r2
 80056fa:	bfc4      	itt	gt
 80056fc:	1a9b      	subgt	r3, r3, r2
 80056fe:	18ed      	addgt	r5, r5, r3
 8005700:	341a      	adds	r4, #26
 8005702:	42b5      	cmp	r5, r6
 8005704:	d11a      	bne.n	800573c <_printf_common+0xcc>
 8005706:	2000      	movs	r0, #0
 8005708:	e008      	b.n	800571c <_printf_common+0xac>
 800570a:	2301      	movs	r3, #1
 800570c:	4652      	mov	r2, sl
 800570e:	4649      	mov	r1, r9
 8005710:	4638      	mov	r0, r7
 8005712:	47c0      	blx	r8
 8005714:	3001      	adds	r0, #1
 8005716:	d103      	bne.n	8005720 <_printf_common+0xb0>
 8005718:	f04f 30ff 	mov.w	r0, #4294967295
 800571c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005720:	3501      	adds	r5, #1
 8005722:	e7c4      	b.n	80056ae <_printf_common+0x3e>
 8005724:	2030      	movs	r0, #48	; 0x30
 8005726:	18e1      	adds	r1, r4, r3
 8005728:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005732:	4422      	add	r2, r4
 8005734:	3302      	adds	r3, #2
 8005736:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800573a:	e7c5      	b.n	80056c8 <_printf_common+0x58>
 800573c:	2301      	movs	r3, #1
 800573e:	4622      	mov	r2, r4
 8005740:	4649      	mov	r1, r9
 8005742:	4638      	mov	r0, r7
 8005744:	47c0      	blx	r8
 8005746:	3001      	adds	r0, #1
 8005748:	d0e6      	beq.n	8005718 <_printf_common+0xa8>
 800574a:	3601      	adds	r6, #1
 800574c:	e7d9      	b.n	8005702 <_printf_common+0x92>
	...

08005750 <_printf_i>:
 8005750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005754:	460c      	mov	r4, r1
 8005756:	7e27      	ldrb	r7, [r4, #24]
 8005758:	4691      	mov	r9, r2
 800575a:	2f78      	cmp	r7, #120	; 0x78
 800575c:	4680      	mov	r8, r0
 800575e:	469a      	mov	sl, r3
 8005760:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005762:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005766:	d807      	bhi.n	8005778 <_printf_i+0x28>
 8005768:	2f62      	cmp	r7, #98	; 0x62
 800576a:	d80a      	bhi.n	8005782 <_printf_i+0x32>
 800576c:	2f00      	cmp	r7, #0
 800576e:	f000 80d9 	beq.w	8005924 <_printf_i+0x1d4>
 8005772:	2f58      	cmp	r7, #88	; 0x58
 8005774:	f000 80a4 	beq.w	80058c0 <_printf_i+0x170>
 8005778:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800577c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005780:	e03a      	b.n	80057f8 <_printf_i+0xa8>
 8005782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005786:	2b15      	cmp	r3, #21
 8005788:	d8f6      	bhi.n	8005778 <_printf_i+0x28>
 800578a:	a001      	add	r0, pc, #4	; (adr r0, 8005790 <_printf_i+0x40>)
 800578c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005790:	080057e9 	.word	0x080057e9
 8005794:	080057fd 	.word	0x080057fd
 8005798:	08005779 	.word	0x08005779
 800579c:	08005779 	.word	0x08005779
 80057a0:	08005779 	.word	0x08005779
 80057a4:	08005779 	.word	0x08005779
 80057a8:	080057fd 	.word	0x080057fd
 80057ac:	08005779 	.word	0x08005779
 80057b0:	08005779 	.word	0x08005779
 80057b4:	08005779 	.word	0x08005779
 80057b8:	08005779 	.word	0x08005779
 80057bc:	0800590b 	.word	0x0800590b
 80057c0:	0800582d 	.word	0x0800582d
 80057c4:	080058ed 	.word	0x080058ed
 80057c8:	08005779 	.word	0x08005779
 80057cc:	08005779 	.word	0x08005779
 80057d0:	0800592d 	.word	0x0800592d
 80057d4:	08005779 	.word	0x08005779
 80057d8:	0800582d 	.word	0x0800582d
 80057dc:	08005779 	.word	0x08005779
 80057e0:	08005779 	.word	0x08005779
 80057e4:	080058f5 	.word	0x080058f5
 80057e8:	680b      	ldr	r3, [r1, #0]
 80057ea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057ee:	1d1a      	adds	r2, r3, #4
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	600a      	str	r2, [r1, #0]
 80057f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0a4      	b.n	8005946 <_printf_i+0x1f6>
 80057fc:	6825      	ldr	r5, [r4, #0]
 80057fe:	6808      	ldr	r0, [r1, #0]
 8005800:	062e      	lsls	r6, r5, #24
 8005802:	f100 0304 	add.w	r3, r0, #4
 8005806:	d50a      	bpl.n	800581e <_printf_i+0xce>
 8005808:	6805      	ldr	r5, [r0, #0]
 800580a:	600b      	str	r3, [r1, #0]
 800580c:	2d00      	cmp	r5, #0
 800580e:	da03      	bge.n	8005818 <_printf_i+0xc8>
 8005810:	232d      	movs	r3, #45	; 0x2d
 8005812:	426d      	negs	r5, r5
 8005814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005818:	230a      	movs	r3, #10
 800581a:	485e      	ldr	r0, [pc, #376]	; (8005994 <_printf_i+0x244>)
 800581c:	e019      	b.n	8005852 <_printf_i+0x102>
 800581e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005822:	6805      	ldr	r5, [r0, #0]
 8005824:	600b      	str	r3, [r1, #0]
 8005826:	bf18      	it	ne
 8005828:	b22d      	sxthne	r5, r5
 800582a:	e7ef      	b.n	800580c <_printf_i+0xbc>
 800582c:	680b      	ldr	r3, [r1, #0]
 800582e:	6825      	ldr	r5, [r4, #0]
 8005830:	1d18      	adds	r0, r3, #4
 8005832:	6008      	str	r0, [r1, #0]
 8005834:	0628      	lsls	r0, r5, #24
 8005836:	d501      	bpl.n	800583c <_printf_i+0xec>
 8005838:	681d      	ldr	r5, [r3, #0]
 800583a:	e002      	b.n	8005842 <_printf_i+0xf2>
 800583c:	0669      	lsls	r1, r5, #25
 800583e:	d5fb      	bpl.n	8005838 <_printf_i+0xe8>
 8005840:	881d      	ldrh	r5, [r3, #0]
 8005842:	2f6f      	cmp	r7, #111	; 0x6f
 8005844:	bf0c      	ite	eq
 8005846:	2308      	moveq	r3, #8
 8005848:	230a      	movne	r3, #10
 800584a:	4852      	ldr	r0, [pc, #328]	; (8005994 <_printf_i+0x244>)
 800584c:	2100      	movs	r1, #0
 800584e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005852:	6866      	ldr	r6, [r4, #4]
 8005854:	2e00      	cmp	r6, #0
 8005856:	bfa8      	it	ge
 8005858:	6821      	ldrge	r1, [r4, #0]
 800585a:	60a6      	str	r6, [r4, #8]
 800585c:	bfa4      	itt	ge
 800585e:	f021 0104 	bicge.w	r1, r1, #4
 8005862:	6021      	strge	r1, [r4, #0]
 8005864:	b90d      	cbnz	r5, 800586a <_printf_i+0x11a>
 8005866:	2e00      	cmp	r6, #0
 8005868:	d04d      	beq.n	8005906 <_printf_i+0x1b6>
 800586a:	4616      	mov	r6, r2
 800586c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005870:	fb03 5711 	mls	r7, r3, r1, r5
 8005874:	5dc7      	ldrb	r7, [r0, r7]
 8005876:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800587a:	462f      	mov	r7, r5
 800587c:	42bb      	cmp	r3, r7
 800587e:	460d      	mov	r5, r1
 8005880:	d9f4      	bls.n	800586c <_printf_i+0x11c>
 8005882:	2b08      	cmp	r3, #8
 8005884:	d10b      	bne.n	800589e <_printf_i+0x14e>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	07df      	lsls	r7, r3, #31
 800588a:	d508      	bpl.n	800589e <_printf_i+0x14e>
 800588c:	6923      	ldr	r3, [r4, #16]
 800588e:	6861      	ldr	r1, [r4, #4]
 8005890:	4299      	cmp	r1, r3
 8005892:	bfde      	ittt	le
 8005894:	2330      	movle	r3, #48	; 0x30
 8005896:	f806 3c01 	strble.w	r3, [r6, #-1]
 800589a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800589e:	1b92      	subs	r2, r2, r6
 80058a0:	6122      	str	r2, [r4, #16]
 80058a2:	464b      	mov	r3, r9
 80058a4:	4621      	mov	r1, r4
 80058a6:	4640      	mov	r0, r8
 80058a8:	f8cd a000 	str.w	sl, [sp]
 80058ac:	aa03      	add	r2, sp, #12
 80058ae:	f7ff fedf 	bl	8005670 <_printf_common>
 80058b2:	3001      	adds	r0, #1
 80058b4:	d14c      	bne.n	8005950 <_printf_i+0x200>
 80058b6:	f04f 30ff 	mov.w	r0, #4294967295
 80058ba:	b004      	add	sp, #16
 80058bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c0:	4834      	ldr	r0, [pc, #208]	; (8005994 <_printf_i+0x244>)
 80058c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058c6:	680e      	ldr	r6, [r1, #0]
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80058ce:	061f      	lsls	r7, r3, #24
 80058d0:	600e      	str	r6, [r1, #0]
 80058d2:	d514      	bpl.n	80058fe <_printf_i+0x1ae>
 80058d4:	07d9      	lsls	r1, r3, #31
 80058d6:	bf44      	itt	mi
 80058d8:	f043 0320 	orrmi.w	r3, r3, #32
 80058dc:	6023      	strmi	r3, [r4, #0]
 80058de:	b91d      	cbnz	r5, 80058e8 <_printf_i+0x198>
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	f023 0320 	bic.w	r3, r3, #32
 80058e6:	6023      	str	r3, [r4, #0]
 80058e8:	2310      	movs	r3, #16
 80058ea:	e7af      	b.n	800584c <_printf_i+0xfc>
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	f043 0320 	orr.w	r3, r3, #32
 80058f2:	6023      	str	r3, [r4, #0]
 80058f4:	2378      	movs	r3, #120	; 0x78
 80058f6:	4828      	ldr	r0, [pc, #160]	; (8005998 <_printf_i+0x248>)
 80058f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058fc:	e7e3      	b.n	80058c6 <_printf_i+0x176>
 80058fe:	065e      	lsls	r6, r3, #25
 8005900:	bf48      	it	mi
 8005902:	b2ad      	uxthmi	r5, r5
 8005904:	e7e6      	b.n	80058d4 <_printf_i+0x184>
 8005906:	4616      	mov	r6, r2
 8005908:	e7bb      	b.n	8005882 <_printf_i+0x132>
 800590a:	680b      	ldr	r3, [r1, #0]
 800590c:	6826      	ldr	r6, [r4, #0]
 800590e:	1d1d      	adds	r5, r3, #4
 8005910:	6960      	ldr	r0, [r4, #20]
 8005912:	600d      	str	r5, [r1, #0]
 8005914:	0635      	lsls	r5, r6, #24
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	d501      	bpl.n	800591e <_printf_i+0x1ce>
 800591a:	6018      	str	r0, [r3, #0]
 800591c:	e002      	b.n	8005924 <_printf_i+0x1d4>
 800591e:	0671      	lsls	r1, r6, #25
 8005920:	d5fb      	bpl.n	800591a <_printf_i+0x1ca>
 8005922:	8018      	strh	r0, [r3, #0]
 8005924:	2300      	movs	r3, #0
 8005926:	4616      	mov	r6, r2
 8005928:	6123      	str	r3, [r4, #16]
 800592a:	e7ba      	b.n	80058a2 <_printf_i+0x152>
 800592c:	680b      	ldr	r3, [r1, #0]
 800592e:	1d1a      	adds	r2, r3, #4
 8005930:	600a      	str	r2, [r1, #0]
 8005932:	681e      	ldr	r6, [r3, #0]
 8005934:	2100      	movs	r1, #0
 8005936:	4630      	mov	r0, r6
 8005938:	6862      	ldr	r2, [r4, #4]
 800593a:	f000 ff9f 	bl	800687c <memchr>
 800593e:	b108      	cbz	r0, 8005944 <_printf_i+0x1f4>
 8005940:	1b80      	subs	r0, r0, r6
 8005942:	6060      	str	r0, [r4, #4]
 8005944:	6863      	ldr	r3, [r4, #4]
 8005946:	6123      	str	r3, [r4, #16]
 8005948:	2300      	movs	r3, #0
 800594a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800594e:	e7a8      	b.n	80058a2 <_printf_i+0x152>
 8005950:	4632      	mov	r2, r6
 8005952:	4649      	mov	r1, r9
 8005954:	4640      	mov	r0, r8
 8005956:	6923      	ldr	r3, [r4, #16]
 8005958:	47d0      	blx	sl
 800595a:	3001      	adds	r0, #1
 800595c:	d0ab      	beq.n	80058b6 <_printf_i+0x166>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	079b      	lsls	r3, r3, #30
 8005962:	d413      	bmi.n	800598c <_printf_i+0x23c>
 8005964:	68e0      	ldr	r0, [r4, #12]
 8005966:	9b03      	ldr	r3, [sp, #12]
 8005968:	4298      	cmp	r0, r3
 800596a:	bfb8      	it	lt
 800596c:	4618      	movlt	r0, r3
 800596e:	e7a4      	b.n	80058ba <_printf_i+0x16a>
 8005970:	2301      	movs	r3, #1
 8005972:	4632      	mov	r2, r6
 8005974:	4649      	mov	r1, r9
 8005976:	4640      	mov	r0, r8
 8005978:	47d0      	blx	sl
 800597a:	3001      	adds	r0, #1
 800597c:	d09b      	beq.n	80058b6 <_printf_i+0x166>
 800597e:	3501      	adds	r5, #1
 8005980:	68e3      	ldr	r3, [r4, #12]
 8005982:	9903      	ldr	r1, [sp, #12]
 8005984:	1a5b      	subs	r3, r3, r1
 8005986:	42ab      	cmp	r3, r5
 8005988:	dcf2      	bgt.n	8005970 <_printf_i+0x220>
 800598a:	e7eb      	b.n	8005964 <_printf_i+0x214>
 800598c:	2500      	movs	r5, #0
 800598e:	f104 0619 	add.w	r6, r4, #25
 8005992:	e7f5      	b.n	8005980 <_printf_i+0x230>
 8005994:	080085fe 	.word	0x080085fe
 8005998:	0800860f 	.word	0x0800860f

0800599c <_sbrk_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	2300      	movs	r3, #0
 80059a0:	4d05      	ldr	r5, [pc, #20]	; (80059b8 <_sbrk_r+0x1c>)
 80059a2:	4604      	mov	r4, r0
 80059a4:	4608      	mov	r0, r1
 80059a6:	602b      	str	r3, [r5, #0]
 80059a8:	f7fc f84c 	bl	8001a44 <_sbrk>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d102      	bne.n	80059b6 <_sbrk_r+0x1a>
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	b103      	cbz	r3, 80059b6 <_sbrk_r+0x1a>
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	20001730 	.word	0x20001730

080059bc <siprintf>:
 80059bc:	b40e      	push	{r1, r2, r3}
 80059be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059c2:	b500      	push	{lr}
 80059c4:	b09c      	sub	sp, #112	; 0x70
 80059c6:	ab1d      	add	r3, sp, #116	; 0x74
 80059c8:	9002      	str	r0, [sp, #8]
 80059ca:	9006      	str	r0, [sp, #24]
 80059cc:	9107      	str	r1, [sp, #28]
 80059ce:	9104      	str	r1, [sp, #16]
 80059d0:	4808      	ldr	r0, [pc, #32]	; (80059f4 <siprintf+0x38>)
 80059d2:	4909      	ldr	r1, [pc, #36]	; (80059f8 <siprintf+0x3c>)
 80059d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80059d8:	9105      	str	r1, [sp, #20]
 80059da:	6800      	ldr	r0, [r0, #0]
 80059dc:	a902      	add	r1, sp, #8
 80059de:	9301      	str	r3, [sp, #4]
 80059e0:	f001 fb78 	bl	80070d4 <_svfiprintf_r>
 80059e4:	2200      	movs	r2, #0
 80059e6:	9b02      	ldr	r3, [sp, #8]
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	b01c      	add	sp, #112	; 0x70
 80059ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80059f0:	b003      	add	sp, #12
 80059f2:	4770      	bx	lr
 80059f4:	20000014 	.word	0x20000014
 80059f8:	ffff0208 	.word	0xffff0208

080059fc <__sread>:
 80059fc:	b510      	push	{r4, lr}
 80059fe:	460c      	mov	r4, r1
 8005a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a04:	f001 fc66 	bl	80072d4 <_read_r>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	bfab      	itete	ge
 8005a0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a0e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a10:	181b      	addge	r3, r3, r0
 8005a12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a16:	bfac      	ite	ge
 8005a18:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a1a:	81a3      	strhlt	r3, [r4, #12]
 8005a1c:	bd10      	pop	{r4, pc}

08005a1e <__swrite>:
 8005a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a22:	461f      	mov	r7, r3
 8005a24:	898b      	ldrh	r3, [r1, #12]
 8005a26:	4605      	mov	r5, r0
 8005a28:	05db      	lsls	r3, r3, #23
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	4616      	mov	r6, r2
 8005a2e:	d505      	bpl.n	8005a3c <__swrite+0x1e>
 8005a30:	2302      	movs	r3, #2
 8005a32:	2200      	movs	r2, #0
 8005a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a38:	f000 fefc 	bl	8006834 <_lseek_r>
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	4632      	mov	r2, r6
 8005a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a44:	81a3      	strh	r3, [r4, #12]
 8005a46:	4628      	mov	r0, r5
 8005a48:	463b      	mov	r3, r7
 8005a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a52:	f000 b84d 	b.w	8005af0 <_write_r>

08005a56 <__sseek>:
 8005a56:	b510      	push	{r4, lr}
 8005a58:	460c      	mov	r4, r1
 8005a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a5e:	f000 fee9 	bl	8006834 <_lseek_r>
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	89a3      	ldrh	r3, [r4, #12]
 8005a66:	bf15      	itete	ne
 8005a68:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a72:	81a3      	strheq	r3, [r4, #12]
 8005a74:	bf18      	it	ne
 8005a76:	81a3      	strhne	r3, [r4, #12]
 8005a78:	bd10      	pop	{r4, pc}

08005a7a <__sclose>:
 8005a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7e:	f000 b849 	b.w	8005b14 <_close_r>

08005a82 <strstr>:
 8005a82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a84:	780c      	ldrb	r4, [r1, #0]
 8005a86:	b164      	cbz	r4, 8005aa2 <strstr+0x20>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	1c5e      	adds	r6, r3, #1
 8005a90:	b90a      	cbnz	r2, 8005a96 <strstr+0x14>
 8005a92:	4610      	mov	r0, r2
 8005a94:	e005      	b.n	8005aa2 <strstr+0x20>
 8005a96:	4294      	cmp	r4, r2
 8005a98:	d108      	bne.n	8005aac <strstr+0x2a>
 8005a9a:	460d      	mov	r5, r1
 8005a9c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005aa0:	b902      	cbnz	r2, 8005aa4 <strstr+0x22>
 8005aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005aa8:	4297      	cmp	r7, r2
 8005aaa:	d0f7      	beq.n	8005a9c <strstr+0x1a>
 8005aac:	4633      	mov	r3, r6
 8005aae:	e7ec      	b.n	8005a8a <strstr+0x8>

08005ab0 <_vsiprintf_r>:
 8005ab0:	b500      	push	{lr}
 8005ab2:	b09b      	sub	sp, #108	; 0x6c
 8005ab4:	9100      	str	r1, [sp, #0]
 8005ab6:	9104      	str	r1, [sp, #16]
 8005ab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005abc:	9105      	str	r1, [sp, #20]
 8005abe:	9102      	str	r1, [sp, #8]
 8005ac0:	4905      	ldr	r1, [pc, #20]	; (8005ad8 <_vsiprintf_r+0x28>)
 8005ac2:	9103      	str	r1, [sp, #12]
 8005ac4:	4669      	mov	r1, sp
 8005ac6:	f001 fb05 	bl	80070d4 <_svfiprintf_r>
 8005aca:	2200      	movs	r2, #0
 8005acc:	9b00      	ldr	r3, [sp, #0]
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	b01b      	add	sp, #108	; 0x6c
 8005ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ad6:	bf00      	nop
 8005ad8:	ffff0208 	.word	0xffff0208

08005adc <vsiprintf>:
 8005adc:	4613      	mov	r3, r2
 8005ade:	460a      	mov	r2, r1
 8005ae0:	4601      	mov	r1, r0
 8005ae2:	4802      	ldr	r0, [pc, #8]	; (8005aec <vsiprintf+0x10>)
 8005ae4:	6800      	ldr	r0, [r0, #0]
 8005ae6:	f7ff bfe3 	b.w	8005ab0 <_vsiprintf_r>
 8005aea:	bf00      	nop
 8005aec:	20000014 	.word	0x20000014

08005af0 <_write_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	4604      	mov	r4, r0
 8005af4:	4608      	mov	r0, r1
 8005af6:	4611      	mov	r1, r2
 8005af8:	2200      	movs	r2, #0
 8005afa:	4d05      	ldr	r5, [pc, #20]	; (8005b10 <_write_r+0x20>)
 8005afc:	602a      	str	r2, [r5, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	f7fb ff54 	bl	80019ac <_write>
 8005b04:	1c43      	adds	r3, r0, #1
 8005b06:	d102      	bne.n	8005b0e <_write_r+0x1e>
 8005b08:	682b      	ldr	r3, [r5, #0]
 8005b0a:	b103      	cbz	r3, 8005b0e <_write_r+0x1e>
 8005b0c:	6023      	str	r3, [r4, #0]
 8005b0e:	bd38      	pop	{r3, r4, r5, pc}
 8005b10:	20001730 	.word	0x20001730

08005b14 <_close_r>:
 8005b14:	b538      	push	{r3, r4, r5, lr}
 8005b16:	2300      	movs	r3, #0
 8005b18:	4d05      	ldr	r5, [pc, #20]	; (8005b30 <_close_r+0x1c>)
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	602b      	str	r3, [r5, #0]
 8005b20:	f7fb ff60 	bl	80019e4 <_close>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d102      	bne.n	8005b2e <_close_r+0x1a>
 8005b28:	682b      	ldr	r3, [r5, #0]
 8005b2a:	b103      	cbz	r3, 8005b2e <_close_r+0x1a>
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
 8005b30:	20001730 	.word	0x20001730

08005b34 <quorem>:
 8005b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b38:	6903      	ldr	r3, [r0, #16]
 8005b3a:	690c      	ldr	r4, [r1, #16]
 8005b3c:	4607      	mov	r7, r0
 8005b3e:	42a3      	cmp	r3, r4
 8005b40:	f2c0 8083 	blt.w	8005c4a <quorem+0x116>
 8005b44:	3c01      	subs	r4, #1
 8005b46:	f100 0514 	add.w	r5, r0, #20
 8005b4a:	f101 0814 	add.w	r8, r1, #20
 8005b4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b52:	9301      	str	r3, [sp, #4]
 8005b54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b6c:	d332      	bcc.n	8005bd4 <quorem+0xa0>
 8005b6e:	f04f 0e00 	mov.w	lr, #0
 8005b72:	4640      	mov	r0, r8
 8005b74:	46ac      	mov	ip, r5
 8005b76:	46f2      	mov	sl, lr
 8005b78:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b7c:	b293      	uxth	r3, r2
 8005b7e:	fb06 e303 	mla	r3, r6, r3, lr
 8005b82:	0c12      	lsrs	r2, r2, #16
 8005b84:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005b88:	fb06 e202 	mla	r2, r6, r2, lr
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	ebaa 0303 	sub.w	r3, sl, r3
 8005b92:	f8dc a000 	ldr.w	sl, [ip]
 8005b96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b9a:	fa1f fa8a 	uxth.w	sl, sl
 8005b9e:	4453      	add	r3, sl
 8005ba0:	fa1f fa82 	uxth.w	sl, r2
 8005ba4:	f8dc 2000 	ldr.w	r2, [ip]
 8005ba8:	4581      	cmp	r9, r0
 8005baa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005bae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bb8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005bbc:	f84c 3b04 	str.w	r3, [ip], #4
 8005bc0:	d2da      	bcs.n	8005b78 <quorem+0x44>
 8005bc2:	f855 300b 	ldr.w	r3, [r5, fp]
 8005bc6:	b92b      	cbnz	r3, 8005bd4 <quorem+0xa0>
 8005bc8:	9b01      	ldr	r3, [sp, #4]
 8005bca:	3b04      	subs	r3, #4
 8005bcc:	429d      	cmp	r5, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	d32f      	bcc.n	8005c32 <quorem+0xfe>
 8005bd2:	613c      	str	r4, [r7, #16]
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	f001 f8e5 	bl	8006da4 <__mcmp>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	db25      	blt.n	8005c2a <quorem+0xf6>
 8005bde:	4628      	mov	r0, r5
 8005be0:	f04f 0c00 	mov.w	ip, #0
 8005be4:	3601      	adds	r6, #1
 8005be6:	f858 1b04 	ldr.w	r1, [r8], #4
 8005bea:	f8d0 e000 	ldr.w	lr, [r0]
 8005bee:	b28b      	uxth	r3, r1
 8005bf0:	ebac 0303 	sub.w	r3, ip, r3
 8005bf4:	fa1f f28e 	uxth.w	r2, lr
 8005bf8:	4413      	add	r3, r2
 8005bfa:	0c0a      	lsrs	r2, r1, #16
 8005bfc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c0a:	45c1      	cmp	r9, r8
 8005c0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c10:	f840 3b04 	str.w	r3, [r0], #4
 8005c14:	d2e7      	bcs.n	8005be6 <quorem+0xb2>
 8005c16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c1e:	b922      	cbnz	r2, 8005c2a <quorem+0xf6>
 8005c20:	3b04      	subs	r3, #4
 8005c22:	429d      	cmp	r5, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	d30a      	bcc.n	8005c3e <quorem+0x10a>
 8005c28:	613c      	str	r4, [r7, #16]
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	b003      	add	sp, #12
 8005c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	3b04      	subs	r3, #4
 8005c36:	2a00      	cmp	r2, #0
 8005c38:	d1cb      	bne.n	8005bd2 <quorem+0x9e>
 8005c3a:	3c01      	subs	r4, #1
 8005c3c:	e7c6      	b.n	8005bcc <quorem+0x98>
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	3b04      	subs	r3, #4
 8005c42:	2a00      	cmp	r2, #0
 8005c44:	d1f0      	bne.n	8005c28 <quorem+0xf4>
 8005c46:	3c01      	subs	r4, #1
 8005c48:	e7eb      	b.n	8005c22 <quorem+0xee>
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	e7ee      	b.n	8005c2c <quorem+0xf8>
	...

08005c50 <_dtoa_r>:
 8005c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c54:	4616      	mov	r6, r2
 8005c56:	461f      	mov	r7, r3
 8005c58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005c5a:	b099      	sub	sp, #100	; 0x64
 8005c5c:	4605      	mov	r5, r0
 8005c5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005c62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005c66:	b974      	cbnz	r4, 8005c86 <_dtoa_r+0x36>
 8005c68:	2010      	movs	r0, #16
 8005c6a:	f7ff f973 	bl	8004f54 <malloc>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	6268      	str	r0, [r5, #36]	; 0x24
 8005c72:	b920      	cbnz	r0, 8005c7e <_dtoa_r+0x2e>
 8005c74:	21ea      	movs	r1, #234	; 0xea
 8005c76:	4bae      	ldr	r3, [pc, #696]	; (8005f30 <_dtoa_r+0x2e0>)
 8005c78:	48ae      	ldr	r0, [pc, #696]	; (8005f34 <_dtoa_r+0x2e4>)
 8005c7a:	f001 fb4b 	bl	8007314 <__assert_func>
 8005c7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c82:	6004      	str	r4, [r0, #0]
 8005c84:	60c4      	str	r4, [r0, #12]
 8005c86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c88:	6819      	ldr	r1, [r3, #0]
 8005c8a:	b151      	cbz	r1, 8005ca2 <_dtoa_r+0x52>
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	2301      	movs	r3, #1
 8005c90:	4093      	lsls	r3, r2
 8005c92:	604a      	str	r2, [r1, #4]
 8005c94:	608b      	str	r3, [r1, #8]
 8005c96:	4628      	mov	r0, r5
 8005c98:	f000 fe4a 	bl	8006930 <_Bfree>
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	1e3b      	subs	r3, r7, #0
 8005ca4:	bfaf      	iteee	ge
 8005ca6:	2300      	movge	r3, #0
 8005ca8:	2201      	movlt	r2, #1
 8005caa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005cae:	9305      	strlt	r3, [sp, #20]
 8005cb0:	bfa8      	it	ge
 8005cb2:	f8c8 3000 	strge.w	r3, [r8]
 8005cb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005cba:	4b9f      	ldr	r3, [pc, #636]	; (8005f38 <_dtoa_r+0x2e8>)
 8005cbc:	bfb8      	it	lt
 8005cbe:	f8c8 2000 	strlt.w	r2, [r8]
 8005cc2:	ea33 0309 	bics.w	r3, r3, r9
 8005cc6:	d119      	bne.n	8005cfc <_dtoa_r+0xac>
 8005cc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ccc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005cd4:	4333      	orrs	r3, r6
 8005cd6:	f000 8580 	beq.w	80067da <_dtoa_r+0xb8a>
 8005cda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cdc:	b953      	cbnz	r3, 8005cf4 <_dtoa_r+0xa4>
 8005cde:	4b97      	ldr	r3, [pc, #604]	; (8005f3c <_dtoa_r+0x2ec>)
 8005ce0:	e022      	b.n	8005d28 <_dtoa_r+0xd8>
 8005ce2:	4b97      	ldr	r3, [pc, #604]	; (8005f40 <_dtoa_r+0x2f0>)
 8005ce4:	9308      	str	r3, [sp, #32]
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	9808      	ldr	r0, [sp, #32]
 8005cee:	b019      	add	sp, #100	; 0x64
 8005cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf4:	4b91      	ldr	r3, [pc, #580]	; (8005f3c <_dtoa_r+0x2ec>)
 8005cf6:	9308      	str	r3, [sp, #32]
 8005cf8:	3303      	adds	r3, #3
 8005cfa:	e7f5      	b.n	8005ce8 <_dtoa_r+0x98>
 8005cfc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005d04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f7fa fe4c 	bl	80009a8 <__aeabi_dcmpeq>
 8005d10:	4680      	mov	r8, r0
 8005d12:	b158      	cbz	r0, 8005d2c <_dtoa_r+0xdc>
 8005d14:	2301      	movs	r3, #1
 8005d16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8559 	beq.w	80067d4 <_dtoa_r+0xb84>
 8005d22:	4888      	ldr	r0, [pc, #544]	; (8005f44 <_dtoa_r+0x2f4>)
 8005d24:	6018      	str	r0, [r3, #0]
 8005d26:	1e43      	subs	r3, r0, #1
 8005d28:	9308      	str	r3, [sp, #32]
 8005d2a:	e7df      	b.n	8005cec <_dtoa_r+0x9c>
 8005d2c:	ab16      	add	r3, sp, #88	; 0x58
 8005d2e:	9301      	str	r3, [sp, #4]
 8005d30:	ab17      	add	r3, sp, #92	; 0x5c
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	4628      	mov	r0, r5
 8005d36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d3a:	f001 f8df 	bl	8006efc <__d2b>
 8005d3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005d42:	4682      	mov	sl, r0
 8005d44:	2c00      	cmp	r4, #0
 8005d46:	d07e      	beq.n	8005e46 <_dtoa_r+0x1f6>
 8005d48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005d52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005d5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005d5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005d62:	2200      	movs	r2, #0
 8005d64:	4b78      	ldr	r3, [pc, #480]	; (8005f48 <_dtoa_r+0x2f8>)
 8005d66:	f7fa f9ff 	bl	8000168 <__aeabi_dsub>
 8005d6a:	a36b      	add	r3, pc, #428	; (adr r3, 8005f18 <_dtoa_r+0x2c8>)
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	f7fa fbb2 	bl	80004d8 <__aeabi_dmul>
 8005d74:	a36a      	add	r3, pc, #424	; (adr r3, 8005f20 <_dtoa_r+0x2d0>)
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f7fa f9f7 	bl	800016c <__adddf3>
 8005d7e:	4606      	mov	r6, r0
 8005d80:	4620      	mov	r0, r4
 8005d82:	460f      	mov	r7, r1
 8005d84:	f7fa fb3e 	bl	8000404 <__aeabi_i2d>
 8005d88:	a367      	add	r3, pc, #412	; (adr r3, 8005f28 <_dtoa_r+0x2d8>)
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	f7fa fba3 	bl	80004d8 <__aeabi_dmul>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4630      	mov	r0, r6
 8005d98:	4639      	mov	r1, r7
 8005d9a:	f7fa f9e7 	bl	800016c <__adddf3>
 8005d9e:	4606      	mov	r6, r0
 8005da0:	460f      	mov	r7, r1
 8005da2:	f7fa fe49 	bl	8000a38 <__aeabi_d2iz>
 8005da6:	2200      	movs	r2, #0
 8005da8:	4681      	mov	r9, r0
 8005daa:	2300      	movs	r3, #0
 8005dac:	4630      	mov	r0, r6
 8005dae:	4639      	mov	r1, r7
 8005db0:	f7fa fe04 	bl	80009bc <__aeabi_dcmplt>
 8005db4:	b148      	cbz	r0, 8005dca <_dtoa_r+0x17a>
 8005db6:	4648      	mov	r0, r9
 8005db8:	f7fa fb24 	bl	8000404 <__aeabi_i2d>
 8005dbc:	4632      	mov	r2, r6
 8005dbe:	463b      	mov	r3, r7
 8005dc0:	f7fa fdf2 	bl	80009a8 <__aeabi_dcmpeq>
 8005dc4:	b908      	cbnz	r0, 8005dca <_dtoa_r+0x17a>
 8005dc6:	f109 39ff 	add.w	r9, r9, #4294967295
 8005dca:	f1b9 0f16 	cmp.w	r9, #22
 8005dce:	d857      	bhi.n	8005e80 <_dtoa_r+0x230>
 8005dd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dd4:	4b5d      	ldr	r3, [pc, #372]	; (8005f4c <_dtoa_r+0x2fc>)
 8005dd6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	f7fa fded 	bl	80009bc <__aeabi_dcmplt>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d04e      	beq.n	8005e84 <_dtoa_r+0x234>
 8005de6:	2300      	movs	r3, #0
 8005de8:	f109 39ff 	add.w	r9, r9, #4294967295
 8005dec:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005df0:	1b1c      	subs	r4, r3, r4
 8005df2:	1e63      	subs	r3, r4, #1
 8005df4:	9309      	str	r3, [sp, #36]	; 0x24
 8005df6:	bf49      	itett	mi
 8005df8:	f1c4 0301 	rsbmi	r3, r4, #1
 8005dfc:	2300      	movpl	r3, #0
 8005dfe:	9306      	strmi	r3, [sp, #24]
 8005e00:	2300      	movmi	r3, #0
 8005e02:	bf54      	ite	pl
 8005e04:	9306      	strpl	r3, [sp, #24]
 8005e06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005e08:	f1b9 0f00 	cmp.w	r9, #0
 8005e0c:	db3c      	blt.n	8005e88 <_dtoa_r+0x238>
 8005e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e10:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005e14:	444b      	add	r3, r9
 8005e16:	9309      	str	r3, [sp, #36]	; 0x24
 8005e18:	2300      	movs	r3, #0
 8005e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e1e:	2b09      	cmp	r3, #9
 8005e20:	d86c      	bhi.n	8005efc <_dtoa_r+0x2ac>
 8005e22:	2b05      	cmp	r3, #5
 8005e24:	bfc4      	itt	gt
 8005e26:	3b04      	subgt	r3, #4
 8005e28:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005e2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e2c:	bfc8      	it	gt
 8005e2e:	2400      	movgt	r4, #0
 8005e30:	f1a3 0302 	sub.w	r3, r3, #2
 8005e34:	bfd8      	it	le
 8005e36:	2401      	movle	r4, #1
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	f200 808b 	bhi.w	8005f54 <_dtoa_r+0x304>
 8005e3e:	e8df f003 	tbb	[pc, r3]
 8005e42:	4f2d      	.short	0x4f2d
 8005e44:	5b4d      	.short	0x5b4d
 8005e46:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005e4a:	441c      	add	r4, r3
 8005e4c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	bfc3      	ittte	gt
 8005e54:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005e58:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005e5c:	fa09 f303 	lslgt.w	r3, r9, r3
 8005e60:	f1c3 0320 	rsble	r3, r3, #32
 8005e64:	bfc6      	itte	gt
 8005e66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005e6a:	4318      	orrgt	r0, r3
 8005e6c:	fa06 f003 	lslle.w	r0, r6, r3
 8005e70:	f7fa fab8 	bl	80003e4 <__aeabi_ui2d>
 8005e74:	2301      	movs	r3, #1
 8005e76:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005e7a:	3c01      	subs	r4, #1
 8005e7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e7e:	e770      	b.n	8005d62 <_dtoa_r+0x112>
 8005e80:	2301      	movs	r3, #1
 8005e82:	e7b3      	b.n	8005dec <_dtoa_r+0x19c>
 8005e84:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e86:	e7b2      	b.n	8005dee <_dtoa_r+0x19e>
 8005e88:	9b06      	ldr	r3, [sp, #24]
 8005e8a:	eba3 0309 	sub.w	r3, r3, r9
 8005e8e:	9306      	str	r3, [sp, #24]
 8005e90:	f1c9 0300 	rsb	r3, r9, #0
 8005e94:	930a      	str	r3, [sp, #40]	; 0x28
 8005e96:	2300      	movs	r3, #0
 8005e98:	930e      	str	r3, [sp, #56]	; 0x38
 8005e9a:	e7bf      	b.n	8005e1c <_dtoa_r+0x1cc>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ea0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	dc59      	bgt.n	8005f5a <_dtoa_r+0x30a>
 8005ea6:	f04f 0b01 	mov.w	fp, #1
 8005eaa:	465b      	mov	r3, fp
 8005eac:	f8cd b008 	str.w	fp, [sp, #8]
 8005eb0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005eb8:	6042      	str	r2, [r0, #4]
 8005eba:	2204      	movs	r2, #4
 8005ebc:	f102 0614 	add.w	r6, r2, #20
 8005ec0:	429e      	cmp	r6, r3
 8005ec2:	6841      	ldr	r1, [r0, #4]
 8005ec4:	d94f      	bls.n	8005f66 <_dtoa_r+0x316>
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 fcf2 	bl	80068b0 <_Balloc>
 8005ecc:	9008      	str	r0, [sp, #32]
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d14d      	bne.n	8005f6e <_dtoa_r+0x31e>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005ed8:	4b1d      	ldr	r3, [pc, #116]	; (8005f50 <_dtoa_r+0x300>)
 8005eda:	e6cd      	b.n	8005c78 <_dtoa_r+0x28>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e7de      	b.n	8005e9e <_dtoa_r+0x24e>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ee4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ee6:	eb09 0b03 	add.w	fp, r9, r3
 8005eea:	f10b 0301 	add.w	r3, fp, #1
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	9302      	str	r3, [sp, #8]
 8005ef2:	bfb8      	it	lt
 8005ef4:	2301      	movlt	r3, #1
 8005ef6:	e7dd      	b.n	8005eb4 <_dtoa_r+0x264>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e7f2      	b.n	8005ee2 <_dtoa_r+0x292>
 8005efc:	2401      	movs	r4, #1
 8005efe:	2300      	movs	r3, #0
 8005f00:	940b      	str	r4, [sp, #44]	; 0x2c
 8005f02:	9322      	str	r3, [sp, #136]	; 0x88
 8005f04:	f04f 3bff 	mov.w	fp, #4294967295
 8005f08:	2200      	movs	r2, #0
 8005f0a:	2312      	movs	r3, #18
 8005f0c:	f8cd b008 	str.w	fp, [sp, #8]
 8005f10:	9223      	str	r2, [sp, #140]	; 0x8c
 8005f12:	e7cf      	b.n	8005eb4 <_dtoa_r+0x264>
 8005f14:	f3af 8000 	nop.w
 8005f18:	636f4361 	.word	0x636f4361
 8005f1c:	3fd287a7 	.word	0x3fd287a7
 8005f20:	8b60c8b3 	.word	0x8b60c8b3
 8005f24:	3fc68a28 	.word	0x3fc68a28
 8005f28:	509f79fb 	.word	0x509f79fb
 8005f2c:	3fd34413 	.word	0x3fd34413
 8005f30:	0800862d 	.word	0x0800862d
 8005f34:	08008644 	.word	0x08008644
 8005f38:	7ff00000 	.word	0x7ff00000
 8005f3c:	08008629 	.word	0x08008629
 8005f40:	08008620 	.word	0x08008620
 8005f44:	080085fd 	.word	0x080085fd
 8005f48:	3ff80000 	.word	0x3ff80000
 8005f4c:	08008748 	.word	0x08008748
 8005f50:	080086a3 	.word	0x080086a3
 8005f54:	2301      	movs	r3, #1
 8005f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f58:	e7d4      	b.n	8005f04 <_dtoa_r+0x2b4>
 8005f5a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005f5e:	465b      	mov	r3, fp
 8005f60:	f8cd b008 	str.w	fp, [sp, #8]
 8005f64:	e7a6      	b.n	8005eb4 <_dtoa_r+0x264>
 8005f66:	3101      	adds	r1, #1
 8005f68:	6041      	str	r1, [r0, #4]
 8005f6a:	0052      	lsls	r2, r2, #1
 8005f6c:	e7a6      	b.n	8005ebc <_dtoa_r+0x26c>
 8005f6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f70:	9a08      	ldr	r2, [sp, #32]
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	9b02      	ldr	r3, [sp, #8]
 8005f76:	2b0e      	cmp	r3, #14
 8005f78:	f200 80a8 	bhi.w	80060cc <_dtoa_r+0x47c>
 8005f7c:	2c00      	cmp	r4, #0
 8005f7e:	f000 80a5 	beq.w	80060cc <_dtoa_r+0x47c>
 8005f82:	f1b9 0f00 	cmp.w	r9, #0
 8005f86:	dd34      	ble.n	8005ff2 <_dtoa_r+0x3a2>
 8005f88:	4a9a      	ldr	r2, [pc, #616]	; (80061f4 <_dtoa_r+0x5a4>)
 8005f8a:	f009 030f 	and.w	r3, r9, #15
 8005f8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f92:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005f96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005f9e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005fa2:	d016      	beq.n	8005fd2 <_dtoa_r+0x382>
 8005fa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fa8:	4b93      	ldr	r3, [pc, #588]	; (80061f8 <_dtoa_r+0x5a8>)
 8005faa:	2703      	movs	r7, #3
 8005fac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fb0:	f7fa fbbc 	bl	800072c <__aeabi_ddiv>
 8005fb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fb8:	f004 040f 	and.w	r4, r4, #15
 8005fbc:	4e8e      	ldr	r6, [pc, #568]	; (80061f8 <_dtoa_r+0x5a8>)
 8005fbe:	b954      	cbnz	r4, 8005fd6 <_dtoa_r+0x386>
 8005fc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fc8:	f7fa fbb0 	bl	800072c <__aeabi_ddiv>
 8005fcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fd0:	e029      	b.n	8006026 <_dtoa_r+0x3d6>
 8005fd2:	2702      	movs	r7, #2
 8005fd4:	e7f2      	b.n	8005fbc <_dtoa_r+0x36c>
 8005fd6:	07e1      	lsls	r1, r4, #31
 8005fd8:	d508      	bpl.n	8005fec <_dtoa_r+0x39c>
 8005fda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005fe2:	f7fa fa79 	bl	80004d8 <__aeabi_dmul>
 8005fe6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fea:	3701      	adds	r7, #1
 8005fec:	1064      	asrs	r4, r4, #1
 8005fee:	3608      	adds	r6, #8
 8005ff0:	e7e5      	b.n	8005fbe <_dtoa_r+0x36e>
 8005ff2:	f000 80a5 	beq.w	8006140 <_dtoa_r+0x4f0>
 8005ff6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ffa:	f1c9 0400 	rsb	r4, r9, #0
 8005ffe:	4b7d      	ldr	r3, [pc, #500]	; (80061f4 <_dtoa_r+0x5a4>)
 8006000:	f004 020f 	and.w	r2, r4, #15
 8006004:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	f7fa fa64 	bl	80004d8 <__aeabi_dmul>
 8006010:	2702      	movs	r7, #2
 8006012:	2300      	movs	r3, #0
 8006014:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006018:	4e77      	ldr	r6, [pc, #476]	; (80061f8 <_dtoa_r+0x5a8>)
 800601a:	1124      	asrs	r4, r4, #4
 800601c:	2c00      	cmp	r4, #0
 800601e:	f040 8084 	bne.w	800612a <_dtoa_r+0x4da>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1d2      	bne.n	8005fcc <_dtoa_r+0x37c>
 8006026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 808b 	beq.w	8006144 <_dtoa_r+0x4f4>
 800602e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006032:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006036:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800603a:	2200      	movs	r2, #0
 800603c:	4b6f      	ldr	r3, [pc, #444]	; (80061fc <_dtoa_r+0x5ac>)
 800603e:	f7fa fcbd 	bl	80009bc <__aeabi_dcmplt>
 8006042:	2800      	cmp	r0, #0
 8006044:	d07e      	beq.n	8006144 <_dtoa_r+0x4f4>
 8006046:	9b02      	ldr	r3, [sp, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d07b      	beq.n	8006144 <_dtoa_r+0x4f4>
 800604c:	f1bb 0f00 	cmp.w	fp, #0
 8006050:	dd38      	ble.n	80060c4 <_dtoa_r+0x474>
 8006052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006056:	2200      	movs	r2, #0
 8006058:	4b69      	ldr	r3, [pc, #420]	; (8006200 <_dtoa_r+0x5b0>)
 800605a:	f7fa fa3d 	bl	80004d8 <__aeabi_dmul>
 800605e:	465c      	mov	r4, fp
 8006060:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006064:	f109 38ff 	add.w	r8, r9, #4294967295
 8006068:	3701      	adds	r7, #1
 800606a:	4638      	mov	r0, r7
 800606c:	f7fa f9ca 	bl	8000404 <__aeabi_i2d>
 8006070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006074:	f7fa fa30 	bl	80004d8 <__aeabi_dmul>
 8006078:	2200      	movs	r2, #0
 800607a:	4b62      	ldr	r3, [pc, #392]	; (8006204 <_dtoa_r+0x5b4>)
 800607c:	f7fa f876 	bl	800016c <__adddf3>
 8006080:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006084:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006088:	9611      	str	r6, [sp, #68]	; 0x44
 800608a:	2c00      	cmp	r4, #0
 800608c:	d15d      	bne.n	800614a <_dtoa_r+0x4fa>
 800608e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006092:	2200      	movs	r2, #0
 8006094:	4b5c      	ldr	r3, [pc, #368]	; (8006208 <_dtoa_r+0x5b8>)
 8006096:	f7fa f867 	bl	8000168 <__aeabi_dsub>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060a2:	4633      	mov	r3, r6
 80060a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060a6:	f7fa fca7 	bl	80009f8 <__aeabi_dcmpgt>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	f040 829e 	bne.w	80065ec <_dtoa_r+0x99c>
 80060b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80060ba:	f7fa fc7f 	bl	80009bc <__aeabi_dcmplt>
 80060be:	2800      	cmp	r0, #0
 80060c0:	f040 8292 	bne.w	80065e8 <_dtoa_r+0x998>
 80060c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80060c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f2c0 8153 	blt.w	800637a <_dtoa_r+0x72a>
 80060d4:	f1b9 0f0e 	cmp.w	r9, #14
 80060d8:	f300 814f 	bgt.w	800637a <_dtoa_r+0x72a>
 80060dc:	4b45      	ldr	r3, [pc, #276]	; (80061f4 <_dtoa_r+0x5a4>)
 80060de:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80060e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80060ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f280 80db 	bge.w	80062a8 <_dtoa_r+0x658>
 80060f2:	9b02      	ldr	r3, [sp, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f300 80d7 	bgt.w	80062a8 <_dtoa_r+0x658>
 80060fa:	f040 8274 	bne.w	80065e6 <_dtoa_r+0x996>
 80060fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006102:	2200      	movs	r2, #0
 8006104:	4b40      	ldr	r3, [pc, #256]	; (8006208 <_dtoa_r+0x5b8>)
 8006106:	f7fa f9e7 	bl	80004d8 <__aeabi_dmul>
 800610a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800610e:	f7fa fc69 	bl	80009e4 <__aeabi_dcmpge>
 8006112:	9c02      	ldr	r4, [sp, #8]
 8006114:	4626      	mov	r6, r4
 8006116:	2800      	cmp	r0, #0
 8006118:	f040 824a 	bne.w	80065b0 <_dtoa_r+0x960>
 800611c:	2331      	movs	r3, #49	; 0x31
 800611e:	9f08      	ldr	r7, [sp, #32]
 8006120:	f109 0901 	add.w	r9, r9, #1
 8006124:	f807 3b01 	strb.w	r3, [r7], #1
 8006128:	e246      	b.n	80065b8 <_dtoa_r+0x968>
 800612a:	07e2      	lsls	r2, r4, #31
 800612c:	d505      	bpl.n	800613a <_dtoa_r+0x4ea>
 800612e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006132:	f7fa f9d1 	bl	80004d8 <__aeabi_dmul>
 8006136:	2301      	movs	r3, #1
 8006138:	3701      	adds	r7, #1
 800613a:	1064      	asrs	r4, r4, #1
 800613c:	3608      	adds	r6, #8
 800613e:	e76d      	b.n	800601c <_dtoa_r+0x3cc>
 8006140:	2702      	movs	r7, #2
 8006142:	e770      	b.n	8006026 <_dtoa_r+0x3d6>
 8006144:	46c8      	mov	r8, r9
 8006146:	9c02      	ldr	r4, [sp, #8]
 8006148:	e78f      	b.n	800606a <_dtoa_r+0x41a>
 800614a:	9908      	ldr	r1, [sp, #32]
 800614c:	4b29      	ldr	r3, [pc, #164]	; (80061f4 <_dtoa_r+0x5a4>)
 800614e:	4421      	add	r1, r4
 8006150:	9112      	str	r1, [sp, #72]	; 0x48
 8006152:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006154:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006158:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800615c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006160:	2900      	cmp	r1, #0
 8006162:	d055      	beq.n	8006210 <_dtoa_r+0x5c0>
 8006164:	2000      	movs	r0, #0
 8006166:	4929      	ldr	r1, [pc, #164]	; (800620c <_dtoa_r+0x5bc>)
 8006168:	f7fa fae0 	bl	800072c <__aeabi_ddiv>
 800616c:	463b      	mov	r3, r7
 800616e:	4632      	mov	r2, r6
 8006170:	f7f9 fffa 	bl	8000168 <__aeabi_dsub>
 8006174:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006178:	9f08      	ldr	r7, [sp, #32]
 800617a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800617e:	f7fa fc5b 	bl	8000a38 <__aeabi_d2iz>
 8006182:	4604      	mov	r4, r0
 8006184:	f7fa f93e 	bl	8000404 <__aeabi_i2d>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006190:	f7f9 ffea 	bl	8000168 <__aeabi_dsub>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	3430      	adds	r4, #48	; 0x30
 800619a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800619e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061a2:	f807 4b01 	strb.w	r4, [r7], #1
 80061a6:	f7fa fc09 	bl	80009bc <__aeabi_dcmplt>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d174      	bne.n	8006298 <_dtoa_r+0x648>
 80061ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061b2:	2000      	movs	r0, #0
 80061b4:	4911      	ldr	r1, [pc, #68]	; (80061fc <_dtoa_r+0x5ac>)
 80061b6:	f7f9 ffd7 	bl	8000168 <__aeabi_dsub>
 80061ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061be:	f7fa fbfd 	bl	80009bc <__aeabi_dcmplt>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	f040 80b6 	bne.w	8006334 <_dtoa_r+0x6e4>
 80061c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061ca:	429f      	cmp	r7, r3
 80061cc:	f43f af7a 	beq.w	80060c4 <_dtoa_r+0x474>
 80061d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061d4:	2200      	movs	r2, #0
 80061d6:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <_dtoa_r+0x5b0>)
 80061d8:	f7fa f97e 	bl	80004d8 <__aeabi_dmul>
 80061dc:	2200      	movs	r2, #0
 80061de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061e6:	4b06      	ldr	r3, [pc, #24]	; (8006200 <_dtoa_r+0x5b0>)
 80061e8:	f7fa f976 	bl	80004d8 <__aeabi_dmul>
 80061ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061f0:	e7c3      	b.n	800617a <_dtoa_r+0x52a>
 80061f2:	bf00      	nop
 80061f4:	08008748 	.word	0x08008748
 80061f8:	08008720 	.word	0x08008720
 80061fc:	3ff00000 	.word	0x3ff00000
 8006200:	40240000 	.word	0x40240000
 8006204:	401c0000 	.word	0x401c0000
 8006208:	40140000 	.word	0x40140000
 800620c:	3fe00000 	.word	0x3fe00000
 8006210:	4630      	mov	r0, r6
 8006212:	4639      	mov	r1, r7
 8006214:	f7fa f960 	bl	80004d8 <__aeabi_dmul>
 8006218:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800621a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800621e:	9c08      	ldr	r4, [sp, #32]
 8006220:	9314      	str	r3, [sp, #80]	; 0x50
 8006222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006226:	f7fa fc07 	bl	8000a38 <__aeabi_d2iz>
 800622a:	9015      	str	r0, [sp, #84]	; 0x54
 800622c:	f7fa f8ea 	bl	8000404 <__aeabi_i2d>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006238:	f7f9 ff96 	bl	8000168 <__aeabi_dsub>
 800623c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800623e:	4606      	mov	r6, r0
 8006240:	3330      	adds	r3, #48	; 0x30
 8006242:	f804 3b01 	strb.w	r3, [r4], #1
 8006246:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006248:	460f      	mov	r7, r1
 800624a:	429c      	cmp	r4, r3
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	d124      	bne.n	800629c <_dtoa_r+0x64c>
 8006252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006256:	4bb3      	ldr	r3, [pc, #716]	; (8006524 <_dtoa_r+0x8d4>)
 8006258:	f7f9 ff88 	bl	800016c <__adddf3>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4630      	mov	r0, r6
 8006262:	4639      	mov	r1, r7
 8006264:	f7fa fbc8 	bl	80009f8 <__aeabi_dcmpgt>
 8006268:	2800      	cmp	r0, #0
 800626a:	d162      	bne.n	8006332 <_dtoa_r+0x6e2>
 800626c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006270:	2000      	movs	r0, #0
 8006272:	49ac      	ldr	r1, [pc, #688]	; (8006524 <_dtoa_r+0x8d4>)
 8006274:	f7f9 ff78 	bl	8000168 <__aeabi_dsub>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4630      	mov	r0, r6
 800627e:	4639      	mov	r1, r7
 8006280:	f7fa fb9c 	bl	80009bc <__aeabi_dcmplt>
 8006284:	2800      	cmp	r0, #0
 8006286:	f43f af1d 	beq.w	80060c4 <_dtoa_r+0x474>
 800628a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800628c:	1e7b      	subs	r3, r7, #1
 800628e:	9314      	str	r3, [sp, #80]	; 0x50
 8006290:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006294:	2b30      	cmp	r3, #48	; 0x30
 8006296:	d0f8      	beq.n	800628a <_dtoa_r+0x63a>
 8006298:	46c1      	mov	r9, r8
 800629a:	e03a      	b.n	8006312 <_dtoa_r+0x6c2>
 800629c:	4ba2      	ldr	r3, [pc, #648]	; (8006528 <_dtoa_r+0x8d8>)
 800629e:	f7fa f91b 	bl	80004d8 <__aeabi_dmul>
 80062a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062a6:	e7bc      	b.n	8006222 <_dtoa_r+0x5d2>
 80062a8:	9f08      	ldr	r7, [sp, #32]
 80062aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062b2:	f7fa fa3b 	bl	800072c <__aeabi_ddiv>
 80062b6:	f7fa fbbf 	bl	8000a38 <__aeabi_d2iz>
 80062ba:	4604      	mov	r4, r0
 80062bc:	f7fa f8a2 	bl	8000404 <__aeabi_i2d>
 80062c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062c4:	f7fa f908 	bl	80004d8 <__aeabi_dmul>
 80062c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80062cc:	460b      	mov	r3, r1
 80062ce:	4602      	mov	r2, r0
 80062d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062d4:	f7f9 ff48 	bl	8000168 <__aeabi_dsub>
 80062d8:	f807 6b01 	strb.w	r6, [r7], #1
 80062dc:	9e08      	ldr	r6, [sp, #32]
 80062de:	9b02      	ldr	r3, [sp, #8]
 80062e0:	1bbe      	subs	r6, r7, r6
 80062e2:	42b3      	cmp	r3, r6
 80062e4:	d13a      	bne.n	800635c <_dtoa_r+0x70c>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	f7f9 ff3f 	bl	800016c <__adddf3>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062fa:	f7fa fb7d 	bl	80009f8 <__aeabi_dcmpgt>
 80062fe:	bb58      	cbnz	r0, 8006358 <_dtoa_r+0x708>
 8006300:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006308:	f7fa fb4e 	bl	80009a8 <__aeabi_dcmpeq>
 800630c:	b108      	cbz	r0, 8006312 <_dtoa_r+0x6c2>
 800630e:	07e1      	lsls	r1, r4, #31
 8006310:	d422      	bmi.n	8006358 <_dtoa_r+0x708>
 8006312:	4628      	mov	r0, r5
 8006314:	4651      	mov	r1, sl
 8006316:	f000 fb0b 	bl	8006930 <_Bfree>
 800631a:	2300      	movs	r3, #0
 800631c:	703b      	strb	r3, [r7, #0]
 800631e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006320:	f109 0001 	add.w	r0, r9, #1
 8006324:	6018      	str	r0, [r3, #0]
 8006326:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006328:	2b00      	cmp	r3, #0
 800632a:	f43f acdf 	beq.w	8005cec <_dtoa_r+0x9c>
 800632e:	601f      	str	r7, [r3, #0]
 8006330:	e4dc      	b.n	8005cec <_dtoa_r+0x9c>
 8006332:	4627      	mov	r7, r4
 8006334:	463b      	mov	r3, r7
 8006336:	461f      	mov	r7, r3
 8006338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800633c:	2a39      	cmp	r2, #57	; 0x39
 800633e:	d107      	bne.n	8006350 <_dtoa_r+0x700>
 8006340:	9a08      	ldr	r2, [sp, #32]
 8006342:	429a      	cmp	r2, r3
 8006344:	d1f7      	bne.n	8006336 <_dtoa_r+0x6e6>
 8006346:	2230      	movs	r2, #48	; 0x30
 8006348:	9908      	ldr	r1, [sp, #32]
 800634a:	f108 0801 	add.w	r8, r8, #1
 800634e:	700a      	strb	r2, [r1, #0]
 8006350:	781a      	ldrb	r2, [r3, #0]
 8006352:	3201      	adds	r2, #1
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e79f      	b.n	8006298 <_dtoa_r+0x648>
 8006358:	46c8      	mov	r8, r9
 800635a:	e7eb      	b.n	8006334 <_dtoa_r+0x6e4>
 800635c:	2200      	movs	r2, #0
 800635e:	4b72      	ldr	r3, [pc, #456]	; (8006528 <_dtoa_r+0x8d8>)
 8006360:	f7fa f8ba 	bl	80004d8 <__aeabi_dmul>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800636c:	2200      	movs	r2, #0
 800636e:	2300      	movs	r3, #0
 8006370:	f7fa fb1a 	bl	80009a8 <__aeabi_dcmpeq>
 8006374:	2800      	cmp	r0, #0
 8006376:	d098      	beq.n	80062aa <_dtoa_r+0x65a>
 8006378:	e7cb      	b.n	8006312 <_dtoa_r+0x6c2>
 800637a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800637c:	2a00      	cmp	r2, #0
 800637e:	f000 80cd 	beq.w	800651c <_dtoa_r+0x8cc>
 8006382:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006384:	2a01      	cmp	r2, #1
 8006386:	f300 80af 	bgt.w	80064e8 <_dtoa_r+0x898>
 800638a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800638c:	2a00      	cmp	r2, #0
 800638e:	f000 80a7 	beq.w	80064e0 <_dtoa_r+0x890>
 8006392:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006396:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006398:	9f06      	ldr	r7, [sp, #24]
 800639a:	9a06      	ldr	r2, [sp, #24]
 800639c:	2101      	movs	r1, #1
 800639e:	441a      	add	r2, r3
 80063a0:	9206      	str	r2, [sp, #24]
 80063a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063a4:	4628      	mov	r0, r5
 80063a6:	441a      	add	r2, r3
 80063a8:	9209      	str	r2, [sp, #36]	; 0x24
 80063aa:	f000 fb7b 	bl	8006aa4 <__i2b>
 80063ae:	4606      	mov	r6, r0
 80063b0:	2f00      	cmp	r7, #0
 80063b2:	dd0c      	ble.n	80063ce <_dtoa_r+0x77e>
 80063b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	dd09      	ble.n	80063ce <_dtoa_r+0x77e>
 80063ba:	42bb      	cmp	r3, r7
 80063bc:	bfa8      	it	ge
 80063be:	463b      	movge	r3, r7
 80063c0:	9a06      	ldr	r2, [sp, #24]
 80063c2:	1aff      	subs	r7, r7, r3
 80063c4:	1ad2      	subs	r2, r2, r3
 80063c6:	9206      	str	r2, [sp, #24]
 80063c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	9309      	str	r3, [sp, #36]	; 0x24
 80063ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d0:	b1f3      	cbz	r3, 8006410 <_dtoa_r+0x7c0>
 80063d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 80a9 	beq.w	800652c <_dtoa_r+0x8dc>
 80063da:	2c00      	cmp	r4, #0
 80063dc:	dd10      	ble.n	8006400 <_dtoa_r+0x7b0>
 80063de:	4631      	mov	r1, r6
 80063e0:	4622      	mov	r2, r4
 80063e2:	4628      	mov	r0, r5
 80063e4:	f000 fc18 	bl	8006c18 <__pow5mult>
 80063e8:	4652      	mov	r2, sl
 80063ea:	4601      	mov	r1, r0
 80063ec:	4606      	mov	r6, r0
 80063ee:	4628      	mov	r0, r5
 80063f0:	f000 fb6e 	bl	8006ad0 <__multiply>
 80063f4:	4680      	mov	r8, r0
 80063f6:	4651      	mov	r1, sl
 80063f8:	4628      	mov	r0, r5
 80063fa:	f000 fa99 	bl	8006930 <_Bfree>
 80063fe:	46c2      	mov	sl, r8
 8006400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006402:	1b1a      	subs	r2, r3, r4
 8006404:	d004      	beq.n	8006410 <_dtoa_r+0x7c0>
 8006406:	4651      	mov	r1, sl
 8006408:	4628      	mov	r0, r5
 800640a:	f000 fc05 	bl	8006c18 <__pow5mult>
 800640e:	4682      	mov	sl, r0
 8006410:	2101      	movs	r1, #1
 8006412:	4628      	mov	r0, r5
 8006414:	f000 fb46 	bl	8006aa4 <__i2b>
 8006418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800641a:	4604      	mov	r4, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	f340 8087 	ble.w	8006530 <_dtoa_r+0x8e0>
 8006422:	461a      	mov	r2, r3
 8006424:	4601      	mov	r1, r0
 8006426:	4628      	mov	r0, r5
 8006428:	f000 fbf6 	bl	8006c18 <__pow5mult>
 800642c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800642e:	4604      	mov	r4, r0
 8006430:	2b01      	cmp	r3, #1
 8006432:	f340 8080 	ble.w	8006536 <_dtoa_r+0x8e6>
 8006436:	f04f 0800 	mov.w	r8, #0
 800643a:	6923      	ldr	r3, [r4, #16]
 800643c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006440:	6918      	ldr	r0, [r3, #16]
 8006442:	f000 fae1 	bl	8006a08 <__hi0bits>
 8006446:	f1c0 0020 	rsb	r0, r0, #32
 800644a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800644c:	4418      	add	r0, r3
 800644e:	f010 001f 	ands.w	r0, r0, #31
 8006452:	f000 8092 	beq.w	800657a <_dtoa_r+0x92a>
 8006456:	f1c0 0320 	rsb	r3, r0, #32
 800645a:	2b04      	cmp	r3, #4
 800645c:	f340 808a 	ble.w	8006574 <_dtoa_r+0x924>
 8006460:	f1c0 001c 	rsb	r0, r0, #28
 8006464:	9b06      	ldr	r3, [sp, #24]
 8006466:	4407      	add	r7, r0
 8006468:	4403      	add	r3, r0
 800646a:	9306      	str	r3, [sp, #24]
 800646c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646e:	4403      	add	r3, r0
 8006470:	9309      	str	r3, [sp, #36]	; 0x24
 8006472:	9b06      	ldr	r3, [sp, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	dd05      	ble.n	8006484 <_dtoa_r+0x834>
 8006478:	4651      	mov	r1, sl
 800647a:	461a      	mov	r2, r3
 800647c:	4628      	mov	r0, r5
 800647e:	f000 fc25 	bl	8006ccc <__lshift>
 8006482:	4682      	mov	sl, r0
 8006484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006486:	2b00      	cmp	r3, #0
 8006488:	dd05      	ble.n	8006496 <_dtoa_r+0x846>
 800648a:	4621      	mov	r1, r4
 800648c:	461a      	mov	r2, r3
 800648e:	4628      	mov	r0, r5
 8006490:	f000 fc1c 	bl	8006ccc <__lshift>
 8006494:	4604      	mov	r4, r0
 8006496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006498:	2b00      	cmp	r3, #0
 800649a:	d070      	beq.n	800657e <_dtoa_r+0x92e>
 800649c:	4621      	mov	r1, r4
 800649e:	4650      	mov	r0, sl
 80064a0:	f000 fc80 	bl	8006da4 <__mcmp>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	da6a      	bge.n	800657e <_dtoa_r+0x92e>
 80064a8:	2300      	movs	r3, #0
 80064aa:	4651      	mov	r1, sl
 80064ac:	220a      	movs	r2, #10
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 fa60 	bl	8006974 <__multadd>
 80064b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064b6:	4682      	mov	sl, r0
 80064b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 8193 	beq.w	80067e8 <_dtoa_r+0xb98>
 80064c2:	4631      	mov	r1, r6
 80064c4:	2300      	movs	r3, #0
 80064c6:	220a      	movs	r2, #10
 80064c8:	4628      	mov	r0, r5
 80064ca:	f000 fa53 	bl	8006974 <__multadd>
 80064ce:	f1bb 0f00 	cmp.w	fp, #0
 80064d2:	4606      	mov	r6, r0
 80064d4:	f300 8093 	bgt.w	80065fe <_dtoa_r+0x9ae>
 80064d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064da:	2b02      	cmp	r3, #2
 80064dc:	dc57      	bgt.n	800658e <_dtoa_r+0x93e>
 80064de:	e08e      	b.n	80065fe <_dtoa_r+0x9ae>
 80064e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80064e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80064e6:	e756      	b.n	8006396 <_dtoa_r+0x746>
 80064e8:	9b02      	ldr	r3, [sp, #8]
 80064ea:	1e5c      	subs	r4, r3, #1
 80064ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ee:	42a3      	cmp	r3, r4
 80064f0:	bfb7      	itett	lt
 80064f2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80064f4:	1b1c      	subge	r4, r3, r4
 80064f6:	1ae2      	sublt	r2, r4, r3
 80064f8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80064fa:	bfbe      	ittt	lt
 80064fc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80064fe:	189b      	addlt	r3, r3, r2
 8006500:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006502:	9b02      	ldr	r3, [sp, #8]
 8006504:	bfb8      	it	lt
 8006506:	2400      	movlt	r4, #0
 8006508:	2b00      	cmp	r3, #0
 800650a:	bfbb      	ittet	lt
 800650c:	9b06      	ldrlt	r3, [sp, #24]
 800650e:	9a02      	ldrlt	r2, [sp, #8]
 8006510:	9f06      	ldrge	r7, [sp, #24]
 8006512:	1a9f      	sublt	r7, r3, r2
 8006514:	bfac      	ite	ge
 8006516:	9b02      	ldrge	r3, [sp, #8]
 8006518:	2300      	movlt	r3, #0
 800651a:	e73e      	b.n	800639a <_dtoa_r+0x74a>
 800651c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800651e:	9f06      	ldr	r7, [sp, #24]
 8006520:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006522:	e745      	b.n	80063b0 <_dtoa_r+0x760>
 8006524:	3fe00000 	.word	0x3fe00000
 8006528:	40240000 	.word	0x40240000
 800652c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800652e:	e76a      	b.n	8006406 <_dtoa_r+0x7b6>
 8006530:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006532:	2b01      	cmp	r3, #1
 8006534:	dc19      	bgt.n	800656a <_dtoa_r+0x91a>
 8006536:	9b04      	ldr	r3, [sp, #16]
 8006538:	b9bb      	cbnz	r3, 800656a <_dtoa_r+0x91a>
 800653a:	9b05      	ldr	r3, [sp, #20]
 800653c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006540:	b99b      	cbnz	r3, 800656a <_dtoa_r+0x91a>
 8006542:	9b05      	ldr	r3, [sp, #20]
 8006544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006548:	0d1b      	lsrs	r3, r3, #20
 800654a:	051b      	lsls	r3, r3, #20
 800654c:	b183      	cbz	r3, 8006570 <_dtoa_r+0x920>
 800654e:	f04f 0801 	mov.w	r8, #1
 8006552:	9b06      	ldr	r3, [sp, #24]
 8006554:	3301      	adds	r3, #1
 8006556:	9306      	str	r3, [sp, #24]
 8006558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800655a:	3301      	adds	r3, #1
 800655c:	9309      	str	r3, [sp, #36]	; 0x24
 800655e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006560:	2b00      	cmp	r3, #0
 8006562:	f47f af6a 	bne.w	800643a <_dtoa_r+0x7ea>
 8006566:	2001      	movs	r0, #1
 8006568:	e76f      	b.n	800644a <_dtoa_r+0x7fa>
 800656a:	f04f 0800 	mov.w	r8, #0
 800656e:	e7f6      	b.n	800655e <_dtoa_r+0x90e>
 8006570:	4698      	mov	r8, r3
 8006572:	e7f4      	b.n	800655e <_dtoa_r+0x90e>
 8006574:	f43f af7d 	beq.w	8006472 <_dtoa_r+0x822>
 8006578:	4618      	mov	r0, r3
 800657a:	301c      	adds	r0, #28
 800657c:	e772      	b.n	8006464 <_dtoa_r+0x814>
 800657e:	9b02      	ldr	r3, [sp, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	dc36      	bgt.n	80065f2 <_dtoa_r+0x9a2>
 8006584:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006586:	2b02      	cmp	r3, #2
 8006588:	dd33      	ble.n	80065f2 <_dtoa_r+0x9a2>
 800658a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800658e:	f1bb 0f00 	cmp.w	fp, #0
 8006592:	d10d      	bne.n	80065b0 <_dtoa_r+0x960>
 8006594:	4621      	mov	r1, r4
 8006596:	465b      	mov	r3, fp
 8006598:	2205      	movs	r2, #5
 800659a:	4628      	mov	r0, r5
 800659c:	f000 f9ea 	bl	8006974 <__multadd>
 80065a0:	4601      	mov	r1, r0
 80065a2:	4604      	mov	r4, r0
 80065a4:	4650      	mov	r0, sl
 80065a6:	f000 fbfd 	bl	8006da4 <__mcmp>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	f73f adb6 	bgt.w	800611c <_dtoa_r+0x4cc>
 80065b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065b2:	9f08      	ldr	r7, [sp, #32]
 80065b4:	ea6f 0903 	mvn.w	r9, r3
 80065b8:	f04f 0800 	mov.w	r8, #0
 80065bc:	4621      	mov	r1, r4
 80065be:	4628      	mov	r0, r5
 80065c0:	f000 f9b6 	bl	8006930 <_Bfree>
 80065c4:	2e00      	cmp	r6, #0
 80065c6:	f43f aea4 	beq.w	8006312 <_dtoa_r+0x6c2>
 80065ca:	f1b8 0f00 	cmp.w	r8, #0
 80065ce:	d005      	beq.n	80065dc <_dtoa_r+0x98c>
 80065d0:	45b0      	cmp	r8, r6
 80065d2:	d003      	beq.n	80065dc <_dtoa_r+0x98c>
 80065d4:	4641      	mov	r1, r8
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 f9aa 	bl	8006930 <_Bfree>
 80065dc:	4631      	mov	r1, r6
 80065de:	4628      	mov	r0, r5
 80065e0:	f000 f9a6 	bl	8006930 <_Bfree>
 80065e4:	e695      	b.n	8006312 <_dtoa_r+0x6c2>
 80065e6:	2400      	movs	r4, #0
 80065e8:	4626      	mov	r6, r4
 80065ea:	e7e1      	b.n	80065b0 <_dtoa_r+0x960>
 80065ec:	46c1      	mov	r9, r8
 80065ee:	4626      	mov	r6, r4
 80065f0:	e594      	b.n	800611c <_dtoa_r+0x4cc>
 80065f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065f4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 80fc 	beq.w	80067f6 <_dtoa_r+0xba6>
 80065fe:	2f00      	cmp	r7, #0
 8006600:	dd05      	ble.n	800660e <_dtoa_r+0x9be>
 8006602:	4631      	mov	r1, r6
 8006604:	463a      	mov	r2, r7
 8006606:	4628      	mov	r0, r5
 8006608:	f000 fb60 	bl	8006ccc <__lshift>
 800660c:	4606      	mov	r6, r0
 800660e:	f1b8 0f00 	cmp.w	r8, #0
 8006612:	d05c      	beq.n	80066ce <_dtoa_r+0xa7e>
 8006614:	4628      	mov	r0, r5
 8006616:	6871      	ldr	r1, [r6, #4]
 8006618:	f000 f94a 	bl	80068b0 <_Balloc>
 800661c:	4607      	mov	r7, r0
 800661e:	b928      	cbnz	r0, 800662c <_dtoa_r+0x9dc>
 8006620:	4602      	mov	r2, r0
 8006622:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006626:	4b7e      	ldr	r3, [pc, #504]	; (8006820 <_dtoa_r+0xbd0>)
 8006628:	f7ff bb26 	b.w	8005c78 <_dtoa_r+0x28>
 800662c:	6932      	ldr	r2, [r6, #16]
 800662e:	f106 010c 	add.w	r1, r6, #12
 8006632:	3202      	adds	r2, #2
 8006634:	0092      	lsls	r2, r2, #2
 8006636:	300c      	adds	r0, #12
 8006638:	f7fe fc94 	bl	8004f64 <memcpy>
 800663c:	2201      	movs	r2, #1
 800663e:	4639      	mov	r1, r7
 8006640:	4628      	mov	r0, r5
 8006642:	f000 fb43 	bl	8006ccc <__lshift>
 8006646:	46b0      	mov	r8, r6
 8006648:	4606      	mov	r6, r0
 800664a:	9b08      	ldr	r3, [sp, #32]
 800664c:	3301      	adds	r3, #1
 800664e:	9302      	str	r3, [sp, #8]
 8006650:	9b08      	ldr	r3, [sp, #32]
 8006652:	445b      	add	r3, fp
 8006654:	930a      	str	r3, [sp, #40]	; 0x28
 8006656:	9b04      	ldr	r3, [sp, #16]
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	9309      	str	r3, [sp, #36]	; 0x24
 800665e:	9b02      	ldr	r3, [sp, #8]
 8006660:	4621      	mov	r1, r4
 8006662:	4650      	mov	r0, sl
 8006664:	f103 3bff 	add.w	fp, r3, #4294967295
 8006668:	f7ff fa64 	bl	8005b34 <quorem>
 800666c:	4603      	mov	r3, r0
 800666e:	4641      	mov	r1, r8
 8006670:	3330      	adds	r3, #48	; 0x30
 8006672:	9004      	str	r0, [sp, #16]
 8006674:	4650      	mov	r0, sl
 8006676:	930b      	str	r3, [sp, #44]	; 0x2c
 8006678:	f000 fb94 	bl	8006da4 <__mcmp>
 800667c:	4632      	mov	r2, r6
 800667e:	9006      	str	r0, [sp, #24]
 8006680:	4621      	mov	r1, r4
 8006682:	4628      	mov	r0, r5
 8006684:	f000 fbaa 	bl	8006ddc <__mdiff>
 8006688:	68c2      	ldr	r2, [r0, #12]
 800668a:	4607      	mov	r7, r0
 800668c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800668e:	bb02      	cbnz	r2, 80066d2 <_dtoa_r+0xa82>
 8006690:	4601      	mov	r1, r0
 8006692:	4650      	mov	r0, sl
 8006694:	f000 fb86 	bl	8006da4 <__mcmp>
 8006698:	4602      	mov	r2, r0
 800669a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800669c:	4639      	mov	r1, r7
 800669e:	4628      	mov	r0, r5
 80066a0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80066a4:	f000 f944 	bl	8006930 <_Bfree>
 80066a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066ac:	9f02      	ldr	r7, [sp, #8]
 80066ae:	ea43 0102 	orr.w	r1, r3, r2
 80066b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b4:	430b      	orrs	r3, r1
 80066b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066b8:	d10d      	bne.n	80066d6 <_dtoa_r+0xa86>
 80066ba:	2b39      	cmp	r3, #57	; 0x39
 80066bc:	d027      	beq.n	800670e <_dtoa_r+0xabe>
 80066be:	9a06      	ldr	r2, [sp, #24]
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	dd01      	ble.n	80066c8 <_dtoa_r+0xa78>
 80066c4:	9b04      	ldr	r3, [sp, #16]
 80066c6:	3331      	adds	r3, #49	; 0x31
 80066c8:	f88b 3000 	strb.w	r3, [fp]
 80066cc:	e776      	b.n	80065bc <_dtoa_r+0x96c>
 80066ce:	4630      	mov	r0, r6
 80066d0:	e7b9      	b.n	8006646 <_dtoa_r+0x9f6>
 80066d2:	2201      	movs	r2, #1
 80066d4:	e7e2      	b.n	800669c <_dtoa_r+0xa4c>
 80066d6:	9906      	ldr	r1, [sp, #24]
 80066d8:	2900      	cmp	r1, #0
 80066da:	db04      	blt.n	80066e6 <_dtoa_r+0xa96>
 80066dc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80066de:	4301      	orrs	r1, r0
 80066e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066e2:	4301      	orrs	r1, r0
 80066e4:	d120      	bne.n	8006728 <_dtoa_r+0xad8>
 80066e6:	2a00      	cmp	r2, #0
 80066e8:	ddee      	ble.n	80066c8 <_dtoa_r+0xa78>
 80066ea:	4651      	mov	r1, sl
 80066ec:	2201      	movs	r2, #1
 80066ee:	4628      	mov	r0, r5
 80066f0:	9302      	str	r3, [sp, #8]
 80066f2:	f000 faeb 	bl	8006ccc <__lshift>
 80066f6:	4621      	mov	r1, r4
 80066f8:	4682      	mov	sl, r0
 80066fa:	f000 fb53 	bl	8006da4 <__mcmp>
 80066fe:	2800      	cmp	r0, #0
 8006700:	9b02      	ldr	r3, [sp, #8]
 8006702:	dc02      	bgt.n	800670a <_dtoa_r+0xaba>
 8006704:	d1e0      	bne.n	80066c8 <_dtoa_r+0xa78>
 8006706:	07da      	lsls	r2, r3, #31
 8006708:	d5de      	bpl.n	80066c8 <_dtoa_r+0xa78>
 800670a:	2b39      	cmp	r3, #57	; 0x39
 800670c:	d1da      	bne.n	80066c4 <_dtoa_r+0xa74>
 800670e:	2339      	movs	r3, #57	; 0x39
 8006710:	f88b 3000 	strb.w	r3, [fp]
 8006714:	463b      	mov	r3, r7
 8006716:	461f      	mov	r7, r3
 8006718:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800671c:	3b01      	subs	r3, #1
 800671e:	2a39      	cmp	r2, #57	; 0x39
 8006720:	d050      	beq.n	80067c4 <_dtoa_r+0xb74>
 8006722:	3201      	adds	r2, #1
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	e749      	b.n	80065bc <_dtoa_r+0x96c>
 8006728:	2a00      	cmp	r2, #0
 800672a:	dd03      	ble.n	8006734 <_dtoa_r+0xae4>
 800672c:	2b39      	cmp	r3, #57	; 0x39
 800672e:	d0ee      	beq.n	800670e <_dtoa_r+0xabe>
 8006730:	3301      	adds	r3, #1
 8006732:	e7c9      	b.n	80066c8 <_dtoa_r+0xa78>
 8006734:	9a02      	ldr	r2, [sp, #8]
 8006736:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006738:	f802 3c01 	strb.w	r3, [r2, #-1]
 800673c:	428a      	cmp	r2, r1
 800673e:	d02a      	beq.n	8006796 <_dtoa_r+0xb46>
 8006740:	4651      	mov	r1, sl
 8006742:	2300      	movs	r3, #0
 8006744:	220a      	movs	r2, #10
 8006746:	4628      	mov	r0, r5
 8006748:	f000 f914 	bl	8006974 <__multadd>
 800674c:	45b0      	cmp	r8, r6
 800674e:	4682      	mov	sl, r0
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	f04f 020a 	mov.w	r2, #10
 8006758:	4641      	mov	r1, r8
 800675a:	4628      	mov	r0, r5
 800675c:	d107      	bne.n	800676e <_dtoa_r+0xb1e>
 800675e:	f000 f909 	bl	8006974 <__multadd>
 8006762:	4680      	mov	r8, r0
 8006764:	4606      	mov	r6, r0
 8006766:	9b02      	ldr	r3, [sp, #8]
 8006768:	3301      	adds	r3, #1
 800676a:	9302      	str	r3, [sp, #8]
 800676c:	e777      	b.n	800665e <_dtoa_r+0xa0e>
 800676e:	f000 f901 	bl	8006974 <__multadd>
 8006772:	4631      	mov	r1, r6
 8006774:	4680      	mov	r8, r0
 8006776:	2300      	movs	r3, #0
 8006778:	220a      	movs	r2, #10
 800677a:	4628      	mov	r0, r5
 800677c:	f000 f8fa 	bl	8006974 <__multadd>
 8006780:	4606      	mov	r6, r0
 8006782:	e7f0      	b.n	8006766 <_dtoa_r+0xb16>
 8006784:	f1bb 0f00 	cmp.w	fp, #0
 8006788:	bfcc      	ite	gt
 800678a:	465f      	movgt	r7, fp
 800678c:	2701      	movle	r7, #1
 800678e:	f04f 0800 	mov.w	r8, #0
 8006792:	9a08      	ldr	r2, [sp, #32]
 8006794:	4417      	add	r7, r2
 8006796:	4651      	mov	r1, sl
 8006798:	2201      	movs	r2, #1
 800679a:	4628      	mov	r0, r5
 800679c:	9302      	str	r3, [sp, #8]
 800679e:	f000 fa95 	bl	8006ccc <__lshift>
 80067a2:	4621      	mov	r1, r4
 80067a4:	4682      	mov	sl, r0
 80067a6:	f000 fafd 	bl	8006da4 <__mcmp>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	dcb2      	bgt.n	8006714 <_dtoa_r+0xac4>
 80067ae:	d102      	bne.n	80067b6 <_dtoa_r+0xb66>
 80067b0:	9b02      	ldr	r3, [sp, #8]
 80067b2:	07db      	lsls	r3, r3, #31
 80067b4:	d4ae      	bmi.n	8006714 <_dtoa_r+0xac4>
 80067b6:	463b      	mov	r3, r7
 80067b8:	461f      	mov	r7, r3
 80067ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067be:	2a30      	cmp	r2, #48	; 0x30
 80067c0:	d0fa      	beq.n	80067b8 <_dtoa_r+0xb68>
 80067c2:	e6fb      	b.n	80065bc <_dtoa_r+0x96c>
 80067c4:	9a08      	ldr	r2, [sp, #32]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d1a5      	bne.n	8006716 <_dtoa_r+0xac6>
 80067ca:	2331      	movs	r3, #49	; 0x31
 80067cc:	f109 0901 	add.w	r9, r9, #1
 80067d0:	7013      	strb	r3, [r2, #0]
 80067d2:	e6f3      	b.n	80065bc <_dtoa_r+0x96c>
 80067d4:	4b13      	ldr	r3, [pc, #76]	; (8006824 <_dtoa_r+0xbd4>)
 80067d6:	f7ff baa7 	b.w	8005d28 <_dtoa_r+0xd8>
 80067da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f47f aa80 	bne.w	8005ce2 <_dtoa_r+0x92>
 80067e2:	4b11      	ldr	r3, [pc, #68]	; (8006828 <_dtoa_r+0xbd8>)
 80067e4:	f7ff baa0 	b.w	8005d28 <_dtoa_r+0xd8>
 80067e8:	f1bb 0f00 	cmp.w	fp, #0
 80067ec:	dc03      	bgt.n	80067f6 <_dtoa_r+0xba6>
 80067ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	f73f aecc 	bgt.w	800658e <_dtoa_r+0x93e>
 80067f6:	9f08      	ldr	r7, [sp, #32]
 80067f8:	4621      	mov	r1, r4
 80067fa:	4650      	mov	r0, sl
 80067fc:	f7ff f99a 	bl	8005b34 <quorem>
 8006800:	9a08      	ldr	r2, [sp, #32]
 8006802:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006806:	f807 3b01 	strb.w	r3, [r7], #1
 800680a:	1aba      	subs	r2, r7, r2
 800680c:	4593      	cmp	fp, r2
 800680e:	ddb9      	ble.n	8006784 <_dtoa_r+0xb34>
 8006810:	4651      	mov	r1, sl
 8006812:	2300      	movs	r3, #0
 8006814:	220a      	movs	r2, #10
 8006816:	4628      	mov	r0, r5
 8006818:	f000 f8ac 	bl	8006974 <__multadd>
 800681c:	4682      	mov	sl, r0
 800681e:	e7eb      	b.n	80067f8 <_dtoa_r+0xba8>
 8006820:	080086a3 	.word	0x080086a3
 8006824:	080085fc 	.word	0x080085fc
 8006828:	08008620 	.word	0x08008620

0800682c <_localeconv_r>:
 800682c:	4800      	ldr	r0, [pc, #0]	; (8006830 <_localeconv_r+0x4>)
 800682e:	4770      	bx	lr
 8006830:	20000168 	.word	0x20000168

08006834 <_lseek_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4604      	mov	r4, r0
 8006838:	4608      	mov	r0, r1
 800683a:	4611      	mov	r1, r2
 800683c:	2200      	movs	r2, #0
 800683e:	4d05      	ldr	r5, [pc, #20]	; (8006854 <_lseek_r+0x20>)
 8006840:	602a      	str	r2, [r5, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	f7fb f8f2 	bl	8001a2c <_lseek>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d102      	bne.n	8006852 <_lseek_r+0x1e>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	b103      	cbz	r3, 8006852 <_lseek_r+0x1e>
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	20001730 	.word	0x20001730

08006858 <__ascii_mbtowc>:
 8006858:	b082      	sub	sp, #8
 800685a:	b901      	cbnz	r1, 800685e <__ascii_mbtowc+0x6>
 800685c:	a901      	add	r1, sp, #4
 800685e:	b142      	cbz	r2, 8006872 <__ascii_mbtowc+0x1a>
 8006860:	b14b      	cbz	r3, 8006876 <__ascii_mbtowc+0x1e>
 8006862:	7813      	ldrb	r3, [r2, #0]
 8006864:	600b      	str	r3, [r1, #0]
 8006866:	7812      	ldrb	r2, [r2, #0]
 8006868:	1e10      	subs	r0, r2, #0
 800686a:	bf18      	it	ne
 800686c:	2001      	movne	r0, #1
 800686e:	b002      	add	sp, #8
 8006870:	4770      	bx	lr
 8006872:	4610      	mov	r0, r2
 8006874:	e7fb      	b.n	800686e <__ascii_mbtowc+0x16>
 8006876:	f06f 0001 	mvn.w	r0, #1
 800687a:	e7f8      	b.n	800686e <__ascii_mbtowc+0x16>

0800687c <memchr>:
 800687c:	4603      	mov	r3, r0
 800687e:	b510      	push	{r4, lr}
 8006880:	b2c9      	uxtb	r1, r1
 8006882:	4402      	add	r2, r0
 8006884:	4293      	cmp	r3, r2
 8006886:	4618      	mov	r0, r3
 8006888:	d101      	bne.n	800688e <memchr+0x12>
 800688a:	2000      	movs	r0, #0
 800688c:	e003      	b.n	8006896 <memchr+0x1a>
 800688e:	7804      	ldrb	r4, [r0, #0]
 8006890:	3301      	adds	r3, #1
 8006892:	428c      	cmp	r4, r1
 8006894:	d1f6      	bne.n	8006884 <memchr+0x8>
 8006896:	bd10      	pop	{r4, pc}

08006898 <__malloc_lock>:
 8006898:	4801      	ldr	r0, [pc, #4]	; (80068a0 <__malloc_lock+0x8>)
 800689a:	f000 bf23 	b.w	80076e4 <__retarget_lock_acquire_recursive>
 800689e:	bf00      	nop
 80068a0:	20001738 	.word	0x20001738

080068a4 <__malloc_unlock>:
 80068a4:	4801      	ldr	r0, [pc, #4]	; (80068ac <__malloc_unlock+0x8>)
 80068a6:	f000 bf1e 	b.w	80076e6 <__retarget_lock_release_recursive>
 80068aa:	bf00      	nop
 80068ac:	20001738 	.word	0x20001738

080068b0 <_Balloc>:
 80068b0:	b570      	push	{r4, r5, r6, lr}
 80068b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068b4:	4604      	mov	r4, r0
 80068b6:	460d      	mov	r5, r1
 80068b8:	b976      	cbnz	r6, 80068d8 <_Balloc+0x28>
 80068ba:	2010      	movs	r0, #16
 80068bc:	f7fe fb4a 	bl	8004f54 <malloc>
 80068c0:	4602      	mov	r2, r0
 80068c2:	6260      	str	r0, [r4, #36]	; 0x24
 80068c4:	b920      	cbnz	r0, 80068d0 <_Balloc+0x20>
 80068c6:	2166      	movs	r1, #102	; 0x66
 80068c8:	4b17      	ldr	r3, [pc, #92]	; (8006928 <_Balloc+0x78>)
 80068ca:	4818      	ldr	r0, [pc, #96]	; (800692c <_Balloc+0x7c>)
 80068cc:	f000 fd22 	bl	8007314 <__assert_func>
 80068d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068d4:	6006      	str	r6, [r0, #0]
 80068d6:	60c6      	str	r6, [r0, #12]
 80068d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80068da:	68f3      	ldr	r3, [r6, #12]
 80068dc:	b183      	cbz	r3, 8006900 <_Balloc+0x50>
 80068de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068e6:	b9b8      	cbnz	r0, 8006918 <_Balloc+0x68>
 80068e8:	2101      	movs	r1, #1
 80068ea:	fa01 f605 	lsl.w	r6, r1, r5
 80068ee:	1d72      	adds	r2, r6, #5
 80068f0:	4620      	mov	r0, r4
 80068f2:	0092      	lsls	r2, r2, #2
 80068f4:	f000 fb5e 	bl	8006fb4 <_calloc_r>
 80068f8:	b160      	cbz	r0, 8006914 <_Balloc+0x64>
 80068fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068fe:	e00e      	b.n	800691e <_Balloc+0x6e>
 8006900:	2221      	movs	r2, #33	; 0x21
 8006902:	2104      	movs	r1, #4
 8006904:	4620      	mov	r0, r4
 8006906:	f000 fb55 	bl	8006fb4 <_calloc_r>
 800690a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800690c:	60f0      	str	r0, [r6, #12]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e4      	bne.n	80068de <_Balloc+0x2e>
 8006914:	2000      	movs	r0, #0
 8006916:	bd70      	pop	{r4, r5, r6, pc}
 8006918:	6802      	ldr	r2, [r0, #0]
 800691a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800691e:	2300      	movs	r3, #0
 8006920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006924:	e7f7      	b.n	8006916 <_Balloc+0x66>
 8006926:	bf00      	nop
 8006928:	0800862d 	.word	0x0800862d
 800692c:	080086be 	.word	0x080086be

08006930 <_Bfree>:
 8006930:	b570      	push	{r4, r5, r6, lr}
 8006932:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006934:	4605      	mov	r5, r0
 8006936:	460c      	mov	r4, r1
 8006938:	b976      	cbnz	r6, 8006958 <_Bfree+0x28>
 800693a:	2010      	movs	r0, #16
 800693c:	f7fe fb0a 	bl	8004f54 <malloc>
 8006940:	4602      	mov	r2, r0
 8006942:	6268      	str	r0, [r5, #36]	; 0x24
 8006944:	b920      	cbnz	r0, 8006950 <_Bfree+0x20>
 8006946:	218a      	movs	r1, #138	; 0x8a
 8006948:	4b08      	ldr	r3, [pc, #32]	; (800696c <_Bfree+0x3c>)
 800694a:	4809      	ldr	r0, [pc, #36]	; (8006970 <_Bfree+0x40>)
 800694c:	f000 fce2 	bl	8007314 <__assert_func>
 8006950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006954:	6006      	str	r6, [r0, #0]
 8006956:	60c6      	str	r6, [r0, #12]
 8006958:	b13c      	cbz	r4, 800696a <_Bfree+0x3a>
 800695a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800695c:	6862      	ldr	r2, [r4, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006964:	6021      	str	r1, [r4, #0]
 8006966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800696a:	bd70      	pop	{r4, r5, r6, pc}
 800696c:	0800862d 	.word	0x0800862d
 8006970:	080086be 	.word	0x080086be

08006974 <__multadd>:
 8006974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006978:	4698      	mov	r8, r3
 800697a:	460c      	mov	r4, r1
 800697c:	2300      	movs	r3, #0
 800697e:	690e      	ldr	r6, [r1, #16]
 8006980:	4607      	mov	r7, r0
 8006982:	f101 0014 	add.w	r0, r1, #20
 8006986:	6805      	ldr	r5, [r0, #0]
 8006988:	3301      	adds	r3, #1
 800698a:	b2a9      	uxth	r1, r5
 800698c:	fb02 8101 	mla	r1, r2, r1, r8
 8006990:	0c2d      	lsrs	r5, r5, #16
 8006992:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006996:	fb02 c505 	mla	r5, r2, r5, ip
 800699a:	b289      	uxth	r1, r1
 800699c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80069a0:	429e      	cmp	r6, r3
 80069a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80069a6:	f840 1b04 	str.w	r1, [r0], #4
 80069aa:	dcec      	bgt.n	8006986 <__multadd+0x12>
 80069ac:	f1b8 0f00 	cmp.w	r8, #0
 80069b0:	d022      	beq.n	80069f8 <__multadd+0x84>
 80069b2:	68a3      	ldr	r3, [r4, #8]
 80069b4:	42b3      	cmp	r3, r6
 80069b6:	dc19      	bgt.n	80069ec <__multadd+0x78>
 80069b8:	6861      	ldr	r1, [r4, #4]
 80069ba:	4638      	mov	r0, r7
 80069bc:	3101      	adds	r1, #1
 80069be:	f7ff ff77 	bl	80068b0 <_Balloc>
 80069c2:	4605      	mov	r5, r0
 80069c4:	b928      	cbnz	r0, 80069d2 <__multadd+0x5e>
 80069c6:	4602      	mov	r2, r0
 80069c8:	21b5      	movs	r1, #181	; 0xb5
 80069ca:	4b0d      	ldr	r3, [pc, #52]	; (8006a00 <__multadd+0x8c>)
 80069cc:	480d      	ldr	r0, [pc, #52]	; (8006a04 <__multadd+0x90>)
 80069ce:	f000 fca1 	bl	8007314 <__assert_func>
 80069d2:	6922      	ldr	r2, [r4, #16]
 80069d4:	f104 010c 	add.w	r1, r4, #12
 80069d8:	3202      	adds	r2, #2
 80069da:	0092      	lsls	r2, r2, #2
 80069dc:	300c      	adds	r0, #12
 80069de:	f7fe fac1 	bl	8004f64 <memcpy>
 80069e2:	4621      	mov	r1, r4
 80069e4:	4638      	mov	r0, r7
 80069e6:	f7ff ffa3 	bl	8006930 <_Bfree>
 80069ea:	462c      	mov	r4, r5
 80069ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80069f0:	3601      	adds	r6, #1
 80069f2:	f8c3 8014 	str.w	r8, [r3, #20]
 80069f6:	6126      	str	r6, [r4, #16]
 80069f8:	4620      	mov	r0, r4
 80069fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069fe:	bf00      	nop
 8006a00:	080086a3 	.word	0x080086a3
 8006a04:	080086be 	.word	0x080086be

08006a08 <__hi0bits>:
 8006a08:	0c02      	lsrs	r2, r0, #16
 8006a0a:	0412      	lsls	r2, r2, #16
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	b9ca      	cbnz	r2, 8006a44 <__hi0bits+0x3c>
 8006a10:	0403      	lsls	r3, r0, #16
 8006a12:	2010      	movs	r0, #16
 8006a14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006a18:	bf04      	itt	eq
 8006a1a:	021b      	lsleq	r3, r3, #8
 8006a1c:	3008      	addeq	r0, #8
 8006a1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006a22:	bf04      	itt	eq
 8006a24:	011b      	lsleq	r3, r3, #4
 8006a26:	3004      	addeq	r0, #4
 8006a28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006a2c:	bf04      	itt	eq
 8006a2e:	009b      	lsleq	r3, r3, #2
 8006a30:	3002      	addeq	r0, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	db05      	blt.n	8006a42 <__hi0bits+0x3a>
 8006a36:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006a3a:	f100 0001 	add.w	r0, r0, #1
 8006a3e:	bf08      	it	eq
 8006a40:	2020      	moveq	r0, #32
 8006a42:	4770      	bx	lr
 8006a44:	2000      	movs	r0, #0
 8006a46:	e7e5      	b.n	8006a14 <__hi0bits+0xc>

08006a48 <__lo0bits>:
 8006a48:	6803      	ldr	r3, [r0, #0]
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	f013 0007 	ands.w	r0, r3, #7
 8006a50:	d00b      	beq.n	8006a6a <__lo0bits+0x22>
 8006a52:	07d9      	lsls	r1, r3, #31
 8006a54:	d422      	bmi.n	8006a9c <__lo0bits+0x54>
 8006a56:	0798      	lsls	r0, r3, #30
 8006a58:	bf49      	itett	mi
 8006a5a:	085b      	lsrmi	r3, r3, #1
 8006a5c:	089b      	lsrpl	r3, r3, #2
 8006a5e:	2001      	movmi	r0, #1
 8006a60:	6013      	strmi	r3, [r2, #0]
 8006a62:	bf5c      	itt	pl
 8006a64:	2002      	movpl	r0, #2
 8006a66:	6013      	strpl	r3, [r2, #0]
 8006a68:	4770      	bx	lr
 8006a6a:	b299      	uxth	r1, r3
 8006a6c:	b909      	cbnz	r1, 8006a72 <__lo0bits+0x2a>
 8006a6e:	2010      	movs	r0, #16
 8006a70:	0c1b      	lsrs	r3, r3, #16
 8006a72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a76:	bf04      	itt	eq
 8006a78:	0a1b      	lsreq	r3, r3, #8
 8006a7a:	3008      	addeq	r0, #8
 8006a7c:	0719      	lsls	r1, r3, #28
 8006a7e:	bf04      	itt	eq
 8006a80:	091b      	lsreq	r3, r3, #4
 8006a82:	3004      	addeq	r0, #4
 8006a84:	0799      	lsls	r1, r3, #30
 8006a86:	bf04      	itt	eq
 8006a88:	089b      	lsreq	r3, r3, #2
 8006a8a:	3002      	addeq	r0, #2
 8006a8c:	07d9      	lsls	r1, r3, #31
 8006a8e:	d403      	bmi.n	8006a98 <__lo0bits+0x50>
 8006a90:	085b      	lsrs	r3, r3, #1
 8006a92:	f100 0001 	add.w	r0, r0, #1
 8006a96:	d003      	beq.n	8006aa0 <__lo0bits+0x58>
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	4770      	bx	lr
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	4770      	bx	lr
 8006aa0:	2020      	movs	r0, #32
 8006aa2:	4770      	bx	lr

08006aa4 <__i2b>:
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	f7ff ff01 	bl	80068b0 <_Balloc>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	b928      	cbnz	r0, 8006abe <__i2b+0x1a>
 8006ab2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006ab6:	4b04      	ldr	r3, [pc, #16]	; (8006ac8 <__i2b+0x24>)
 8006ab8:	4804      	ldr	r0, [pc, #16]	; (8006acc <__i2b+0x28>)
 8006aba:	f000 fc2b 	bl	8007314 <__assert_func>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	6144      	str	r4, [r0, #20]
 8006ac2:	6103      	str	r3, [r0, #16]
 8006ac4:	bd10      	pop	{r4, pc}
 8006ac6:	bf00      	nop
 8006ac8:	080086a3 	.word	0x080086a3
 8006acc:	080086be 	.word	0x080086be

08006ad0 <__multiply>:
 8006ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	690a      	ldr	r2, [r1, #16]
 8006ad8:	6923      	ldr	r3, [r4, #16]
 8006ada:	460d      	mov	r5, r1
 8006adc:	429a      	cmp	r2, r3
 8006ade:	bfbe      	ittt	lt
 8006ae0:	460b      	movlt	r3, r1
 8006ae2:	4625      	movlt	r5, r4
 8006ae4:	461c      	movlt	r4, r3
 8006ae6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006aea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006aee:	68ab      	ldr	r3, [r5, #8]
 8006af0:	6869      	ldr	r1, [r5, #4]
 8006af2:	eb0a 0709 	add.w	r7, sl, r9
 8006af6:	42bb      	cmp	r3, r7
 8006af8:	b085      	sub	sp, #20
 8006afa:	bfb8      	it	lt
 8006afc:	3101      	addlt	r1, #1
 8006afe:	f7ff fed7 	bl	80068b0 <_Balloc>
 8006b02:	b930      	cbnz	r0, 8006b12 <__multiply+0x42>
 8006b04:	4602      	mov	r2, r0
 8006b06:	f240 115d 	movw	r1, #349	; 0x15d
 8006b0a:	4b41      	ldr	r3, [pc, #260]	; (8006c10 <__multiply+0x140>)
 8006b0c:	4841      	ldr	r0, [pc, #260]	; (8006c14 <__multiply+0x144>)
 8006b0e:	f000 fc01 	bl	8007314 <__assert_func>
 8006b12:	f100 0614 	add.w	r6, r0, #20
 8006b16:	4633      	mov	r3, r6
 8006b18:	2200      	movs	r2, #0
 8006b1a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006b1e:	4543      	cmp	r3, r8
 8006b20:	d31e      	bcc.n	8006b60 <__multiply+0x90>
 8006b22:	f105 0c14 	add.w	ip, r5, #20
 8006b26:	f104 0314 	add.w	r3, r4, #20
 8006b2a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006b2e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006b32:	9202      	str	r2, [sp, #8]
 8006b34:	ebac 0205 	sub.w	r2, ip, r5
 8006b38:	3a15      	subs	r2, #21
 8006b3a:	f022 0203 	bic.w	r2, r2, #3
 8006b3e:	3204      	adds	r2, #4
 8006b40:	f105 0115 	add.w	r1, r5, #21
 8006b44:	458c      	cmp	ip, r1
 8006b46:	bf38      	it	cc
 8006b48:	2204      	movcc	r2, #4
 8006b4a:	9201      	str	r2, [sp, #4]
 8006b4c:	9a02      	ldr	r2, [sp, #8]
 8006b4e:	9303      	str	r3, [sp, #12]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d808      	bhi.n	8006b66 <__multiply+0x96>
 8006b54:	2f00      	cmp	r7, #0
 8006b56:	dc55      	bgt.n	8006c04 <__multiply+0x134>
 8006b58:	6107      	str	r7, [r0, #16]
 8006b5a:	b005      	add	sp, #20
 8006b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b60:	f843 2b04 	str.w	r2, [r3], #4
 8006b64:	e7db      	b.n	8006b1e <__multiply+0x4e>
 8006b66:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b6a:	f1ba 0f00 	cmp.w	sl, #0
 8006b6e:	d020      	beq.n	8006bb2 <__multiply+0xe2>
 8006b70:	46b1      	mov	r9, r6
 8006b72:	2200      	movs	r2, #0
 8006b74:	f105 0e14 	add.w	lr, r5, #20
 8006b78:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006b7c:	f8d9 b000 	ldr.w	fp, [r9]
 8006b80:	b2a1      	uxth	r1, r4
 8006b82:	fa1f fb8b 	uxth.w	fp, fp
 8006b86:	fb0a b101 	mla	r1, sl, r1, fp
 8006b8a:	4411      	add	r1, r2
 8006b8c:	f8d9 2000 	ldr.w	r2, [r9]
 8006b90:	0c24      	lsrs	r4, r4, #16
 8006b92:	0c12      	lsrs	r2, r2, #16
 8006b94:	fb0a 2404 	mla	r4, sl, r4, r2
 8006b98:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006b9c:	b289      	uxth	r1, r1
 8006b9e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006ba2:	45f4      	cmp	ip, lr
 8006ba4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006ba8:	f849 1b04 	str.w	r1, [r9], #4
 8006bac:	d8e4      	bhi.n	8006b78 <__multiply+0xa8>
 8006bae:	9901      	ldr	r1, [sp, #4]
 8006bb0:	5072      	str	r2, [r6, r1]
 8006bb2:	9a03      	ldr	r2, [sp, #12]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006bba:	f1b9 0f00 	cmp.w	r9, #0
 8006bbe:	d01f      	beq.n	8006c00 <__multiply+0x130>
 8006bc0:	46b6      	mov	lr, r6
 8006bc2:	f04f 0a00 	mov.w	sl, #0
 8006bc6:	6834      	ldr	r4, [r6, #0]
 8006bc8:	f105 0114 	add.w	r1, r5, #20
 8006bcc:	880a      	ldrh	r2, [r1, #0]
 8006bce:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006bd2:	b2a4      	uxth	r4, r4
 8006bd4:	fb09 b202 	mla	r2, r9, r2, fp
 8006bd8:	4492      	add	sl, r2
 8006bda:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006bde:	f84e 4b04 	str.w	r4, [lr], #4
 8006be2:	f851 4b04 	ldr.w	r4, [r1], #4
 8006be6:	f8be 2000 	ldrh.w	r2, [lr]
 8006bea:	0c24      	lsrs	r4, r4, #16
 8006bec:	fb09 2404 	mla	r4, r9, r4, r2
 8006bf0:	458c      	cmp	ip, r1
 8006bf2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006bf6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006bfa:	d8e7      	bhi.n	8006bcc <__multiply+0xfc>
 8006bfc:	9a01      	ldr	r2, [sp, #4]
 8006bfe:	50b4      	str	r4, [r6, r2]
 8006c00:	3604      	adds	r6, #4
 8006c02:	e7a3      	b.n	8006b4c <__multiply+0x7c>
 8006c04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1a5      	bne.n	8006b58 <__multiply+0x88>
 8006c0c:	3f01      	subs	r7, #1
 8006c0e:	e7a1      	b.n	8006b54 <__multiply+0x84>
 8006c10:	080086a3 	.word	0x080086a3
 8006c14:	080086be 	.word	0x080086be

08006c18 <__pow5mult>:
 8006c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c1c:	4615      	mov	r5, r2
 8006c1e:	f012 0203 	ands.w	r2, r2, #3
 8006c22:	4606      	mov	r6, r0
 8006c24:	460f      	mov	r7, r1
 8006c26:	d007      	beq.n	8006c38 <__pow5mult+0x20>
 8006c28:	4c25      	ldr	r4, [pc, #148]	; (8006cc0 <__pow5mult+0xa8>)
 8006c2a:	3a01      	subs	r2, #1
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c32:	f7ff fe9f 	bl	8006974 <__multadd>
 8006c36:	4607      	mov	r7, r0
 8006c38:	10ad      	asrs	r5, r5, #2
 8006c3a:	d03d      	beq.n	8006cb8 <__pow5mult+0xa0>
 8006c3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c3e:	b97c      	cbnz	r4, 8006c60 <__pow5mult+0x48>
 8006c40:	2010      	movs	r0, #16
 8006c42:	f7fe f987 	bl	8004f54 <malloc>
 8006c46:	4602      	mov	r2, r0
 8006c48:	6270      	str	r0, [r6, #36]	; 0x24
 8006c4a:	b928      	cbnz	r0, 8006c58 <__pow5mult+0x40>
 8006c4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c50:	4b1c      	ldr	r3, [pc, #112]	; (8006cc4 <__pow5mult+0xac>)
 8006c52:	481d      	ldr	r0, [pc, #116]	; (8006cc8 <__pow5mult+0xb0>)
 8006c54:	f000 fb5e 	bl	8007314 <__assert_func>
 8006c58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c5c:	6004      	str	r4, [r0, #0]
 8006c5e:	60c4      	str	r4, [r0, #12]
 8006c60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c68:	b94c      	cbnz	r4, 8006c7e <__pow5mult+0x66>
 8006c6a:	f240 2171 	movw	r1, #625	; 0x271
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f7ff ff18 	bl	8006aa4 <__i2b>
 8006c74:	2300      	movs	r3, #0
 8006c76:	4604      	mov	r4, r0
 8006c78:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c7c:	6003      	str	r3, [r0, #0]
 8006c7e:	f04f 0900 	mov.w	r9, #0
 8006c82:	07eb      	lsls	r3, r5, #31
 8006c84:	d50a      	bpl.n	8006c9c <__pow5mult+0x84>
 8006c86:	4639      	mov	r1, r7
 8006c88:	4622      	mov	r2, r4
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f7ff ff20 	bl	8006ad0 <__multiply>
 8006c90:	4680      	mov	r8, r0
 8006c92:	4639      	mov	r1, r7
 8006c94:	4630      	mov	r0, r6
 8006c96:	f7ff fe4b 	bl	8006930 <_Bfree>
 8006c9a:	4647      	mov	r7, r8
 8006c9c:	106d      	asrs	r5, r5, #1
 8006c9e:	d00b      	beq.n	8006cb8 <__pow5mult+0xa0>
 8006ca0:	6820      	ldr	r0, [r4, #0]
 8006ca2:	b938      	cbnz	r0, 8006cb4 <__pow5mult+0x9c>
 8006ca4:	4622      	mov	r2, r4
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f7ff ff11 	bl	8006ad0 <__multiply>
 8006cae:	6020      	str	r0, [r4, #0]
 8006cb0:	f8c0 9000 	str.w	r9, [r0]
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	e7e4      	b.n	8006c82 <__pow5mult+0x6a>
 8006cb8:	4638      	mov	r0, r7
 8006cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cbe:	bf00      	nop
 8006cc0:	08008810 	.word	0x08008810
 8006cc4:	0800862d 	.word	0x0800862d
 8006cc8:	080086be 	.word	0x080086be

08006ccc <__lshift>:
 8006ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	4607      	mov	r7, r0
 8006cd4:	4691      	mov	r9, r2
 8006cd6:	6923      	ldr	r3, [r4, #16]
 8006cd8:	6849      	ldr	r1, [r1, #4]
 8006cda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cde:	68a3      	ldr	r3, [r4, #8]
 8006ce0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ce4:	f108 0601 	add.w	r6, r8, #1
 8006ce8:	42b3      	cmp	r3, r6
 8006cea:	db0b      	blt.n	8006d04 <__lshift+0x38>
 8006cec:	4638      	mov	r0, r7
 8006cee:	f7ff fddf 	bl	80068b0 <_Balloc>
 8006cf2:	4605      	mov	r5, r0
 8006cf4:	b948      	cbnz	r0, 8006d0a <__lshift+0x3e>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006cfc:	4b27      	ldr	r3, [pc, #156]	; (8006d9c <__lshift+0xd0>)
 8006cfe:	4828      	ldr	r0, [pc, #160]	; (8006da0 <__lshift+0xd4>)
 8006d00:	f000 fb08 	bl	8007314 <__assert_func>
 8006d04:	3101      	adds	r1, #1
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	e7ee      	b.n	8006ce8 <__lshift+0x1c>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f100 0114 	add.w	r1, r0, #20
 8006d10:	f100 0210 	add.w	r2, r0, #16
 8006d14:	4618      	mov	r0, r3
 8006d16:	4553      	cmp	r3, sl
 8006d18:	db33      	blt.n	8006d82 <__lshift+0xb6>
 8006d1a:	6920      	ldr	r0, [r4, #16]
 8006d1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d20:	f104 0314 	add.w	r3, r4, #20
 8006d24:	f019 091f 	ands.w	r9, r9, #31
 8006d28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d30:	d02b      	beq.n	8006d8a <__lshift+0xbe>
 8006d32:	468a      	mov	sl, r1
 8006d34:	2200      	movs	r2, #0
 8006d36:	f1c9 0e20 	rsb	lr, r9, #32
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	fa00 f009 	lsl.w	r0, r0, r9
 8006d40:	4302      	orrs	r2, r0
 8006d42:	f84a 2b04 	str.w	r2, [sl], #4
 8006d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d4a:	459c      	cmp	ip, r3
 8006d4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d50:	d8f3      	bhi.n	8006d3a <__lshift+0x6e>
 8006d52:	ebac 0304 	sub.w	r3, ip, r4
 8006d56:	3b15      	subs	r3, #21
 8006d58:	f023 0303 	bic.w	r3, r3, #3
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	f104 0015 	add.w	r0, r4, #21
 8006d62:	4584      	cmp	ip, r0
 8006d64:	bf38      	it	cc
 8006d66:	2304      	movcc	r3, #4
 8006d68:	50ca      	str	r2, [r1, r3]
 8006d6a:	b10a      	cbz	r2, 8006d70 <__lshift+0xa4>
 8006d6c:	f108 0602 	add.w	r6, r8, #2
 8006d70:	3e01      	subs	r6, #1
 8006d72:	4638      	mov	r0, r7
 8006d74:	4621      	mov	r1, r4
 8006d76:	612e      	str	r6, [r5, #16]
 8006d78:	f7ff fdda 	bl	8006930 <_Bfree>
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d82:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d86:	3301      	adds	r3, #1
 8006d88:	e7c5      	b.n	8006d16 <__lshift+0x4a>
 8006d8a:	3904      	subs	r1, #4
 8006d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d90:	459c      	cmp	ip, r3
 8006d92:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d96:	d8f9      	bhi.n	8006d8c <__lshift+0xc0>
 8006d98:	e7ea      	b.n	8006d70 <__lshift+0xa4>
 8006d9a:	bf00      	nop
 8006d9c:	080086a3 	.word	0x080086a3
 8006da0:	080086be 	.word	0x080086be

08006da4 <__mcmp>:
 8006da4:	4603      	mov	r3, r0
 8006da6:	690a      	ldr	r2, [r1, #16]
 8006da8:	6900      	ldr	r0, [r0, #16]
 8006daa:	b530      	push	{r4, r5, lr}
 8006dac:	1a80      	subs	r0, r0, r2
 8006dae:	d10d      	bne.n	8006dcc <__mcmp+0x28>
 8006db0:	3314      	adds	r3, #20
 8006db2:	3114      	adds	r1, #20
 8006db4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006db8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006dbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006dc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006dc4:	4295      	cmp	r5, r2
 8006dc6:	d002      	beq.n	8006dce <__mcmp+0x2a>
 8006dc8:	d304      	bcc.n	8006dd4 <__mcmp+0x30>
 8006dca:	2001      	movs	r0, #1
 8006dcc:	bd30      	pop	{r4, r5, pc}
 8006dce:	42a3      	cmp	r3, r4
 8006dd0:	d3f4      	bcc.n	8006dbc <__mcmp+0x18>
 8006dd2:	e7fb      	b.n	8006dcc <__mcmp+0x28>
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	e7f8      	b.n	8006dcc <__mcmp+0x28>
	...

08006ddc <__mdiff>:
 8006ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de0:	460c      	mov	r4, r1
 8006de2:	4606      	mov	r6, r0
 8006de4:	4611      	mov	r1, r2
 8006de6:	4620      	mov	r0, r4
 8006de8:	4692      	mov	sl, r2
 8006dea:	f7ff ffdb 	bl	8006da4 <__mcmp>
 8006dee:	1e05      	subs	r5, r0, #0
 8006df0:	d111      	bne.n	8006e16 <__mdiff+0x3a>
 8006df2:	4629      	mov	r1, r5
 8006df4:	4630      	mov	r0, r6
 8006df6:	f7ff fd5b 	bl	80068b0 <_Balloc>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	b928      	cbnz	r0, 8006e0a <__mdiff+0x2e>
 8006dfe:	f240 2132 	movw	r1, #562	; 0x232
 8006e02:	4b3c      	ldr	r3, [pc, #240]	; (8006ef4 <__mdiff+0x118>)
 8006e04:	483c      	ldr	r0, [pc, #240]	; (8006ef8 <__mdiff+0x11c>)
 8006e06:	f000 fa85 	bl	8007314 <__assert_func>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e10:	4610      	mov	r0, r2
 8006e12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e16:	bfa4      	itt	ge
 8006e18:	4653      	movge	r3, sl
 8006e1a:	46a2      	movge	sl, r4
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006e22:	bfa6      	itte	ge
 8006e24:	461c      	movge	r4, r3
 8006e26:	2500      	movge	r5, #0
 8006e28:	2501      	movlt	r5, #1
 8006e2a:	f7ff fd41 	bl	80068b0 <_Balloc>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	b918      	cbnz	r0, 8006e3a <__mdiff+0x5e>
 8006e32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e36:	4b2f      	ldr	r3, [pc, #188]	; (8006ef4 <__mdiff+0x118>)
 8006e38:	e7e4      	b.n	8006e04 <__mdiff+0x28>
 8006e3a:	f100 0814 	add.w	r8, r0, #20
 8006e3e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006e42:	60c5      	str	r5, [r0, #12]
 8006e44:	f04f 0c00 	mov.w	ip, #0
 8006e48:	f10a 0514 	add.w	r5, sl, #20
 8006e4c:	f10a 0010 	add.w	r0, sl, #16
 8006e50:	46c2      	mov	sl, r8
 8006e52:	6926      	ldr	r6, [r4, #16]
 8006e54:	f104 0914 	add.w	r9, r4, #20
 8006e58:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006e5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e60:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006e64:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e68:	fa1f f18b 	uxth.w	r1, fp
 8006e6c:	4461      	add	r1, ip
 8006e6e:	fa1f fc83 	uxth.w	ip, r3
 8006e72:	0c1b      	lsrs	r3, r3, #16
 8006e74:	eba1 010c 	sub.w	r1, r1, ip
 8006e78:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e7c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006e80:	b289      	uxth	r1, r1
 8006e82:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006e86:	454e      	cmp	r6, r9
 8006e88:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006e8c:	f84a 3b04 	str.w	r3, [sl], #4
 8006e90:	d8e6      	bhi.n	8006e60 <__mdiff+0x84>
 8006e92:	1b33      	subs	r3, r6, r4
 8006e94:	3b15      	subs	r3, #21
 8006e96:	f023 0303 	bic.w	r3, r3, #3
 8006e9a:	3415      	adds	r4, #21
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	42a6      	cmp	r6, r4
 8006ea0:	bf38      	it	cc
 8006ea2:	2304      	movcc	r3, #4
 8006ea4:	441d      	add	r5, r3
 8006ea6:	4443      	add	r3, r8
 8006ea8:	461e      	mov	r6, r3
 8006eaa:	462c      	mov	r4, r5
 8006eac:	4574      	cmp	r4, lr
 8006eae:	d30e      	bcc.n	8006ece <__mdiff+0xf2>
 8006eb0:	f10e 0103 	add.w	r1, lr, #3
 8006eb4:	1b49      	subs	r1, r1, r5
 8006eb6:	f021 0103 	bic.w	r1, r1, #3
 8006eba:	3d03      	subs	r5, #3
 8006ebc:	45ae      	cmp	lr, r5
 8006ebe:	bf38      	it	cc
 8006ec0:	2100      	movcc	r1, #0
 8006ec2:	4419      	add	r1, r3
 8006ec4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006ec8:	b18b      	cbz	r3, 8006eee <__mdiff+0x112>
 8006eca:	6117      	str	r7, [r2, #16]
 8006ecc:	e7a0      	b.n	8006e10 <__mdiff+0x34>
 8006ece:	f854 8b04 	ldr.w	r8, [r4], #4
 8006ed2:	fa1f f188 	uxth.w	r1, r8
 8006ed6:	4461      	add	r1, ip
 8006ed8:	1408      	asrs	r0, r1, #16
 8006eda:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006ede:	b289      	uxth	r1, r1
 8006ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ee4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ee8:	f846 1b04 	str.w	r1, [r6], #4
 8006eec:	e7de      	b.n	8006eac <__mdiff+0xd0>
 8006eee:	3f01      	subs	r7, #1
 8006ef0:	e7e8      	b.n	8006ec4 <__mdiff+0xe8>
 8006ef2:	bf00      	nop
 8006ef4:	080086a3 	.word	0x080086a3
 8006ef8:	080086be 	.word	0x080086be

08006efc <__d2b>:
 8006efc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006f00:	2101      	movs	r1, #1
 8006f02:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006f06:	4690      	mov	r8, r2
 8006f08:	461d      	mov	r5, r3
 8006f0a:	f7ff fcd1 	bl	80068b0 <_Balloc>
 8006f0e:	4604      	mov	r4, r0
 8006f10:	b930      	cbnz	r0, 8006f20 <__d2b+0x24>
 8006f12:	4602      	mov	r2, r0
 8006f14:	f240 310a 	movw	r1, #778	; 0x30a
 8006f18:	4b24      	ldr	r3, [pc, #144]	; (8006fac <__d2b+0xb0>)
 8006f1a:	4825      	ldr	r0, [pc, #148]	; (8006fb0 <__d2b+0xb4>)
 8006f1c:	f000 f9fa 	bl	8007314 <__assert_func>
 8006f20:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006f24:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006f28:	bb2d      	cbnz	r5, 8006f76 <__d2b+0x7a>
 8006f2a:	9301      	str	r3, [sp, #4]
 8006f2c:	f1b8 0300 	subs.w	r3, r8, #0
 8006f30:	d026      	beq.n	8006f80 <__d2b+0x84>
 8006f32:	4668      	mov	r0, sp
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	f7ff fd87 	bl	8006a48 <__lo0bits>
 8006f3a:	9900      	ldr	r1, [sp, #0]
 8006f3c:	b1f0      	cbz	r0, 8006f7c <__d2b+0x80>
 8006f3e:	9a01      	ldr	r2, [sp, #4]
 8006f40:	f1c0 0320 	rsb	r3, r0, #32
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	40c2      	lsrs	r2, r0
 8006f4c:	6163      	str	r3, [r4, #20]
 8006f4e:	9201      	str	r2, [sp, #4]
 8006f50:	9b01      	ldr	r3, [sp, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	bf14      	ite	ne
 8006f56:	2102      	movne	r1, #2
 8006f58:	2101      	moveq	r1, #1
 8006f5a:	61a3      	str	r3, [r4, #24]
 8006f5c:	6121      	str	r1, [r4, #16]
 8006f5e:	b1c5      	cbz	r5, 8006f92 <__d2b+0x96>
 8006f60:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f64:	4405      	add	r5, r0
 8006f66:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f6a:	603d      	str	r5, [r7, #0]
 8006f6c:	6030      	str	r0, [r6, #0]
 8006f6e:	4620      	mov	r0, r4
 8006f70:	b002      	add	sp, #8
 8006f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f7a:	e7d6      	b.n	8006f2a <__d2b+0x2e>
 8006f7c:	6161      	str	r1, [r4, #20]
 8006f7e:	e7e7      	b.n	8006f50 <__d2b+0x54>
 8006f80:	a801      	add	r0, sp, #4
 8006f82:	f7ff fd61 	bl	8006a48 <__lo0bits>
 8006f86:	2101      	movs	r1, #1
 8006f88:	9b01      	ldr	r3, [sp, #4]
 8006f8a:	6121      	str	r1, [r4, #16]
 8006f8c:	6163      	str	r3, [r4, #20]
 8006f8e:	3020      	adds	r0, #32
 8006f90:	e7e5      	b.n	8006f5e <__d2b+0x62>
 8006f92:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006f96:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f9a:	6038      	str	r0, [r7, #0]
 8006f9c:	6918      	ldr	r0, [r3, #16]
 8006f9e:	f7ff fd33 	bl	8006a08 <__hi0bits>
 8006fa2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006fa6:	6031      	str	r1, [r6, #0]
 8006fa8:	e7e1      	b.n	8006f6e <__d2b+0x72>
 8006faa:	bf00      	nop
 8006fac:	080086a3 	.word	0x080086a3
 8006fb0:	080086be 	.word	0x080086be

08006fb4 <_calloc_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	fb02 f501 	mul.w	r5, r2, r1
 8006fba:	4629      	mov	r1, r5
 8006fbc:	f7fe f834 	bl	8005028 <_malloc_r>
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	b118      	cbz	r0, 8006fcc <_calloc_r+0x18>
 8006fc4:	462a      	mov	r2, r5
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	f7fd ffda 	bl	8004f80 <memset>
 8006fcc:	4620      	mov	r0, r4
 8006fce:	bd38      	pop	{r3, r4, r5, pc}

08006fd0 <_realloc_r>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	4607      	mov	r7, r0
 8006fd4:	4614      	mov	r4, r2
 8006fd6:	460e      	mov	r6, r1
 8006fd8:	b921      	cbnz	r1, 8006fe4 <_realloc_r+0x14>
 8006fda:	4611      	mov	r1, r2
 8006fdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006fe0:	f7fe b822 	b.w	8005028 <_malloc_r>
 8006fe4:	b922      	cbnz	r2, 8006ff0 <_realloc_r+0x20>
 8006fe6:	f7fd ffd3 	bl	8004f90 <_free_r>
 8006fea:	4625      	mov	r5, r4
 8006fec:	4628      	mov	r0, r5
 8006fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ff0:	f000 fb94 	bl	800771c <_malloc_usable_size_r>
 8006ff4:	42a0      	cmp	r0, r4
 8006ff6:	d20f      	bcs.n	8007018 <_realloc_r+0x48>
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	f7fe f814 	bl	8005028 <_malloc_r>
 8007000:	4605      	mov	r5, r0
 8007002:	2800      	cmp	r0, #0
 8007004:	d0f2      	beq.n	8006fec <_realloc_r+0x1c>
 8007006:	4631      	mov	r1, r6
 8007008:	4622      	mov	r2, r4
 800700a:	f7fd ffab 	bl	8004f64 <memcpy>
 800700e:	4631      	mov	r1, r6
 8007010:	4638      	mov	r0, r7
 8007012:	f7fd ffbd 	bl	8004f90 <_free_r>
 8007016:	e7e9      	b.n	8006fec <_realloc_r+0x1c>
 8007018:	4635      	mov	r5, r6
 800701a:	e7e7      	b.n	8006fec <_realloc_r+0x1c>

0800701c <__ssputs_r>:
 800701c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007020:	688e      	ldr	r6, [r1, #8]
 8007022:	4682      	mov	sl, r0
 8007024:	429e      	cmp	r6, r3
 8007026:	460c      	mov	r4, r1
 8007028:	4690      	mov	r8, r2
 800702a:	461f      	mov	r7, r3
 800702c:	d838      	bhi.n	80070a0 <__ssputs_r+0x84>
 800702e:	898a      	ldrh	r2, [r1, #12]
 8007030:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007034:	d032      	beq.n	800709c <__ssputs_r+0x80>
 8007036:	6825      	ldr	r5, [r4, #0]
 8007038:	6909      	ldr	r1, [r1, #16]
 800703a:	3301      	adds	r3, #1
 800703c:	eba5 0901 	sub.w	r9, r5, r1
 8007040:	6965      	ldr	r5, [r4, #20]
 8007042:	444b      	add	r3, r9
 8007044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007048:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800704c:	106d      	asrs	r5, r5, #1
 800704e:	429d      	cmp	r5, r3
 8007050:	bf38      	it	cc
 8007052:	461d      	movcc	r5, r3
 8007054:	0553      	lsls	r3, r2, #21
 8007056:	d531      	bpl.n	80070bc <__ssputs_r+0xa0>
 8007058:	4629      	mov	r1, r5
 800705a:	f7fd ffe5 	bl	8005028 <_malloc_r>
 800705e:	4606      	mov	r6, r0
 8007060:	b950      	cbnz	r0, 8007078 <__ssputs_r+0x5c>
 8007062:	230c      	movs	r3, #12
 8007064:	f04f 30ff 	mov.w	r0, #4294967295
 8007068:	f8ca 3000 	str.w	r3, [sl]
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007072:	81a3      	strh	r3, [r4, #12]
 8007074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007078:	464a      	mov	r2, r9
 800707a:	6921      	ldr	r1, [r4, #16]
 800707c:	f7fd ff72 	bl	8004f64 <memcpy>
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800708a:	81a3      	strh	r3, [r4, #12]
 800708c:	6126      	str	r6, [r4, #16]
 800708e:	444e      	add	r6, r9
 8007090:	6026      	str	r6, [r4, #0]
 8007092:	463e      	mov	r6, r7
 8007094:	6165      	str	r5, [r4, #20]
 8007096:	eba5 0509 	sub.w	r5, r5, r9
 800709a:	60a5      	str	r5, [r4, #8]
 800709c:	42be      	cmp	r6, r7
 800709e:	d900      	bls.n	80070a2 <__ssputs_r+0x86>
 80070a0:	463e      	mov	r6, r7
 80070a2:	4632      	mov	r2, r6
 80070a4:	4641      	mov	r1, r8
 80070a6:	6820      	ldr	r0, [r4, #0]
 80070a8:	f000 fb1e 	bl	80076e8 <memmove>
 80070ac:	68a3      	ldr	r3, [r4, #8]
 80070ae:	6822      	ldr	r2, [r4, #0]
 80070b0:	1b9b      	subs	r3, r3, r6
 80070b2:	4432      	add	r2, r6
 80070b4:	2000      	movs	r0, #0
 80070b6:	60a3      	str	r3, [r4, #8]
 80070b8:	6022      	str	r2, [r4, #0]
 80070ba:	e7db      	b.n	8007074 <__ssputs_r+0x58>
 80070bc:	462a      	mov	r2, r5
 80070be:	f7ff ff87 	bl	8006fd0 <_realloc_r>
 80070c2:	4606      	mov	r6, r0
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d1e1      	bne.n	800708c <__ssputs_r+0x70>
 80070c8:	4650      	mov	r0, sl
 80070ca:	6921      	ldr	r1, [r4, #16]
 80070cc:	f7fd ff60 	bl	8004f90 <_free_r>
 80070d0:	e7c7      	b.n	8007062 <__ssputs_r+0x46>
	...

080070d4 <_svfiprintf_r>:
 80070d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d8:	4698      	mov	r8, r3
 80070da:	898b      	ldrh	r3, [r1, #12]
 80070dc:	4607      	mov	r7, r0
 80070de:	061b      	lsls	r3, r3, #24
 80070e0:	460d      	mov	r5, r1
 80070e2:	4614      	mov	r4, r2
 80070e4:	b09d      	sub	sp, #116	; 0x74
 80070e6:	d50e      	bpl.n	8007106 <_svfiprintf_r+0x32>
 80070e8:	690b      	ldr	r3, [r1, #16]
 80070ea:	b963      	cbnz	r3, 8007106 <_svfiprintf_r+0x32>
 80070ec:	2140      	movs	r1, #64	; 0x40
 80070ee:	f7fd ff9b 	bl	8005028 <_malloc_r>
 80070f2:	6028      	str	r0, [r5, #0]
 80070f4:	6128      	str	r0, [r5, #16]
 80070f6:	b920      	cbnz	r0, 8007102 <_svfiprintf_r+0x2e>
 80070f8:	230c      	movs	r3, #12
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007100:	e0d1      	b.n	80072a6 <_svfiprintf_r+0x1d2>
 8007102:	2340      	movs	r3, #64	; 0x40
 8007104:	616b      	str	r3, [r5, #20]
 8007106:	2300      	movs	r3, #0
 8007108:	9309      	str	r3, [sp, #36]	; 0x24
 800710a:	2320      	movs	r3, #32
 800710c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007110:	2330      	movs	r3, #48	; 0x30
 8007112:	f04f 0901 	mov.w	r9, #1
 8007116:	f8cd 800c 	str.w	r8, [sp, #12]
 800711a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80072c0 <_svfiprintf_r+0x1ec>
 800711e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007122:	4623      	mov	r3, r4
 8007124:	469a      	mov	sl, r3
 8007126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800712a:	b10a      	cbz	r2, 8007130 <_svfiprintf_r+0x5c>
 800712c:	2a25      	cmp	r2, #37	; 0x25
 800712e:	d1f9      	bne.n	8007124 <_svfiprintf_r+0x50>
 8007130:	ebba 0b04 	subs.w	fp, sl, r4
 8007134:	d00b      	beq.n	800714e <_svfiprintf_r+0x7a>
 8007136:	465b      	mov	r3, fp
 8007138:	4622      	mov	r2, r4
 800713a:	4629      	mov	r1, r5
 800713c:	4638      	mov	r0, r7
 800713e:	f7ff ff6d 	bl	800701c <__ssputs_r>
 8007142:	3001      	adds	r0, #1
 8007144:	f000 80aa 	beq.w	800729c <_svfiprintf_r+0x1c8>
 8007148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800714a:	445a      	add	r2, fp
 800714c:	9209      	str	r2, [sp, #36]	; 0x24
 800714e:	f89a 3000 	ldrb.w	r3, [sl]
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 80a2 	beq.w	800729c <_svfiprintf_r+0x1c8>
 8007158:	2300      	movs	r3, #0
 800715a:	f04f 32ff 	mov.w	r2, #4294967295
 800715e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007162:	f10a 0a01 	add.w	sl, sl, #1
 8007166:	9304      	str	r3, [sp, #16]
 8007168:	9307      	str	r3, [sp, #28]
 800716a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800716e:	931a      	str	r3, [sp, #104]	; 0x68
 8007170:	4654      	mov	r4, sl
 8007172:	2205      	movs	r2, #5
 8007174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007178:	4851      	ldr	r0, [pc, #324]	; (80072c0 <_svfiprintf_r+0x1ec>)
 800717a:	f7ff fb7f 	bl	800687c <memchr>
 800717e:	9a04      	ldr	r2, [sp, #16]
 8007180:	b9d8      	cbnz	r0, 80071ba <_svfiprintf_r+0xe6>
 8007182:	06d0      	lsls	r0, r2, #27
 8007184:	bf44      	itt	mi
 8007186:	2320      	movmi	r3, #32
 8007188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800718c:	0711      	lsls	r1, r2, #28
 800718e:	bf44      	itt	mi
 8007190:	232b      	movmi	r3, #43	; 0x2b
 8007192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007196:	f89a 3000 	ldrb.w	r3, [sl]
 800719a:	2b2a      	cmp	r3, #42	; 0x2a
 800719c:	d015      	beq.n	80071ca <_svfiprintf_r+0xf6>
 800719e:	4654      	mov	r4, sl
 80071a0:	2000      	movs	r0, #0
 80071a2:	f04f 0c0a 	mov.w	ip, #10
 80071a6:	9a07      	ldr	r2, [sp, #28]
 80071a8:	4621      	mov	r1, r4
 80071aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071ae:	3b30      	subs	r3, #48	; 0x30
 80071b0:	2b09      	cmp	r3, #9
 80071b2:	d94e      	bls.n	8007252 <_svfiprintf_r+0x17e>
 80071b4:	b1b0      	cbz	r0, 80071e4 <_svfiprintf_r+0x110>
 80071b6:	9207      	str	r2, [sp, #28]
 80071b8:	e014      	b.n	80071e4 <_svfiprintf_r+0x110>
 80071ba:	eba0 0308 	sub.w	r3, r0, r8
 80071be:	fa09 f303 	lsl.w	r3, r9, r3
 80071c2:	4313      	orrs	r3, r2
 80071c4:	46a2      	mov	sl, r4
 80071c6:	9304      	str	r3, [sp, #16]
 80071c8:	e7d2      	b.n	8007170 <_svfiprintf_r+0x9c>
 80071ca:	9b03      	ldr	r3, [sp, #12]
 80071cc:	1d19      	adds	r1, r3, #4
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	9103      	str	r1, [sp, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	bfbb      	ittet	lt
 80071d6:	425b      	neglt	r3, r3
 80071d8:	f042 0202 	orrlt.w	r2, r2, #2
 80071dc:	9307      	strge	r3, [sp, #28]
 80071de:	9307      	strlt	r3, [sp, #28]
 80071e0:	bfb8      	it	lt
 80071e2:	9204      	strlt	r2, [sp, #16]
 80071e4:	7823      	ldrb	r3, [r4, #0]
 80071e6:	2b2e      	cmp	r3, #46	; 0x2e
 80071e8:	d10c      	bne.n	8007204 <_svfiprintf_r+0x130>
 80071ea:	7863      	ldrb	r3, [r4, #1]
 80071ec:	2b2a      	cmp	r3, #42	; 0x2a
 80071ee:	d135      	bne.n	800725c <_svfiprintf_r+0x188>
 80071f0:	9b03      	ldr	r3, [sp, #12]
 80071f2:	3402      	adds	r4, #2
 80071f4:	1d1a      	adds	r2, r3, #4
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	9203      	str	r2, [sp, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	bfb8      	it	lt
 80071fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8007202:	9305      	str	r3, [sp, #20]
 8007204:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80072d0 <_svfiprintf_r+0x1fc>
 8007208:	2203      	movs	r2, #3
 800720a:	4650      	mov	r0, sl
 800720c:	7821      	ldrb	r1, [r4, #0]
 800720e:	f7ff fb35 	bl	800687c <memchr>
 8007212:	b140      	cbz	r0, 8007226 <_svfiprintf_r+0x152>
 8007214:	2340      	movs	r3, #64	; 0x40
 8007216:	eba0 000a 	sub.w	r0, r0, sl
 800721a:	fa03 f000 	lsl.w	r0, r3, r0
 800721e:	9b04      	ldr	r3, [sp, #16]
 8007220:	3401      	adds	r4, #1
 8007222:	4303      	orrs	r3, r0
 8007224:	9304      	str	r3, [sp, #16]
 8007226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800722a:	2206      	movs	r2, #6
 800722c:	4825      	ldr	r0, [pc, #148]	; (80072c4 <_svfiprintf_r+0x1f0>)
 800722e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007232:	f7ff fb23 	bl	800687c <memchr>
 8007236:	2800      	cmp	r0, #0
 8007238:	d038      	beq.n	80072ac <_svfiprintf_r+0x1d8>
 800723a:	4b23      	ldr	r3, [pc, #140]	; (80072c8 <_svfiprintf_r+0x1f4>)
 800723c:	bb1b      	cbnz	r3, 8007286 <_svfiprintf_r+0x1b2>
 800723e:	9b03      	ldr	r3, [sp, #12]
 8007240:	3307      	adds	r3, #7
 8007242:	f023 0307 	bic.w	r3, r3, #7
 8007246:	3308      	adds	r3, #8
 8007248:	9303      	str	r3, [sp, #12]
 800724a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800724c:	4433      	add	r3, r6
 800724e:	9309      	str	r3, [sp, #36]	; 0x24
 8007250:	e767      	b.n	8007122 <_svfiprintf_r+0x4e>
 8007252:	460c      	mov	r4, r1
 8007254:	2001      	movs	r0, #1
 8007256:	fb0c 3202 	mla	r2, ip, r2, r3
 800725a:	e7a5      	b.n	80071a8 <_svfiprintf_r+0xd4>
 800725c:	2300      	movs	r3, #0
 800725e:	f04f 0c0a 	mov.w	ip, #10
 8007262:	4619      	mov	r1, r3
 8007264:	3401      	adds	r4, #1
 8007266:	9305      	str	r3, [sp, #20]
 8007268:	4620      	mov	r0, r4
 800726a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800726e:	3a30      	subs	r2, #48	; 0x30
 8007270:	2a09      	cmp	r2, #9
 8007272:	d903      	bls.n	800727c <_svfiprintf_r+0x1a8>
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0c5      	beq.n	8007204 <_svfiprintf_r+0x130>
 8007278:	9105      	str	r1, [sp, #20]
 800727a:	e7c3      	b.n	8007204 <_svfiprintf_r+0x130>
 800727c:	4604      	mov	r4, r0
 800727e:	2301      	movs	r3, #1
 8007280:	fb0c 2101 	mla	r1, ip, r1, r2
 8007284:	e7f0      	b.n	8007268 <_svfiprintf_r+0x194>
 8007286:	ab03      	add	r3, sp, #12
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	462a      	mov	r2, r5
 800728c:	4638      	mov	r0, r7
 800728e:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <_svfiprintf_r+0x1f8>)
 8007290:	a904      	add	r1, sp, #16
 8007292:	f7fd ffc1 	bl	8005218 <_printf_float>
 8007296:	1c42      	adds	r2, r0, #1
 8007298:	4606      	mov	r6, r0
 800729a:	d1d6      	bne.n	800724a <_svfiprintf_r+0x176>
 800729c:	89ab      	ldrh	r3, [r5, #12]
 800729e:	065b      	lsls	r3, r3, #25
 80072a0:	f53f af2c 	bmi.w	80070fc <_svfiprintf_r+0x28>
 80072a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072a6:	b01d      	add	sp, #116	; 0x74
 80072a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ac:	ab03      	add	r3, sp, #12
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	462a      	mov	r2, r5
 80072b2:	4638      	mov	r0, r7
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <_svfiprintf_r+0x1f8>)
 80072b6:	a904      	add	r1, sp, #16
 80072b8:	f7fe fa4a 	bl	8005750 <_printf_i>
 80072bc:	e7eb      	b.n	8007296 <_svfiprintf_r+0x1c2>
 80072be:	bf00      	nop
 80072c0:	0800881c 	.word	0x0800881c
 80072c4:	08008826 	.word	0x08008826
 80072c8:	08005219 	.word	0x08005219
 80072cc:	0800701d 	.word	0x0800701d
 80072d0:	08008822 	.word	0x08008822

080072d4 <_read_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4604      	mov	r4, r0
 80072d8:	4608      	mov	r0, r1
 80072da:	4611      	mov	r1, r2
 80072dc:	2200      	movs	r2, #0
 80072de:	4d05      	ldr	r5, [pc, #20]	; (80072f4 <_read_r+0x20>)
 80072e0:	602a      	str	r2, [r5, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	f7fa fb45 	bl	8001972 <_read>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	d102      	bne.n	80072f2 <_read_r+0x1e>
 80072ec:	682b      	ldr	r3, [r5, #0]
 80072ee:	b103      	cbz	r3, 80072f2 <_read_r+0x1e>
 80072f0:	6023      	str	r3, [r4, #0]
 80072f2:	bd38      	pop	{r3, r4, r5, pc}
 80072f4:	20001730 	.word	0x20001730

080072f8 <__ascii_wctomb>:
 80072f8:	4603      	mov	r3, r0
 80072fa:	4608      	mov	r0, r1
 80072fc:	b141      	cbz	r1, 8007310 <__ascii_wctomb+0x18>
 80072fe:	2aff      	cmp	r2, #255	; 0xff
 8007300:	d904      	bls.n	800730c <__ascii_wctomb+0x14>
 8007302:	228a      	movs	r2, #138	; 0x8a
 8007304:	f04f 30ff 	mov.w	r0, #4294967295
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	4770      	bx	lr
 800730c:	2001      	movs	r0, #1
 800730e:	700a      	strb	r2, [r1, #0]
 8007310:	4770      	bx	lr
	...

08007314 <__assert_func>:
 8007314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007316:	4614      	mov	r4, r2
 8007318:	461a      	mov	r2, r3
 800731a:	4b09      	ldr	r3, [pc, #36]	; (8007340 <__assert_func+0x2c>)
 800731c:	4605      	mov	r5, r0
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68d8      	ldr	r0, [r3, #12]
 8007322:	b14c      	cbz	r4, 8007338 <__assert_func+0x24>
 8007324:	4b07      	ldr	r3, [pc, #28]	; (8007344 <__assert_func+0x30>)
 8007326:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800732a:	9100      	str	r1, [sp, #0]
 800732c:	462b      	mov	r3, r5
 800732e:	4906      	ldr	r1, [pc, #24]	; (8007348 <__assert_func+0x34>)
 8007330:	f000 f9a6 	bl	8007680 <fiprintf>
 8007334:	f000 fc12 	bl	8007b5c <abort>
 8007338:	4b04      	ldr	r3, [pc, #16]	; (800734c <__assert_func+0x38>)
 800733a:	461c      	mov	r4, r3
 800733c:	e7f3      	b.n	8007326 <__assert_func+0x12>
 800733e:	bf00      	nop
 8007340:	20000014 	.word	0x20000014
 8007344:	0800882d 	.word	0x0800882d
 8007348:	0800883a 	.word	0x0800883a
 800734c:	08008868 	.word	0x08008868

08007350 <__sflush_r>:
 8007350:	898a      	ldrh	r2, [r1, #12]
 8007352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007356:	4605      	mov	r5, r0
 8007358:	0710      	lsls	r0, r2, #28
 800735a:	460c      	mov	r4, r1
 800735c:	d458      	bmi.n	8007410 <__sflush_r+0xc0>
 800735e:	684b      	ldr	r3, [r1, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	dc05      	bgt.n	8007370 <__sflush_r+0x20>
 8007364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007366:	2b00      	cmp	r3, #0
 8007368:	dc02      	bgt.n	8007370 <__sflush_r+0x20>
 800736a:	2000      	movs	r0, #0
 800736c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007372:	2e00      	cmp	r6, #0
 8007374:	d0f9      	beq.n	800736a <__sflush_r+0x1a>
 8007376:	2300      	movs	r3, #0
 8007378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800737c:	682f      	ldr	r7, [r5, #0]
 800737e:	602b      	str	r3, [r5, #0]
 8007380:	d032      	beq.n	80073e8 <__sflush_r+0x98>
 8007382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	075a      	lsls	r2, r3, #29
 8007388:	d505      	bpl.n	8007396 <__sflush_r+0x46>
 800738a:	6863      	ldr	r3, [r4, #4]
 800738c:	1ac0      	subs	r0, r0, r3
 800738e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007390:	b10b      	cbz	r3, 8007396 <__sflush_r+0x46>
 8007392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007394:	1ac0      	subs	r0, r0, r3
 8007396:	2300      	movs	r3, #0
 8007398:	4602      	mov	r2, r0
 800739a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800739c:	4628      	mov	r0, r5
 800739e:	6a21      	ldr	r1, [r4, #32]
 80073a0:	47b0      	blx	r6
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	d106      	bne.n	80073b6 <__sflush_r+0x66>
 80073a8:	6829      	ldr	r1, [r5, #0]
 80073aa:	291d      	cmp	r1, #29
 80073ac:	d82c      	bhi.n	8007408 <__sflush_r+0xb8>
 80073ae:	4a2a      	ldr	r2, [pc, #168]	; (8007458 <__sflush_r+0x108>)
 80073b0:	40ca      	lsrs	r2, r1
 80073b2:	07d6      	lsls	r6, r2, #31
 80073b4:	d528      	bpl.n	8007408 <__sflush_r+0xb8>
 80073b6:	2200      	movs	r2, #0
 80073b8:	6062      	str	r2, [r4, #4]
 80073ba:	6922      	ldr	r2, [r4, #16]
 80073bc:	04d9      	lsls	r1, r3, #19
 80073be:	6022      	str	r2, [r4, #0]
 80073c0:	d504      	bpl.n	80073cc <__sflush_r+0x7c>
 80073c2:	1c42      	adds	r2, r0, #1
 80073c4:	d101      	bne.n	80073ca <__sflush_r+0x7a>
 80073c6:	682b      	ldr	r3, [r5, #0]
 80073c8:	b903      	cbnz	r3, 80073cc <__sflush_r+0x7c>
 80073ca:	6560      	str	r0, [r4, #84]	; 0x54
 80073cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073ce:	602f      	str	r7, [r5, #0]
 80073d0:	2900      	cmp	r1, #0
 80073d2:	d0ca      	beq.n	800736a <__sflush_r+0x1a>
 80073d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073d8:	4299      	cmp	r1, r3
 80073da:	d002      	beq.n	80073e2 <__sflush_r+0x92>
 80073dc:	4628      	mov	r0, r5
 80073de:	f7fd fdd7 	bl	8004f90 <_free_r>
 80073e2:	2000      	movs	r0, #0
 80073e4:	6360      	str	r0, [r4, #52]	; 0x34
 80073e6:	e7c1      	b.n	800736c <__sflush_r+0x1c>
 80073e8:	6a21      	ldr	r1, [r4, #32]
 80073ea:	2301      	movs	r3, #1
 80073ec:	4628      	mov	r0, r5
 80073ee:	47b0      	blx	r6
 80073f0:	1c41      	adds	r1, r0, #1
 80073f2:	d1c7      	bne.n	8007384 <__sflush_r+0x34>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0c4      	beq.n	8007384 <__sflush_r+0x34>
 80073fa:	2b1d      	cmp	r3, #29
 80073fc:	d001      	beq.n	8007402 <__sflush_r+0xb2>
 80073fe:	2b16      	cmp	r3, #22
 8007400:	d101      	bne.n	8007406 <__sflush_r+0xb6>
 8007402:	602f      	str	r7, [r5, #0]
 8007404:	e7b1      	b.n	800736a <__sflush_r+0x1a>
 8007406:	89a3      	ldrh	r3, [r4, #12]
 8007408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800740c:	81a3      	strh	r3, [r4, #12]
 800740e:	e7ad      	b.n	800736c <__sflush_r+0x1c>
 8007410:	690f      	ldr	r7, [r1, #16]
 8007412:	2f00      	cmp	r7, #0
 8007414:	d0a9      	beq.n	800736a <__sflush_r+0x1a>
 8007416:	0793      	lsls	r3, r2, #30
 8007418:	bf18      	it	ne
 800741a:	2300      	movne	r3, #0
 800741c:	680e      	ldr	r6, [r1, #0]
 800741e:	bf08      	it	eq
 8007420:	694b      	ldreq	r3, [r1, #20]
 8007422:	eba6 0807 	sub.w	r8, r6, r7
 8007426:	600f      	str	r7, [r1, #0]
 8007428:	608b      	str	r3, [r1, #8]
 800742a:	f1b8 0f00 	cmp.w	r8, #0
 800742e:	dd9c      	ble.n	800736a <__sflush_r+0x1a>
 8007430:	4643      	mov	r3, r8
 8007432:	463a      	mov	r2, r7
 8007434:	4628      	mov	r0, r5
 8007436:	6a21      	ldr	r1, [r4, #32]
 8007438:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800743a:	47b0      	blx	r6
 800743c:	2800      	cmp	r0, #0
 800743e:	dc06      	bgt.n	800744e <__sflush_r+0xfe>
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	f04f 30ff 	mov.w	r0, #4294967295
 8007446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800744a:	81a3      	strh	r3, [r4, #12]
 800744c:	e78e      	b.n	800736c <__sflush_r+0x1c>
 800744e:	4407      	add	r7, r0
 8007450:	eba8 0800 	sub.w	r8, r8, r0
 8007454:	e7e9      	b.n	800742a <__sflush_r+0xda>
 8007456:	bf00      	nop
 8007458:	20400001 	.word	0x20400001

0800745c <_fflush_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	690b      	ldr	r3, [r1, #16]
 8007460:	4605      	mov	r5, r0
 8007462:	460c      	mov	r4, r1
 8007464:	b913      	cbnz	r3, 800746c <_fflush_r+0x10>
 8007466:	2500      	movs	r5, #0
 8007468:	4628      	mov	r0, r5
 800746a:	bd38      	pop	{r3, r4, r5, pc}
 800746c:	b118      	cbz	r0, 8007476 <_fflush_r+0x1a>
 800746e:	6983      	ldr	r3, [r0, #24]
 8007470:	b90b      	cbnz	r3, 8007476 <_fflush_r+0x1a>
 8007472:	f000 f887 	bl	8007584 <__sinit>
 8007476:	4b14      	ldr	r3, [pc, #80]	; (80074c8 <_fflush_r+0x6c>)
 8007478:	429c      	cmp	r4, r3
 800747a:	d11b      	bne.n	80074b4 <_fflush_r+0x58>
 800747c:	686c      	ldr	r4, [r5, #4]
 800747e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0ef      	beq.n	8007466 <_fflush_r+0xa>
 8007486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007488:	07d0      	lsls	r0, r2, #31
 800748a:	d404      	bmi.n	8007496 <_fflush_r+0x3a>
 800748c:	0599      	lsls	r1, r3, #22
 800748e:	d402      	bmi.n	8007496 <_fflush_r+0x3a>
 8007490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007492:	f000 f927 	bl	80076e4 <__retarget_lock_acquire_recursive>
 8007496:	4628      	mov	r0, r5
 8007498:	4621      	mov	r1, r4
 800749a:	f7ff ff59 	bl	8007350 <__sflush_r>
 800749e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074a0:	4605      	mov	r5, r0
 80074a2:	07da      	lsls	r2, r3, #31
 80074a4:	d4e0      	bmi.n	8007468 <_fflush_r+0xc>
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	059b      	lsls	r3, r3, #22
 80074aa:	d4dd      	bmi.n	8007468 <_fflush_r+0xc>
 80074ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074ae:	f000 f91a 	bl	80076e6 <__retarget_lock_release_recursive>
 80074b2:	e7d9      	b.n	8007468 <_fflush_r+0xc>
 80074b4:	4b05      	ldr	r3, [pc, #20]	; (80074cc <_fflush_r+0x70>)
 80074b6:	429c      	cmp	r4, r3
 80074b8:	d101      	bne.n	80074be <_fflush_r+0x62>
 80074ba:	68ac      	ldr	r4, [r5, #8]
 80074bc:	e7df      	b.n	800747e <_fflush_r+0x22>
 80074be:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <_fflush_r+0x74>)
 80074c0:	429c      	cmp	r4, r3
 80074c2:	bf08      	it	eq
 80074c4:	68ec      	ldreq	r4, [r5, #12]
 80074c6:	e7da      	b.n	800747e <_fflush_r+0x22>
 80074c8:	0800888c 	.word	0x0800888c
 80074cc:	080088ac 	.word	0x080088ac
 80074d0:	0800886c 	.word	0x0800886c

080074d4 <std>:
 80074d4:	2300      	movs	r3, #0
 80074d6:	b510      	push	{r4, lr}
 80074d8:	4604      	mov	r4, r0
 80074da:	e9c0 3300 	strd	r3, r3, [r0]
 80074de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074e2:	6083      	str	r3, [r0, #8]
 80074e4:	8181      	strh	r1, [r0, #12]
 80074e6:	6643      	str	r3, [r0, #100]	; 0x64
 80074e8:	81c2      	strh	r2, [r0, #14]
 80074ea:	6183      	str	r3, [r0, #24]
 80074ec:	4619      	mov	r1, r3
 80074ee:	2208      	movs	r2, #8
 80074f0:	305c      	adds	r0, #92	; 0x5c
 80074f2:	f7fd fd45 	bl	8004f80 <memset>
 80074f6:	4b05      	ldr	r3, [pc, #20]	; (800750c <std+0x38>)
 80074f8:	6224      	str	r4, [r4, #32]
 80074fa:	6263      	str	r3, [r4, #36]	; 0x24
 80074fc:	4b04      	ldr	r3, [pc, #16]	; (8007510 <std+0x3c>)
 80074fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007500:	4b04      	ldr	r3, [pc, #16]	; (8007514 <std+0x40>)
 8007502:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007504:	4b04      	ldr	r3, [pc, #16]	; (8007518 <std+0x44>)
 8007506:	6323      	str	r3, [r4, #48]	; 0x30
 8007508:	bd10      	pop	{r4, pc}
 800750a:	bf00      	nop
 800750c:	080059fd 	.word	0x080059fd
 8007510:	08005a1f 	.word	0x08005a1f
 8007514:	08005a57 	.word	0x08005a57
 8007518:	08005a7b 	.word	0x08005a7b

0800751c <_cleanup_r>:
 800751c:	4901      	ldr	r1, [pc, #4]	; (8007524 <_cleanup_r+0x8>)
 800751e:	f000 b8c1 	b.w	80076a4 <_fwalk_reent>
 8007522:	bf00      	nop
 8007524:	0800745d 	.word	0x0800745d

08007528 <__sfmoreglue>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	2568      	movs	r5, #104	; 0x68
 800752c:	1e4a      	subs	r2, r1, #1
 800752e:	4355      	muls	r5, r2
 8007530:	460e      	mov	r6, r1
 8007532:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007536:	f7fd fd77 	bl	8005028 <_malloc_r>
 800753a:	4604      	mov	r4, r0
 800753c:	b140      	cbz	r0, 8007550 <__sfmoreglue+0x28>
 800753e:	2100      	movs	r1, #0
 8007540:	e9c0 1600 	strd	r1, r6, [r0]
 8007544:	300c      	adds	r0, #12
 8007546:	60a0      	str	r0, [r4, #8]
 8007548:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800754c:	f7fd fd18 	bl	8004f80 <memset>
 8007550:	4620      	mov	r0, r4
 8007552:	bd70      	pop	{r4, r5, r6, pc}

08007554 <__sfp_lock_acquire>:
 8007554:	4801      	ldr	r0, [pc, #4]	; (800755c <__sfp_lock_acquire+0x8>)
 8007556:	f000 b8c5 	b.w	80076e4 <__retarget_lock_acquire_recursive>
 800755a:	bf00      	nop
 800755c:	2000173c 	.word	0x2000173c

08007560 <__sfp_lock_release>:
 8007560:	4801      	ldr	r0, [pc, #4]	; (8007568 <__sfp_lock_release+0x8>)
 8007562:	f000 b8c0 	b.w	80076e6 <__retarget_lock_release_recursive>
 8007566:	bf00      	nop
 8007568:	2000173c 	.word	0x2000173c

0800756c <__sinit_lock_acquire>:
 800756c:	4801      	ldr	r0, [pc, #4]	; (8007574 <__sinit_lock_acquire+0x8>)
 800756e:	f000 b8b9 	b.w	80076e4 <__retarget_lock_acquire_recursive>
 8007572:	bf00      	nop
 8007574:	20001737 	.word	0x20001737

08007578 <__sinit_lock_release>:
 8007578:	4801      	ldr	r0, [pc, #4]	; (8007580 <__sinit_lock_release+0x8>)
 800757a:	f000 b8b4 	b.w	80076e6 <__retarget_lock_release_recursive>
 800757e:	bf00      	nop
 8007580:	20001737 	.word	0x20001737

08007584 <__sinit>:
 8007584:	b510      	push	{r4, lr}
 8007586:	4604      	mov	r4, r0
 8007588:	f7ff fff0 	bl	800756c <__sinit_lock_acquire>
 800758c:	69a3      	ldr	r3, [r4, #24]
 800758e:	b11b      	cbz	r3, 8007598 <__sinit+0x14>
 8007590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007594:	f7ff bff0 	b.w	8007578 <__sinit_lock_release>
 8007598:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800759c:	6523      	str	r3, [r4, #80]	; 0x50
 800759e:	4b13      	ldr	r3, [pc, #76]	; (80075ec <__sinit+0x68>)
 80075a0:	4a13      	ldr	r2, [pc, #76]	; (80075f0 <__sinit+0x6c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80075a6:	42a3      	cmp	r3, r4
 80075a8:	bf08      	it	eq
 80075aa:	2301      	moveq	r3, #1
 80075ac:	4620      	mov	r0, r4
 80075ae:	bf08      	it	eq
 80075b0:	61a3      	streq	r3, [r4, #24]
 80075b2:	f000 f81f 	bl	80075f4 <__sfp>
 80075b6:	6060      	str	r0, [r4, #4]
 80075b8:	4620      	mov	r0, r4
 80075ba:	f000 f81b 	bl	80075f4 <__sfp>
 80075be:	60a0      	str	r0, [r4, #8]
 80075c0:	4620      	mov	r0, r4
 80075c2:	f000 f817 	bl	80075f4 <__sfp>
 80075c6:	2200      	movs	r2, #0
 80075c8:	2104      	movs	r1, #4
 80075ca:	60e0      	str	r0, [r4, #12]
 80075cc:	6860      	ldr	r0, [r4, #4]
 80075ce:	f7ff ff81 	bl	80074d4 <std>
 80075d2:	2201      	movs	r2, #1
 80075d4:	2109      	movs	r1, #9
 80075d6:	68a0      	ldr	r0, [r4, #8]
 80075d8:	f7ff ff7c 	bl	80074d4 <std>
 80075dc:	2202      	movs	r2, #2
 80075de:	2112      	movs	r1, #18
 80075e0:	68e0      	ldr	r0, [r4, #12]
 80075e2:	f7ff ff77 	bl	80074d4 <std>
 80075e6:	2301      	movs	r3, #1
 80075e8:	61a3      	str	r3, [r4, #24]
 80075ea:	e7d1      	b.n	8007590 <__sinit+0xc>
 80075ec:	080085e8 	.word	0x080085e8
 80075f0:	0800751d 	.word	0x0800751d

080075f4 <__sfp>:
 80075f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f6:	4607      	mov	r7, r0
 80075f8:	f7ff ffac 	bl	8007554 <__sfp_lock_acquire>
 80075fc:	4b1e      	ldr	r3, [pc, #120]	; (8007678 <__sfp+0x84>)
 80075fe:	681e      	ldr	r6, [r3, #0]
 8007600:	69b3      	ldr	r3, [r6, #24]
 8007602:	b913      	cbnz	r3, 800760a <__sfp+0x16>
 8007604:	4630      	mov	r0, r6
 8007606:	f7ff ffbd 	bl	8007584 <__sinit>
 800760a:	3648      	adds	r6, #72	; 0x48
 800760c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007610:	3b01      	subs	r3, #1
 8007612:	d503      	bpl.n	800761c <__sfp+0x28>
 8007614:	6833      	ldr	r3, [r6, #0]
 8007616:	b30b      	cbz	r3, 800765c <__sfp+0x68>
 8007618:	6836      	ldr	r6, [r6, #0]
 800761a:	e7f7      	b.n	800760c <__sfp+0x18>
 800761c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007620:	b9d5      	cbnz	r5, 8007658 <__sfp+0x64>
 8007622:	4b16      	ldr	r3, [pc, #88]	; (800767c <__sfp+0x88>)
 8007624:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007628:	60e3      	str	r3, [r4, #12]
 800762a:	6665      	str	r5, [r4, #100]	; 0x64
 800762c:	f000 f859 	bl	80076e2 <__retarget_lock_init_recursive>
 8007630:	f7ff ff96 	bl	8007560 <__sfp_lock_release>
 8007634:	2208      	movs	r2, #8
 8007636:	4629      	mov	r1, r5
 8007638:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800763c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007640:	6025      	str	r5, [r4, #0]
 8007642:	61a5      	str	r5, [r4, #24]
 8007644:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007648:	f7fd fc9a 	bl	8004f80 <memset>
 800764c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007650:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007654:	4620      	mov	r0, r4
 8007656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007658:	3468      	adds	r4, #104	; 0x68
 800765a:	e7d9      	b.n	8007610 <__sfp+0x1c>
 800765c:	2104      	movs	r1, #4
 800765e:	4638      	mov	r0, r7
 8007660:	f7ff ff62 	bl	8007528 <__sfmoreglue>
 8007664:	4604      	mov	r4, r0
 8007666:	6030      	str	r0, [r6, #0]
 8007668:	2800      	cmp	r0, #0
 800766a:	d1d5      	bne.n	8007618 <__sfp+0x24>
 800766c:	f7ff ff78 	bl	8007560 <__sfp_lock_release>
 8007670:	230c      	movs	r3, #12
 8007672:	603b      	str	r3, [r7, #0]
 8007674:	e7ee      	b.n	8007654 <__sfp+0x60>
 8007676:	bf00      	nop
 8007678:	080085e8 	.word	0x080085e8
 800767c:	ffff0001 	.word	0xffff0001

08007680 <fiprintf>:
 8007680:	b40e      	push	{r1, r2, r3}
 8007682:	b503      	push	{r0, r1, lr}
 8007684:	4601      	mov	r1, r0
 8007686:	ab03      	add	r3, sp, #12
 8007688:	4805      	ldr	r0, [pc, #20]	; (80076a0 <fiprintf+0x20>)
 800768a:	f853 2b04 	ldr.w	r2, [r3], #4
 800768e:	6800      	ldr	r0, [r0, #0]
 8007690:	9301      	str	r3, [sp, #4]
 8007692:	f000 f873 	bl	800777c <_vfiprintf_r>
 8007696:	b002      	add	sp, #8
 8007698:	f85d eb04 	ldr.w	lr, [sp], #4
 800769c:	b003      	add	sp, #12
 800769e:	4770      	bx	lr
 80076a0:	20000014 	.word	0x20000014

080076a4 <_fwalk_reent>:
 80076a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076a8:	4606      	mov	r6, r0
 80076aa:	4688      	mov	r8, r1
 80076ac:	2700      	movs	r7, #0
 80076ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076b6:	f1b9 0901 	subs.w	r9, r9, #1
 80076ba:	d505      	bpl.n	80076c8 <_fwalk_reent+0x24>
 80076bc:	6824      	ldr	r4, [r4, #0]
 80076be:	2c00      	cmp	r4, #0
 80076c0:	d1f7      	bne.n	80076b2 <_fwalk_reent+0xe>
 80076c2:	4638      	mov	r0, r7
 80076c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076c8:	89ab      	ldrh	r3, [r5, #12]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d907      	bls.n	80076de <_fwalk_reent+0x3a>
 80076ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076d2:	3301      	adds	r3, #1
 80076d4:	d003      	beq.n	80076de <_fwalk_reent+0x3a>
 80076d6:	4629      	mov	r1, r5
 80076d8:	4630      	mov	r0, r6
 80076da:	47c0      	blx	r8
 80076dc:	4307      	orrs	r7, r0
 80076de:	3568      	adds	r5, #104	; 0x68
 80076e0:	e7e9      	b.n	80076b6 <_fwalk_reent+0x12>

080076e2 <__retarget_lock_init_recursive>:
 80076e2:	4770      	bx	lr

080076e4 <__retarget_lock_acquire_recursive>:
 80076e4:	4770      	bx	lr

080076e6 <__retarget_lock_release_recursive>:
 80076e6:	4770      	bx	lr

080076e8 <memmove>:
 80076e8:	4288      	cmp	r0, r1
 80076ea:	b510      	push	{r4, lr}
 80076ec:	eb01 0402 	add.w	r4, r1, r2
 80076f0:	d902      	bls.n	80076f8 <memmove+0x10>
 80076f2:	4284      	cmp	r4, r0
 80076f4:	4623      	mov	r3, r4
 80076f6:	d807      	bhi.n	8007708 <memmove+0x20>
 80076f8:	1e43      	subs	r3, r0, #1
 80076fa:	42a1      	cmp	r1, r4
 80076fc:	d008      	beq.n	8007710 <memmove+0x28>
 80076fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007702:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007706:	e7f8      	b.n	80076fa <memmove+0x12>
 8007708:	4601      	mov	r1, r0
 800770a:	4402      	add	r2, r0
 800770c:	428a      	cmp	r2, r1
 800770e:	d100      	bne.n	8007712 <memmove+0x2a>
 8007710:	bd10      	pop	{r4, pc}
 8007712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800771a:	e7f7      	b.n	800770c <memmove+0x24>

0800771c <_malloc_usable_size_r>:
 800771c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007720:	1f18      	subs	r0, r3, #4
 8007722:	2b00      	cmp	r3, #0
 8007724:	bfbc      	itt	lt
 8007726:	580b      	ldrlt	r3, [r1, r0]
 8007728:	18c0      	addlt	r0, r0, r3
 800772a:	4770      	bx	lr

0800772c <__sfputc_r>:
 800772c:	6893      	ldr	r3, [r2, #8]
 800772e:	b410      	push	{r4}
 8007730:	3b01      	subs	r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	6093      	str	r3, [r2, #8]
 8007736:	da07      	bge.n	8007748 <__sfputc_r+0x1c>
 8007738:	6994      	ldr	r4, [r2, #24]
 800773a:	42a3      	cmp	r3, r4
 800773c:	db01      	blt.n	8007742 <__sfputc_r+0x16>
 800773e:	290a      	cmp	r1, #10
 8007740:	d102      	bne.n	8007748 <__sfputc_r+0x1c>
 8007742:	bc10      	pop	{r4}
 8007744:	f000 b94a 	b.w	80079dc <__swbuf_r>
 8007748:	6813      	ldr	r3, [r2, #0]
 800774a:	1c58      	adds	r0, r3, #1
 800774c:	6010      	str	r0, [r2, #0]
 800774e:	7019      	strb	r1, [r3, #0]
 8007750:	4608      	mov	r0, r1
 8007752:	bc10      	pop	{r4}
 8007754:	4770      	bx	lr

08007756 <__sfputs_r>:
 8007756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007758:	4606      	mov	r6, r0
 800775a:	460f      	mov	r7, r1
 800775c:	4614      	mov	r4, r2
 800775e:	18d5      	adds	r5, r2, r3
 8007760:	42ac      	cmp	r4, r5
 8007762:	d101      	bne.n	8007768 <__sfputs_r+0x12>
 8007764:	2000      	movs	r0, #0
 8007766:	e007      	b.n	8007778 <__sfputs_r+0x22>
 8007768:	463a      	mov	r2, r7
 800776a:	4630      	mov	r0, r6
 800776c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007770:	f7ff ffdc 	bl	800772c <__sfputc_r>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d1f3      	bne.n	8007760 <__sfputs_r+0xa>
 8007778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800777c <_vfiprintf_r>:
 800777c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007780:	460d      	mov	r5, r1
 8007782:	4614      	mov	r4, r2
 8007784:	4698      	mov	r8, r3
 8007786:	4606      	mov	r6, r0
 8007788:	b09d      	sub	sp, #116	; 0x74
 800778a:	b118      	cbz	r0, 8007794 <_vfiprintf_r+0x18>
 800778c:	6983      	ldr	r3, [r0, #24]
 800778e:	b90b      	cbnz	r3, 8007794 <_vfiprintf_r+0x18>
 8007790:	f7ff fef8 	bl	8007584 <__sinit>
 8007794:	4b89      	ldr	r3, [pc, #548]	; (80079bc <_vfiprintf_r+0x240>)
 8007796:	429d      	cmp	r5, r3
 8007798:	d11b      	bne.n	80077d2 <_vfiprintf_r+0x56>
 800779a:	6875      	ldr	r5, [r6, #4]
 800779c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800779e:	07d9      	lsls	r1, r3, #31
 80077a0:	d405      	bmi.n	80077ae <_vfiprintf_r+0x32>
 80077a2:	89ab      	ldrh	r3, [r5, #12]
 80077a4:	059a      	lsls	r2, r3, #22
 80077a6:	d402      	bmi.n	80077ae <_vfiprintf_r+0x32>
 80077a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077aa:	f7ff ff9b 	bl	80076e4 <__retarget_lock_acquire_recursive>
 80077ae:	89ab      	ldrh	r3, [r5, #12]
 80077b0:	071b      	lsls	r3, r3, #28
 80077b2:	d501      	bpl.n	80077b8 <_vfiprintf_r+0x3c>
 80077b4:	692b      	ldr	r3, [r5, #16]
 80077b6:	b9eb      	cbnz	r3, 80077f4 <_vfiprintf_r+0x78>
 80077b8:	4629      	mov	r1, r5
 80077ba:	4630      	mov	r0, r6
 80077bc:	f000 f960 	bl	8007a80 <__swsetup_r>
 80077c0:	b1c0      	cbz	r0, 80077f4 <_vfiprintf_r+0x78>
 80077c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077c4:	07dc      	lsls	r4, r3, #31
 80077c6:	d50e      	bpl.n	80077e6 <_vfiprintf_r+0x6a>
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295
 80077cc:	b01d      	add	sp, #116	; 0x74
 80077ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d2:	4b7b      	ldr	r3, [pc, #492]	; (80079c0 <_vfiprintf_r+0x244>)
 80077d4:	429d      	cmp	r5, r3
 80077d6:	d101      	bne.n	80077dc <_vfiprintf_r+0x60>
 80077d8:	68b5      	ldr	r5, [r6, #8]
 80077da:	e7df      	b.n	800779c <_vfiprintf_r+0x20>
 80077dc:	4b79      	ldr	r3, [pc, #484]	; (80079c4 <_vfiprintf_r+0x248>)
 80077de:	429d      	cmp	r5, r3
 80077e0:	bf08      	it	eq
 80077e2:	68f5      	ldreq	r5, [r6, #12]
 80077e4:	e7da      	b.n	800779c <_vfiprintf_r+0x20>
 80077e6:	89ab      	ldrh	r3, [r5, #12]
 80077e8:	0598      	lsls	r0, r3, #22
 80077ea:	d4ed      	bmi.n	80077c8 <_vfiprintf_r+0x4c>
 80077ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077ee:	f7ff ff7a 	bl	80076e6 <__retarget_lock_release_recursive>
 80077f2:	e7e9      	b.n	80077c8 <_vfiprintf_r+0x4c>
 80077f4:	2300      	movs	r3, #0
 80077f6:	9309      	str	r3, [sp, #36]	; 0x24
 80077f8:	2320      	movs	r3, #32
 80077fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077fe:	2330      	movs	r3, #48	; 0x30
 8007800:	f04f 0901 	mov.w	r9, #1
 8007804:	f8cd 800c 	str.w	r8, [sp, #12]
 8007808:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80079c8 <_vfiprintf_r+0x24c>
 800780c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007810:	4623      	mov	r3, r4
 8007812:	469a      	mov	sl, r3
 8007814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007818:	b10a      	cbz	r2, 800781e <_vfiprintf_r+0xa2>
 800781a:	2a25      	cmp	r2, #37	; 0x25
 800781c:	d1f9      	bne.n	8007812 <_vfiprintf_r+0x96>
 800781e:	ebba 0b04 	subs.w	fp, sl, r4
 8007822:	d00b      	beq.n	800783c <_vfiprintf_r+0xc0>
 8007824:	465b      	mov	r3, fp
 8007826:	4622      	mov	r2, r4
 8007828:	4629      	mov	r1, r5
 800782a:	4630      	mov	r0, r6
 800782c:	f7ff ff93 	bl	8007756 <__sfputs_r>
 8007830:	3001      	adds	r0, #1
 8007832:	f000 80aa 	beq.w	800798a <_vfiprintf_r+0x20e>
 8007836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007838:	445a      	add	r2, fp
 800783a:	9209      	str	r2, [sp, #36]	; 0x24
 800783c:	f89a 3000 	ldrb.w	r3, [sl]
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 80a2 	beq.w	800798a <_vfiprintf_r+0x20e>
 8007846:	2300      	movs	r3, #0
 8007848:	f04f 32ff 	mov.w	r2, #4294967295
 800784c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007850:	f10a 0a01 	add.w	sl, sl, #1
 8007854:	9304      	str	r3, [sp, #16]
 8007856:	9307      	str	r3, [sp, #28]
 8007858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800785c:	931a      	str	r3, [sp, #104]	; 0x68
 800785e:	4654      	mov	r4, sl
 8007860:	2205      	movs	r2, #5
 8007862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007866:	4858      	ldr	r0, [pc, #352]	; (80079c8 <_vfiprintf_r+0x24c>)
 8007868:	f7ff f808 	bl	800687c <memchr>
 800786c:	9a04      	ldr	r2, [sp, #16]
 800786e:	b9d8      	cbnz	r0, 80078a8 <_vfiprintf_r+0x12c>
 8007870:	06d1      	lsls	r1, r2, #27
 8007872:	bf44      	itt	mi
 8007874:	2320      	movmi	r3, #32
 8007876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800787a:	0713      	lsls	r3, r2, #28
 800787c:	bf44      	itt	mi
 800787e:	232b      	movmi	r3, #43	; 0x2b
 8007880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007884:	f89a 3000 	ldrb.w	r3, [sl]
 8007888:	2b2a      	cmp	r3, #42	; 0x2a
 800788a:	d015      	beq.n	80078b8 <_vfiprintf_r+0x13c>
 800788c:	4654      	mov	r4, sl
 800788e:	2000      	movs	r0, #0
 8007890:	f04f 0c0a 	mov.w	ip, #10
 8007894:	9a07      	ldr	r2, [sp, #28]
 8007896:	4621      	mov	r1, r4
 8007898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800789c:	3b30      	subs	r3, #48	; 0x30
 800789e:	2b09      	cmp	r3, #9
 80078a0:	d94e      	bls.n	8007940 <_vfiprintf_r+0x1c4>
 80078a2:	b1b0      	cbz	r0, 80078d2 <_vfiprintf_r+0x156>
 80078a4:	9207      	str	r2, [sp, #28]
 80078a6:	e014      	b.n	80078d2 <_vfiprintf_r+0x156>
 80078a8:	eba0 0308 	sub.w	r3, r0, r8
 80078ac:	fa09 f303 	lsl.w	r3, r9, r3
 80078b0:	4313      	orrs	r3, r2
 80078b2:	46a2      	mov	sl, r4
 80078b4:	9304      	str	r3, [sp, #16]
 80078b6:	e7d2      	b.n	800785e <_vfiprintf_r+0xe2>
 80078b8:	9b03      	ldr	r3, [sp, #12]
 80078ba:	1d19      	adds	r1, r3, #4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	9103      	str	r1, [sp, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	bfbb      	ittet	lt
 80078c4:	425b      	neglt	r3, r3
 80078c6:	f042 0202 	orrlt.w	r2, r2, #2
 80078ca:	9307      	strge	r3, [sp, #28]
 80078cc:	9307      	strlt	r3, [sp, #28]
 80078ce:	bfb8      	it	lt
 80078d0:	9204      	strlt	r2, [sp, #16]
 80078d2:	7823      	ldrb	r3, [r4, #0]
 80078d4:	2b2e      	cmp	r3, #46	; 0x2e
 80078d6:	d10c      	bne.n	80078f2 <_vfiprintf_r+0x176>
 80078d8:	7863      	ldrb	r3, [r4, #1]
 80078da:	2b2a      	cmp	r3, #42	; 0x2a
 80078dc:	d135      	bne.n	800794a <_vfiprintf_r+0x1ce>
 80078de:	9b03      	ldr	r3, [sp, #12]
 80078e0:	3402      	adds	r4, #2
 80078e2:	1d1a      	adds	r2, r3, #4
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	9203      	str	r2, [sp, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bfb8      	it	lt
 80078ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80078f0:	9305      	str	r3, [sp, #20]
 80078f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80079d8 <_vfiprintf_r+0x25c>
 80078f6:	2203      	movs	r2, #3
 80078f8:	4650      	mov	r0, sl
 80078fa:	7821      	ldrb	r1, [r4, #0]
 80078fc:	f7fe ffbe 	bl	800687c <memchr>
 8007900:	b140      	cbz	r0, 8007914 <_vfiprintf_r+0x198>
 8007902:	2340      	movs	r3, #64	; 0x40
 8007904:	eba0 000a 	sub.w	r0, r0, sl
 8007908:	fa03 f000 	lsl.w	r0, r3, r0
 800790c:	9b04      	ldr	r3, [sp, #16]
 800790e:	3401      	adds	r4, #1
 8007910:	4303      	orrs	r3, r0
 8007912:	9304      	str	r3, [sp, #16]
 8007914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007918:	2206      	movs	r2, #6
 800791a:	482c      	ldr	r0, [pc, #176]	; (80079cc <_vfiprintf_r+0x250>)
 800791c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007920:	f7fe ffac 	bl	800687c <memchr>
 8007924:	2800      	cmp	r0, #0
 8007926:	d03f      	beq.n	80079a8 <_vfiprintf_r+0x22c>
 8007928:	4b29      	ldr	r3, [pc, #164]	; (80079d0 <_vfiprintf_r+0x254>)
 800792a:	bb1b      	cbnz	r3, 8007974 <_vfiprintf_r+0x1f8>
 800792c:	9b03      	ldr	r3, [sp, #12]
 800792e:	3307      	adds	r3, #7
 8007930:	f023 0307 	bic.w	r3, r3, #7
 8007934:	3308      	adds	r3, #8
 8007936:	9303      	str	r3, [sp, #12]
 8007938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793a:	443b      	add	r3, r7
 800793c:	9309      	str	r3, [sp, #36]	; 0x24
 800793e:	e767      	b.n	8007810 <_vfiprintf_r+0x94>
 8007940:	460c      	mov	r4, r1
 8007942:	2001      	movs	r0, #1
 8007944:	fb0c 3202 	mla	r2, ip, r2, r3
 8007948:	e7a5      	b.n	8007896 <_vfiprintf_r+0x11a>
 800794a:	2300      	movs	r3, #0
 800794c:	f04f 0c0a 	mov.w	ip, #10
 8007950:	4619      	mov	r1, r3
 8007952:	3401      	adds	r4, #1
 8007954:	9305      	str	r3, [sp, #20]
 8007956:	4620      	mov	r0, r4
 8007958:	f810 2b01 	ldrb.w	r2, [r0], #1
 800795c:	3a30      	subs	r2, #48	; 0x30
 800795e:	2a09      	cmp	r2, #9
 8007960:	d903      	bls.n	800796a <_vfiprintf_r+0x1ee>
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0c5      	beq.n	80078f2 <_vfiprintf_r+0x176>
 8007966:	9105      	str	r1, [sp, #20]
 8007968:	e7c3      	b.n	80078f2 <_vfiprintf_r+0x176>
 800796a:	4604      	mov	r4, r0
 800796c:	2301      	movs	r3, #1
 800796e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007972:	e7f0      	b.n	8007956 <_vfiprintf_r+0x1da>
 8007974:	ab03      	add	r3, sp, #12
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	462a      	mov	r2, r5
 800797a:	4630      	mov	r0, r6
 800797c:	4b15      	ldr	r3, [pc, #84]	; (80079d4 <_vfiprintf_r+0x258>)
 800797e:	a904      	add	r1, sp, #16
 8007980:	f7fd fc4a 	bl	8005218 <_printf_float>
 8007984:	4607      	mov	r7, r0
 8007986:	1c78      	adds	r0, r7, #1
 8007988:	d1d6      	bne.n	8007938 <_vfiprintf_r+0x1bc>
 800798a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800798c:	07d9      	lsls	r1, r3, #31
 800798e:	d405      	bmi.n	800799c <_vfiprintf_r+0x220>
 8007990:	89ab      	ldrh	r3, [r5, #12]
 8007992:	059a      	lsls	r2, r3, #22
 8007994:	d402      	bmi.n	800799c <_vfiprintf_r+0x220>
 8007996:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007998:	f7ff fea5 	bl	80076e6 <__retarget_lock_release_recursive>
 800799c:	89ab      	ldrh	r3, [r5, #12]
 800799e:	065b      	lsls	r3, r3, #25
 80079a0:	f53f af12 	bmi.w	80077c8 <_vfiprintf_r+0x4c>
 80079a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079a6:	e711      	b.n	80077cc <_vfiprintf_r+0x50>
 80079a8:	ab03      	add	r3, sp, #12
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	462a      	mov	r2, r5
 80079ae:	4630      	mov	r0, r6
 80079b0:	4b08      	ldr	r3, [pc, #32]	; (80079d4 <_vfiprintf_r+0x258>)
 80079b2:	a904      	add	r1, sp, #16
 80079b4:	f7fd fecc 	bl	8005750 <_printf_i>
 80079b8:	e7e4      	b.n	8007984 <_vfiprintf_r+0x208>
 80079ba:	bf00      	nop
 80079bc:	0800888c 	.word	0x0800888c
 80079c0:	080088ac 	.word	0x080088ac
 80079c4:	0800886c 	.word	0x0800886c
 80079c8:	0800881c 	.word	0x0800881c
 80079cc:	08008826 	.word	0x08008826
 80079d0:	08005219 	.word	0x08005219
 80079d4:	08007757 	.word	0x08007757
 80079d8:	08008822 	.word	0x08008822

080079dc <__swbuf_r>:
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079de:	460e      	mov	r6, r1
 80079e0:	4614      	mov	r4, r2
 80079e2:	4605      	mov	r5, r0
 80079e4:	b118      	cbz	r0, 80079ee <__swbuf_r+0x12>
 80079e6:	6983      	ldr	r3, [r0, #24]
 80079e8:	b90b      	cbnz	r3, 80079ee <__swbuf_r+0x12>
 80079ea:	f7ff fdcb 	bl	8007584 <__sinit>
 80079ee:	4b21      	ldr	r3, [pc, #132]	; (8007a74 <__swbuf_r+0x98>)
 80079f0:	429c      	cmp	r4, r3
 80079f2:	d12b      	bne.n	8007a4c <__swbuf_r+0x70>
 80079f4:	686c      	ldr	r4, [r5, #4]
 80079f6:	69a3      	ldr	r3, [r4, #24]
 80079f8:	60a3      	str	r3, [r4, #8]
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	071a      	lsls	r2, r3, #28
 80079fe:	d52f      	bpl.n	8007a60 <__swbuf_r+0x84>
 8007a00:	6923      	ldr	r3, [r4, #16]
 8007a02:	b36b      	cbz	r3, 8007a60 <__swbuf_r+0x84>
 8007a04:	6923      	ldr	r3, [r4, #16]
 8007a06:	6820      	ldr	r0, [r4, #0]
 8007a08:	b2f6      	uxtb	r6, r6
 8007a0a:	1ac0      	subs	r0, r0, r3
 8007a0c:	6963      	ldr	r3, [r4, #20]
 8007a0e:	4637      	mov	r7, r6
 8007a10:	4283      	cmp	r3, r0
 8007a12:	dc04      	bgt.n	8007a1e <__swbuf_r+0x42>
 8007a14:	4621      	mov	r1, r4
 8007a16:	4628      	mov	r0, r5
 8007a18:	f7ff fd20 	bl	800745c <_fflush_r>
 8007a1c:	bb30      	cbnz	r0, 8007a6c <__swbuf_r+0x90>
 8007a1e:	68a3      	ldr	r3, [r4, #8]
 8007a20:	3001      	adds	r0, #1
 8007a22:	3b01      	subs	r3, #1
 8007a24:	60a3      	str	r3, [r4, #8]
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	6022      	str	r2, [r4, #0]
 8007a2c:	701e      	strb	r6, [r3, #0]
 8007a2e:	6963      	ldr	r3, [r4, #20]
 8007a30:	4283      	cmp	r3, r0
 8007a32:	d004      	beq.n	8007a3e <__swbuf_r+0x62>
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	07db      	lsls	r3, r3, #31
 8007a38:	d506      	bpl.n	8007a48 <__swbuf_r+0x6c>
 8007a3a:	2e0a      	cmp	r6, #10
 8007a3c:	d104      	bne.n	8007a48 <__swbuf_r+0x6c>
 8007a3e:	4621      	mov	r1, r4
 8007a40:	4628      	mov	r0, r5
 8007a42:	f7ff fd0b 	bl	800745c <_fflush_r>
 8007a46:	b988      	cbnz	r0, 8007a6c <__swbuf_r+0x90>
 8007a48:	4638      	mov	r0, r7
 8007a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <__swbuf_r+0x9c>)
 8007a4e:	429c      	cmp	r4, r3
 8007a50:	d101      	bne.n	8007a56 <__swbuf_r+0x7a>
 8007a52:	68ac      	ldr	r4, [r5, #8]
 8007a54:	e7cf      	b.n	80079f6 <__swbuf_r+0x1a>
 8007a56:	4b09      	ldr	r3, [pc, #36]	; (8007a7c <__swbuf_r+0xa0>)
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	bf08      	it	eq
 8007a5c:	68ec      	ldreq	r4, [r5, #12]
 8007a5e:	e7ca      	b.n	80079f6 <__swbuf_r+0x1a>
 8007a60:	4621      	mov	r1, r4
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 f80c 	bl	8007a80 <__swsetup_r>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d0cb      	beq.n	8007a04 <__swbuf_r+0x28>
 8007a6c:	f04f 37ff 	mov.w	r7, #4294967295
 8007a70:	e7ea      	b.n	8007a48 <__swbuf_r+0x6c>
 8007a72:	bf00      	nop
 8007a74:	0800888c 	.word	0x0800888c
 8007a78:	080088ac 	.word	0x080088ac
 8007a7c:	0800886c 	.word	0x0800886c

08007a80 <__swsetup_r>:
 8007a80:	4b32      	ldr	r3, [pc, #200]	; (8007b4c <__swsetup_r+0xcc>)
 8007a82:	b570      	push	{r4, r5, r6, lr}
 8007a84:	681d      	ldr	r5, [r3, #0]
 8007a86:	4606      	mov	r6, r0
 8007a88:	460c      	mov	r4, r1
 8007a8a:	b125      	cbz	r5, 8007a96 <__swsetup_r+0x16>
 8007a8c:	69ab      	ldr	r3, [r5, #24]
 8007a8e:	b913      	cbnz	r3, 8007a96 <__swsetup_r+0x16>
 8007a90:	4628      	mov	r0, r5
 8007a92:	f7ff fd77 	bl	8007584 <__sinit>
 8007a96:	4b2e      	ldr	r3, [pc, #184]	; (8007b50 <__swsetup_r+0xd0>)
 8007a98:	429c      	cmp	r4, r3
 8007a9a:	d10f      	bne.n	8007abc <__swsetup_r+0x3c>
 8007a9c:	686c      	ldr	r4, [r5, #4]
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007aa4:	0719      	lsls	r1, r3, #28
 8007aa6:	d42c      	bmi.n	8007b02 <__swsetup_r+0x82>
 8007aa8:	06dd      	lsls	r5, r3, #27
 8007aaa:	d411      	bmi.n	8007ad0 <__swsetup_r+0x50>
 8007aac:	2309      	movs	r3, #9
 8007aae:	6033      	str	r3, [r6, #0]
 8007ab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab8:	81a3      	strh	r3, [r4, #12]
 8007aba:	e03e      	b.n	8007b3a <__swsetup_r+0xba>
 8007abc:	4b25      	ldr	r3, [pc, #148]	; (8007b54 <__swsetup_r+0xd4>)
 8007abe:	429c      	cmp	r4, r3
 8007ac0:	d101      	bne.n	8007ac6 <__swsetup_r+0x46>
 8007ac2:	68ac      	ldr	r4, [r5, #8]
 8007ac4:	e7eb      	b.n	8007a9e <__swsetup_r+0x1e>
 8007ac6:	4b24      	ldr	r3, [pc, #144]	; (8007b58 <__swsetup_r+0xd8>)
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	bf08      	it	eq
 8007acc:	68ec      	ldreq	r4, [r5, #12]
 8007ace:	e7e6      	b.n	8007a9e <__swsetup_r+0x1e>
 8007ad0:	0758      	lsls	r0, r3, #29
 8007ad2:	d512      	bpl.n	8007afa <__swsetup_r+0x7a>
 8007ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ad6:	b141      	cbz	r1, 8007aea <__swsetup_r+0x6a>
 8007ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007adc:	4299      	cmp	r1, r3
 8007ade:	d002      	beq.n	8007ae6 <__swsetup_r+0x66>
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f7fd fa55 	bl	8004f90 <_free_r>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	2300      	movs	r3, #0
 8007af4:	6063      	str	r3, [r4, #4]
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	f043 0308 	orr.w	r3, r3, #8
 8007b00:	81a3      	strh	r3, [r4, #12]
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	b94b      	cbnz	r3, 8007b1a <__swsetup_r+0x9a>
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b10:	d003      	beq.n	8007b1a <__swsetup_r+0x9a>
 8007b12:	4621      	mov	r1, r4
 8007b14:	4630      	mov	r0, r6
 8007b16:	f000 f84d 	bl	8007bb4 <__smakebuf_r>
 8007b1a:	89a0      	ldrh	r0, [r4, #12]
 8007b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b20:	f010 0301 	ands.w	r3, r0, #1
 8007b24:	d00a      	beq.n	8007b3c <__swsetup_r+0xbc>
 8007b26:	2300      	movs	r3, #0
 8007b28:	60a3      	str	r3, [r4, #8]
 8007b2a:	6963      	ldr	r3, [r4, #20]
 8007b2c:	425b      	negs	r3, r3
 8007b2e:	61a3      	str	r3, [r4, #24]
 8007b30:	6923      	ldr	r3, [r4, #16]
 8007b32:	b943      	cbnz	r3, 8007b46 <__swsetup_r+0xc6>
 8007b34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b38:	d1ba      	bne.n	8007ab0 <__swsetup_r+0x30>
 8007b3a:	bd70      	pop	{r4, r5, r6, pc}
 8007b3c:	0781      	lsls	r1, r0, #30
 8007b3e:	bf58      	it	pl
 8007b40:	6963      	ldrpl	r3, [r4, #20]
 8007b42:	60a3      	str	r3, [r4, #8]
 8007b44:	e7f4      	b.n	8007b30 <__swsetup_r+0xb0>
 8007b46:	2000      	movs	r0, #0
 8007b48:	e7f7      	b.n	8007b3a <__swsetup_r+0xba>
 8007b4a:	bf00      	nop
 8007b4c:	20000014 	.word	0x20000014
 8007b50:	0800888c 	.word	0x0800888c
 8007b54:	080088ac 	.word	0x080088ac
 8007b58:	0800886c 	.word	0x0800886c

08007b5c <abort>:
 8007b5c:	2006      	movs	r0, #6
 8007b5e:	b508      	push	{r3, lr}
 8007b60:	f000 f890 	bl	8007c84 <raise>
 8007b64:	2001      	movs	r0, #1
 8007b66:	f7f9 fefa 	bl	800195e <_exit>

08007b6a <__swhatbuf_r>:
 8007b6a:	b570      	push	{r4, r5, r6, lr}
 8007b6c:	460e      	mov	r6, r1
 8007b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b72:	4614      	mov	r4, r2
 8007b74:	2900      	cmp	r1, #0
 8007b76:	461d      	mov	r5, r3
 8007b78:	b096      	sub	sp, #88	; 0x58
 8007b7a:	da07      	bge.n	8007b8c <__swhatbuf_r+0x22>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	602b      	str	r3, [r5, #0]
 8007b80:	89b3      	ldrh	r3, [r6, #12]
 8007b82:	061a      	lsls	r2, r3, #24
 8007b84:	d410      	bmi.n	8007ba8 <__swhatbuf_r+0x3e>
 8007b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b8a:	e00e      	b.n	8007baa <__swhatbuf_r+0x40>
 8007b8c:	466a      	mov	r2, sp
 8007b8e:	f000 f895 	bl	8007cbc <_fstat_r>
 8007b92:	2800      	cmp	r0, #0
 8007b94:	dbf2      	blt.n	8007b7c <__swhatbuf_r+0x12>
 8007b96:	9a01      	ldr	r2, [sp, #4]
 8007b98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ba0:	425a      	negs	r2, r3
 8007ba2:	415a      	adcs	r2, r3
 8007ba4:	602a      	str	r2, [r5, #0]
 8007ba6:	e7ee      	b.n	8007b86 <__swhatbuf_r+0x1c>
 8007ba8:	2340      	movs	r3, #64	; 0x40
 8007baa:	2000      	movs	r0, #0
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	b016      	add	sp, #88	; 0x58
 8007bb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007bb4 <__smakebuf_r>:
 8007bb4:	898b      	ldrh	r3, [r1, #12]
 8007bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bb8:	079d      	lsls	r5, r3, #30
 8007bba:	4606      	mov	r6, r0
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	d507      	bpl.n	8007bd0 <__smakebuf_r+0x1c>
 8007bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	6123      	str	r3, [r4, #16]
 8007bc8:	2301      	movs	r3, #1
 8007bca:	6163      	str	r3, [r4, #20]
 8007bcc:	b002      	add	sp, #8
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	466a      	mov	r2, sp
 8007bd2:	ab01      	add	r3, sp, #4
 8007bd4:	f7ff ffc9 	bl	8007b6a <__swhatbuf_r>
 8007bd8:	9900      	ldr	r1, [sp, #0]
 8007bda:	4605      	mov	r5, r0
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f7fd fa23 	bl	8005028 <_malloc_r>
 8007be2:	b948      	cbnz	r0, 8007bf8 <__smakebuf_r+0x44>
 8007be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007be8:	059a      	lsls	r2, r3, #22
 8007bea:	d4ef      	bmi.n	8007bcc <__smakebuf_r+0x18>
 8007bec:	f023 0303 	bic.w	r3, r3, #3
 8007bf0:	f043 0302 	orr.w	r3, r3, #2
 8007bf4:	81a3      	strh	r3, [r4, #12]
 8007bf6:	e7e3      	b.n	8007bc0 <__smakebuf_r+0xc>
 8007bf8:	4b0d      	ldr	r3, [pc, #52]	; (8007c30 <__smakebuf_r+0x7c>)
 8007bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	6020      	str	r0, [r4, #0]
 8007c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	9b00      	ldr	r3, [sp, #0]
 8007c08:	6120      	str	r0, [r4, #16]
 8007c0a:	6163      	str	r3, [r4, #20]
 8007c0c:	9b01      	ldr	r3, [sp, #4]
 8007c0e:	b15b      	cbz	r3, 8007c28 <__smakebuf_r+0x74>
 8007c10:	4630      	mov	r0, r6
 8007c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c16:	f000 f863 	bl	8007ce0 <_isatty_r>
 8007c1a:	b128      	cbz	r0, 8007c28 <__smakebuf_r+0x74>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	f023 0303 	bic.w	r3, r3, #3
 8007c22:	f043 0301 	orr.w	r3, r3, #1
 8007c26:	81a3      	strh	r3, [r4, #12]
 8007c28:	89a0      	ldrh	r0, [r4, #12]
 8007c2a:	4305      	orrs	r5, r0
 8007c2c:	81a5      	strh	r5, [r4, #12]
 8007c2e:	e7cd      	b.n	8007bcc <__smakebuf_r+0x18>
 8007c30:	0800751d 	.word	0x0800751d

08007c34 <_raise_r>:
 8007c34:	291f      	cmp	r1, #31
 8007c36:	b538      	push	{r3, r4, r5, lr}
 8007c38:	4604      	mov	r4, r0
 8007c3a:	460d      	mov	r5, r1
 8007c3c:	d904      	bls.n	8007c48 <_raise_r+0x14>
 8007c3e:	2316      	movs	r3, #22
 8007c40:	6003      	str	r3, [r0, #0]
 8007c42:	f04f 30ff 	mov.w	r0, #4294967295
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c4a:	b112      	cbz	r2, 8007c52 <_raise_r+0x1e>
 8007c4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c50:	b94b      	cbnz	r3, 8007c66 <_raise_r+0x32>
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 f830 	bl	8007cb8 <_getpid_r>
 8007c58:	462a      	mov	r2, r5
 8007c5a:	4601      	mov	r1, r0
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c62:	f000 b817 	b.w	8007c94 <_kill_r>
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d00a      	beq.n	8007c80 <_raise_r+0x4c>
 8007c6a:	1c59      	adds	r1, r3, #1
 8007c6c:	d103      	bne.n	8007c76 <_raise_r+0x42>
 8007c6e:	2316      	movs	r3, #22
 8007c70:	6003      	str	r3, [r0, #0]
 8007c72:	2001      	movs	r0, #1
 8007c74:	e7e7      	b.n	8007c46 <_raise_r+0x12>
 8007c76:	2400      	movs	r4, #0
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c7e:	4798      	blx	r3
 8007c80:	2000      	movs	r0, #0
 8007c82:	e7e0      	b.n	8007c46 <_raise_r+0x12>

08007c84 <raise>:
 8007c84:	4b02      	ldr	r3, [pc, #8]	; (8007c90 <raise+0xc>)
 8007c86:	4601      	mov	r1, r0
 8007c88:	6818      	ldr	r0, [r3, #0]
 8007c8a:	f7ff bfd3 	b.w	8007c34 <_raise_r>
 8007c8e:	bf00      	nop
 8007c90:	20000014 	.word	0x20000014

08007c94 <_kill_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	2300      	movs	r3, #0
 8007c98:	4d06      	ldr	r5, [pc, #24]	; (8007cb4 <_kill_r+0x20>)
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	4608      	mov	r0, r1
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	602b      	str	r3, [r5, #0]
 8007ca2:	f7f9 fe4c 	bl	800193e <_kill>
 8007ca6:	1c43      	adds	r3, r0, #1
 8007ca8:	d102      	bne.n	8007cb0 <_kill_r+0x1c>
 8007caa:	682b      	ldr	r3, [r5, #0]
 8007cac:	b103      	cbz	r3, 8007cb0 <_kill_r+0x1c>
 8007cae:	6023      	str	r3, [r4, #0]
 8007cb0:	bd38      	pop	{r3, r4, r5, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20001730 	.word	0x20001730

08007cb8 <_getpid_r>:
 8007cb8:	f7f9 be3a 	b.w	8001930 <_getpid>

08007cbc <_fstat_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	4d06      	ldr	r5, [pc, #24]	; (8007cdc <_fstat_r+0x20>)
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	602b      	str	r3, [r5, #0]
 8007cca:	f7f9 fe96 	bl	80019fa <_fstat>
 8007cce:	1c43      	adds	r3, r0, #1
 8007cd0:	d102      	bne.n	8007cd8 <_fstat_r+0x1c>
 8007cd2:	682b      	ldr	r3, [r5, #0]
 8007cd4:	b103      	cbz	r3, 8007cd8 <_fstat_r+0x1c>
 8007cd6:	6023      	str	r3, [r4, #0]
 8007cd8:	bd38      	pop	{r3, r4, r5, pc}
 8007cda:	bf00      	nop
 8007cdc:	20001730 	.word	0x20001730

08007ce0 <_isatty_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	4d05      	ldr	r5, [pc, #20]	; (8007cfc <_isatty_r+0x1c>)
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	4608      	mov	r0, r1
 8007cea:	602b      	str	r3, [r5, #0]
 8007cec:	f7f9 fe94 	bl	8001a18 <_isatty>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	d102      	bne.n	8007cfa <_isatty_r+0x1a>
 8007cf4:	682b      	ldr	r3, [r5, #0]
 8007cf6:	b103      	cbz	r3, 8007cfa <_isatty_r+0x1a>
 8007cf8:	6023      	str	r3, [r4, #0]
 8007cfa:	bd38      	pop	{r3, r4, r5, pc}
 8007cfc:	20001730 	.word	0x20001730

08007d00 <_init>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	bf00      	nop
 8007d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d06:	bc08      	pop	{r3}
 8007d08:	469e      	mov	lr, r3
 8007d0a:	4770      	bx	lr

08007d0c <_fini>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	bf00      	nop
 8007d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d12:	bc08      	pop	{r3}
 8007d14:	469e      	mov	lr, r3
 8007d16:	4770      	bx	lr
